!function e(t,r,n){function o(s,a){if(!r[s]){if(!t[s]){var c="function"==typeof require&&require;if(!a&&c)return c(s,!0);if(i)return i(s,!0);var u=new Error("Cannot find module '"+s+"'");throw u.code="MODULE_NOT_FOUND",u}var l=r[s]={exports:{}};t[s][0].call(l.exports,function(e){var r=t[s][1][e];return o(r||e)},l,l.exports,e,t,r,n)}return r[s].exports}for(var i="function"==typeof require&&require,s=0;s<n.length;s++)o(n[s]);return o}({1:[function(e,t,r){"use strict";var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.header=t,this.trigger=t.querySelector(".site-header__nav-trigger"),this.wrapper=t.querySelector(".site-header__wrapper"),this.dropDown=t.querySelector(".drop__trigger"),this.trigger.addEventListener("click",function(e){r.toggleVisibility()}),this.dropDown.addEventListener("click",function(e){e.preventDefault()})}return n(e,[{key:"toggleVisibility",value:function(){this.wrapper.classList.toggle("site-header__wrapper--hide")}}]),e}();t.exports=o},{}],2:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(r,"__esModule",{value:!0});var o=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),i=n(e("axios")),s=n(e("qs")),a=function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t,this.footer=document.querySelector("footer.site-footer"),this.wait=!1,this.page=1,this.date=vars.postDate,this.id=vars.postID,this.posts=this.container.querySelectorAll(".publication-wrapper"),this.select={},window.addEventListener("onload",function(){window.scrollTo(0,0)}),window.addEventListener("popstate",function(e){location.reload()}),window.addEventListener("scroll",function(){document.body.scrollHeight-document.documentElement.scrollTop-(window.innerHeight+r.footer.offsetHeight)<=2*window.innerHeight&&!r.wait&&(r.addPost(),r.wait=!0),r.getActive()})}return o(e,[{key:"addPost",value:function(){var e=this,t={action:"publication_load_more",post_date:this.date,post_id:this.id,page:this.page};i.default.post(ajaxurl,s.default.stringify(t)).then(function(t){t.data.data.posts.forEach(function(t){e.container.insertAdjacentHTML("beforeend",t.content)}),e.posts=e.container.querySelectorAll(".single__wrapper"),e.page+=1,e.wait=!1}).catch(function(e){console.log(e)})}},{key:"getActive",value:function(){var e={};this.posts.forEach(function(t){var r=t.getBoundingClientRect().top;r<window.innerHeight/2&&r>0&&(e={title:t.dataset.title,path:t.dataset.path})}),this.select.title!==e.title&&void 0!==e.title&&(this.select=e,this.updatePage())}},{key:"updatePage",value:function(){document.title=this.select.title+" - Ecritures Numeriques",window.history.pushState({},"",this.select.path),window.history.scrollRestoration="manual"}}]),e}();r.default=a},{axios:6,qs:34}],3:[function(e,t,r){"use strict";t.exports=function e(t){var r=this,n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];!function(t,r){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this),this.container=t,this.buttons=t.querySelectorAll(".item__button"),this.wrappers=t.querySelectorAll(".item__wrapper"),this.last_index=null,this.desktop=n,this.buttons.forEach(function(e){e.addEventListener("click",function(t){t.preventDefault();var o=Array.prototype.indexOf.call(r.buttons,e);window.innerWidth<700?(e.classList.add("mobile-active"),r.wrappers[o].style.height=60*r.wrappers[o].childElementCount+"px",r.container.scrollIntoView({behavior:"smooth",block:"start",inline:"nearest"}),r.wrappers.forEach(function(e,t){t===o&&o!==r.last_index||(e.style.removeProperty("height"),r.buttons[t].classList.remove("mobile-active"))})):n&&(e.classList.add("desktop-active"),r.wrappers[o].classList.add("desktop-active"),r.wrappers.forEach(function(e,t){r.wrappers[t].classList.remove("mobile-active"),r.buttons[t].classList.remove("mobile-active"),e.style.removeProperty("height"),t!==o&&(r.wrappers[t].classList.remove("desktop-active"),r.buttons[t].classList.remove("desktop-active"))})),r.last_index=r.last_index===o?null:o})})}},{}],4:[function(e,t,r){"use strict";t.exports=function e(t){var r=this;!function(t,r){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this),this.container=t,this.tabs=t.querySelectorAll("section.related__section"),this.buttons=t.querySelectorAll("button.header__button"),this.wrapper=t.querySelector(".related__container"),this.return=t.querySelector(".related__return"),this.tabsWrapper=t.querySelector(".related__wrapper"),this.last_index=0,this.buttons.forEach(function(e){e.addEventListener("click",function(e){var t=e.currentTarget.dataset.index;t!==r.last_index&&(r.buttons[r.last_index].classList.remove("active"),r.tabs[r.last_index].classList.remove("active"),r.buttons[t].classList.add("active"),r.tabs[t].classList.add("active"),r.last_index=t),window.innerWidth<=700&&(r.wrapper.classList.add("container--slide"),r.tabsWrapper.classList.remove("wrapper--hide"))})}),this.return.addEventListener("click",function(){window.innerWidth<=700&&(r.wrapper.classList.remove("container--slide"),r.tabsWrapper.classList.add("wrapper--hide"))})}},{}],5:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}var o=n(e("./Classes/Header")),i=n(e("./Classes/Rubrics")),s=n(e("./Classes/TaxonomyTabs")),a=n(e("./Classes/LoadMore"));new o.default(document.querySelector(".site-header"));if(document.querySelector(".home-section.rubrics"))new i.default(document.querySelector(".home-section.rubrics"),!0);if(document.querySelector(".taxonomy__related"))new s.default(document.querySelector(".taxonomy__related"));if(document.querySelector(".page-rubrics"))new i.default(document.querySelector(".page-rubrics"),!1);if(document.querySelector(".publication__container"))new a.default(document.querySelector(".publication__container"))},{"./Classes/Header":1,"./Classes/LoadMore":2,"./Classes/Rubrics":3,"./Classes/TaxonomyTabs":4}],6:[function(e,t,r){t.exports=e("./lib/axios")},{"./lib/axios":8}],7:[function(e,t,r){(function(r){"use strict";var n=e("./../utils"),o=e("./../core/settle"),i=e("./../helpers/buildURL"),s=e("./../helpers/parseHeaders"),a=e("./../helpers/isURLSameOrigin"),c=e("../core/createError"),u="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||e("./../helpers/btoa");t.exports=function(t){return new Promise(function(l,f){var p=t.data,d=t.headers;n.isFormData(p)&&delete d["Content-Type"];var h=new XMLHttpRequest,y="onreadystatechange",m=!1;if("test"===r.env.NODE_ENV||"undefined"==typeof window||!window.XDomainRequest||"withCredentials"in h||a(t.url)||(h=new window.XDomainRequest,y="onload",m=!0,h.onprogress=function(){},h.ontimeout=function(){}),t.auth){var v=t.auth.username||"",g=t.auth.password||"";d.Authorization="Basic "+u(v+":"+g)}if(h.open(t.method.toUpperCase(),i(t.url,t.params,t.paramsSerializer),!0),h.timeout=t.timeout,h[y]=function(){if(h&&(4===h.readyState||m)&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))){var e="getAllResponseHeaders"in h?s(h.getAllResponseHeaders()):null,r={data:t.responseType&&"text"!==t.responseType?h.response:h.responseText,status:1223===h.status?204:h.status,statusText:1223===h.status?"No Content":h.statusText,headers:e,config:t,request:h};o(l,f,r),h=null}},h.onerror=function(){f(c("Network Error",t,null,h)),h=null},h.ontimeout=function(){f(c("timeout of "+t.timeout+"ms exceeded",t,"ECONNABORTED",h)),h=null},n.isStandardBrowserEnv()){var w=e("./../helpers/cookies"),b=(t.withCredentials||a(t.url))&&t.xsrfCookieName?w.read(t.xsrfCookieName):void 0;b&&(d[t.xsrfHeaderName]=b)}if("setRequestHeader"in h&&n.forEach(d,function(e,t){void 0===p&&"content-type"===t.toLowerCase()?delete d[t]:h.setRequestHeader(t,e)}),t.withCredentials&&(h.withCredentials=!0),t.responseType)try{h.responseType=t.responseType}catch(e){if("json"!==t.responseType)throw e}"function"==typeof t.onDownloadProgress&&h.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&h.upload&&h.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then(function(e){h&&(h.abort(),f(e),h=null)}),void 0===p&&(p=null),h.send(p)})}}).call(this,e("_process"))},{"../core/createError":14,"./../core/settle":17,"./../helpers/btoa":21,"./../helpers/buildURL":22,"./../helpers/cookies":24,"./../helpers/isURLSameOrigin":26,"./../helpers/parseHeaders":28,"./../utils":30,_process:32}],8:[function(e,t,r){"use strict";function n(e){var t=new s(e),r=i(s.prototype.request,t);return o.extend(r,s.prototype,t),o.extend(r,t),r}var o=e("./utils"),i=e("./helpers/bind"),s=e("./core/Axios"),a=e("./defaults"),c=n(a);c.Axios=s,c.create=function(e){return n(o.merge(a,e))},c.Cancel=e("./cancel/Cancel"),c.CancelToken=e("./cancel/CancelToken"),c.isCancel=e("./cancel/isCancel"),c.all=function(e){return Promise.all(e)},c.spread=e("./helpers/spread"),t.exports=c,t.exports.default=c},{"./cancel/Cancel":9,"./cancel/CancelToken":10,"./cancel/isCancel":11,"./core/Axios":12,"./defaults":19,"./helpers/bind":20,"./helpers/spread":29,"./utils":30}],9:[function(e,t,r){"use strict";function n(e){this.message=e}n.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},n.prototype.__CANCEL__=!0,t.exports=n},{}],10:[function(e,t,r){"use strict";function n(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var r=this;e(function(e){r.reason||(r.reason=new o(e),t(r.reason))})}var o=e("./Cancel");n.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},n.source=function(){var e;return{token:new n(function(t){e=t}),cancel:e}},t.exports=n},{"./Cancel":9}],11:[function(e,t,r){"use strict";t.exports=function(e){return!(!e||!e.__CANCEL__)}},{}],12:[function(e,t,r){"use strict";function n(e){this.defaults=e,this.interceptors={request:new s,response:new s}}var o=e("./../defaults"),i=e("./../utils"),s=e("./InterceptorManager"),a=e("./dispatchRequest");n.prototype.request=function(e){"string"==typeof e&&(e=i.merge({url:arguments[0]},arguments[1])),(e=i.merge(o,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[a,void 0],r=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)r=r.then(t.shift(),t.shift());return r},i.forEach(["delete","get","head","options"],function(e){n.prototype[e]=function(t,r){return this.request(i.merge(r||{},{method:e,url:t}))}}),i.forEach(["post","put","patch"],function(e){n.prototype[e]=function(t,r,n){return this.request(i.merge(n||{},{method:e,url:t,data:r}))}}),t.exports=n},{"./../defaults":19,"./../utils":30,"./InterceptorManager":13,"./dispatchRequest":15}],13:[function(e,t,r){"use strict";function n(){this.handlers=[]}var o=e("./../utils");n.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},n.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},n.prototype.forEach=function(e){o.forEach(this.handlers,function(t){null!==t&&e(t)})},t.exports=n},{"./../utils":30}],14:[function(e,t,r){"use strict";var n=e("./enhanceError");t.exports=function(e,t,r,o,i){var s=new Error(e);return n(s,t,r,o,i)}},{"./enhanceError":16}],15:[function(e,t,r){"use strict";function n(e){e.cancelToken&&e.cancelToken.throwIfRequested()}var o=e("./../utils"),i=e("./transformData"),s=e("../cancel/isCancel"),a=e("../defaults"),c=e("./../helpers/isAbsoluteURL"),u=e("./../helpers/combineURLs");t.exports=function(e){n(e),e.baseURL&&!c(e.url)&&(e.url=u(e.baseURL,e.url)),e.headers=e.headers||{},e.data=i(e.data,e.headers,e.transformRequest),e.headers=o.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),o.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]});return(e.adapter||a.adapter)(e).then(function(t){return n(e),t.data=i(t.data,t.headers,e.transformResponse),t},function(t){return s(t)||(n(e),t&&t.response&&(t.response.data=i(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},{"../cancel/isCancel":11,"../defaults":19,"./../helpers/combineURLs":23,"./../helpers/isAbsoluteURL":25,"./../utils":30,"./transformData":18}],16:[function(e,t,r){"use strict";t.exports=function(e,t,r,n,o){return e.config=t,r&&(e.code=r),e.request=n,e.response=o,e}},{}],17:[function(e,t,r){"use strict";var n=e("./createError");t.exports=function(e,t,r){var o=r.config.validateStatus;r.status&&o&&!o(r.status)?t(n("Request failed with status code "+r.status,r.config,null,r.request,r)):e(r)}},{"./createError":14}],18:[function(e,t,r){"use strict";var n=e("./../utils");t.exports=function(e,t,r){return n.forEach(r,function(r){e=r(e,t)}),e}},{"./../utils":30}],19:[function(e,t,r){(function(r){"use strict";function n(e,t){!o.isUndefined(e)&&o.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var o=e("./utils"),i=e("./helpers/normalizeHeaderName"),s={"Content-Type":"application/x-www-form-urlencoded"},a={adapter:function(){var t;return"undefined"!=typeof XMLHttpRequest?t=e("./adapters/xhr"):void 0!==r&&(t=e("./adapters/http")),t}(),transformRequest:[function(e,t){return i(t,"Content-Type"),o.isFormData(e)||o.isArrayBuffer(e)||o.isBuffer(e)||o.isStream(e)||o.isFile(e)||o.isBlob(e)?e:o.isArrayBufferView(e)?e.buffer:o.isURLSearchParams(e)?(n(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):o.isObject(e)?(n(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};a.headers={common:{Accept:"application/json, text/plain, */*"}},o.forEach(["delete","get","head"],function(e){a.headers[e]={}}),o.forEach(["post","put","patch"],function(e){a.headers[e]=o.merge(s)}),t.exports=a}).call(this,e("_process"))},{"./adapters/http":7,"./adapters/xhr":7,"./helpers/normalizeHeaderName":27,"./utils":30,_process:32}],20:[function(e,t,r){"use strict";t.exports=function(e,t){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return e.apply(t,r)}}},{}],21:[function(e,t,r){"use strict";function n(){this.message="String contains an invalid character"}var o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";(n.prototype=new Error).code=5,n.prototype.name="InvalidCharacterError",t.exports=function(e){for(var t,r,i=String(e),s="",a=0,c=o;i.charAt(0|a)||(c="=",a%1);s+=c.charAt(63&t>>8-a%1*8)){if((r=i.charCodeAt(a+=.75))>255)throw new n;t=t<<8|r}return s}},{}],22:[function(e,t,r){"use strict";function n(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var o=e("./../utils");t.exports=function(e,t,r){if(!t)return e;var i;if(r)i=r(t);else if(o.isURLSearchParams(t))i=t.toString();else{var s=[];o.forEach(t,function(e,t){null!==e&&void 0!==e&&(o.isArray(e)?t+="[]":e=[e],o.forEach(e,function(e){o.isDate(e)?e=e.toISOString():o.isObject(e)&&(e=JSON.stringify(e)),s.push(n(t)+"="+n(e))}))}),i=s.join("&")}return i&&(e+=(-1===e.indexOf("?")?"?":"&")+i),e}},{"./../utils":30}],23:[function(e,t,r){"use strict";t.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},{}],24:[function(e,t,r){"use strict";var n=e("./../utils");t.exports=n.isStandardBrowserEnv()?{write:function(e,t,r,o,i,s){var a=[];a.push(e+"="+encodeURIComponent(t)),n.isNumber(r)&&a.push("expires="+new Date(r).toGMTString()),n.isString(o)&&a.push("path="+o),n.isString(i)&&a.push("domain="+i),!0===s&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},{"./../utils":30}],25:[function(e,t,r){"use strict";t.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},{}],26:[function(e,t,r){"use strict";var n=e("./../utils");t.exports=n.isStandardBrowserEnv()?function(){function e(e){var t=e;return r&&(o.setAttribute("href",t),t=o.href),o.setAttribute("href",t),{href:o.href,protocol:o.protocol?o.protocol.replace(/:$/,""):"",host:o.host,search:o.search?o.search.replace(/^\?/,""):"",hash:o.hash?o.hash.replace(/^#/,""):"",hostname:o.hostname,port:o.port,pathname:"/"===o.pathname.charAt(0)?o.pathname:"/"+o.pathname}}var t,r=/(msie|trident)/i.test(navigator.userAgent),o=document.createElement("a");return t=e(window.location.href),function(r){var o=n.isString(r)?e(r):r;return o.protocol===t.protocol&&o.host===t.host}}():function(){return!0}},{"./../utils":30}],27:[function(e,t,r){"use strict";var n=e("../utils");t.exports=function(e,t){n.forEach(e,function(r,n){n!==t&&n.toUpperCase()===t.toUpperCase()&&(e[t]=r,delete e[n])})}},{"../utils":30}],28:[function(e,t,r){"use strict";var n=e("./../utils"),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(e){var t,r,i,s={};return e?(n.forEach(e.split("\n"),function(e){if(i=e.indexOf(":"),t=n.trim(e.substr(0,i)).toLowerCase(),r=n.trim(e.substr(i+1)),t){if(s[t]&&o.indexOf(t)>=0)return;s[t]="set-cookie"===t?(s[t]?s[t]:[]).concat([r]):s[t]?s[t]+", "+r:r}}),s):s}},{"./../utils":30}],29:[function(e,t,r){"use strict";t.exports=function(e){return function(t){return e.apply(null,t)}}},{}],30:[function(e,t,r){"use strict";function n(e){return"[object Array]"===l.call(e)}function o(e){return null!==e&&"object"==typeof e}function i(e){return"[object Function]"===l.call(e)}function s(e,t){if(null!==e&&void 0!==e)if("object"!=typeof e&&(e=[e]),n(e))for(var r=0,o=e.length;r<o;r++)t.call(null,e[r],r,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(null,e[i],i,e)}function a(){function e(e,r){"object"==typeof t[r]&&"object"==typeof e?t[r]=a(t[r],e):t[r]=e}for(var t={},r=0,n=arguments.length;r<n;r++)s(arguments[r],e);return t}var c=e("./helpers/bind"),u=e("is-buffer"),l=Object.prototype.toString;t.exports={isArray:n,isArrayBuffer:function(e){return"[object ArrayBuffer]"===l.call(e)},isBuffer:u,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:o,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===l.call(e)},isFile:function(e){return"[object File]"===l.call(e)},isBlob:function(e){return"[object Blob]"===l.call(e)},isFunction:i,isStream:function(e){return o(e)&&i(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:s,merge:a,extend:function(e,t,r){return s(t,function(t,n){e[n]=r&&"function"==typeof t?c(t,r):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},{"./helpers/bind":20,"is-buffer":31}],31:[function(e,t,r){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}t.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},{}],32:[function(e,t,r){function n(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function i(e){if(l===setTimeout)return setTimeout(e,0);if((l===n||!l)&&setTimeout)return l=setTimeout,setTimeout(e,0);try{return l(e,0)}catch(t){try{return l.call(null,e,0)}catch(t){return l.call(this,e,0)}}}function s(){y&&d&&(y=!1,d.length?h=d.concat(h):m=-1,h.length&&a())}function a(){if(!y){var e=i(s);y=!0;for(var t=h.length;t;){for(d=h,h=[];++m<t;)d&&d[m].run();m=-1,t=h.length}d=null,y=!1,function(e){if(f===clearTimeout)return clearTimeout(e);if((f===o||!f)&&clearTimeout)return f=clearTimeout,clearTimeout(e);try{f(e)}catch(t){try{return f.call(null,e)}catch(t){return f.call(this,e)}}}(e)}}function c(e,t){this.fun=e,this.array=t}function u(){}var l,f,p=t.exports={};!function(){try{l="function"==typeof setTimeout?setTimeout:n}catch(e){l=n}try{f="function"==typeof clearTimeout?clearTimeout:o}catch(e){f=o}}();var d,h=[],y=!1,m=-1;p.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];h.push(new c(e,t)),1!==h.length||y||i(a)},c.prototype.run=function(){this.fun.apply(null,this.array)},p.title="browser",p.browser=!0,p.env={},p.argv=[],p.version="",p.versions={},p.on=u,p.addListener=u,p.once=u,p.off=u,p.removeListener=u,p.removeAllListeners=u,p.emit=u,p.prependListener=u,p.prependOnceListener=u,p.listeners=function(e){return[]},p.binding=function(e){throw new Error("process.binding is not supported")},p.cwd=function(){return"/"},p.chdir=function(e){throw new Error("process.chdir is not supported")},p.umask=function(){return 0}},{}],33:[function(e,t,r){"use strict";var n=String.prototype.replace,o=/%20/g;t.exports={default:"RFC3986",formatters:{RFC1738:function(e){return n.call(e,o,"+")},RFC3986:function(e){return e}},RFC1738:"RFC1738",RFC3986:"RFC3986"}},{}],34:[function(e,t,r){"use strict";var n=e("./stringify"),o=e("./parse"),i=e("./formats");t.exports={formats:i,parse:o,stringify:n}},{"./formats":33,"./parse":35,"./stringify":36}],35:[function(e,t,r){"use strict";var n=e("./utils"),o=Object.prototype.hasOwnProperty,i={allowDots:!1,allowPrototypes:!1,arrayLimit:20,decoder:n.decode,delimiter:"&",depth:5,parameterLimit:1e3,plainObjects:!1,strictNullHandling:!1},s=function(e,t,r){if(e){var n=r.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,i=/(\[[^[\]]*])/g,s=/(\[[^[\]]*])/.exec(n),a=s?n.slice(0,s.index):n,c=[];if(a){if(!r.plainObjects&&o.call(Object.prototype,a)&&!r.allowPrototypes)return;c.push(a)}for(var u=0;null!==(s=i.exec(n))&&u<r.depth;){if(u+=1,!r.plainObjects&&o.call(Object.prototype,s[1].slice(1,-1))&&!r.allowPrototypes)return;c.push(s[1])}return s&&c.push("["+n.slice(s.index)+"]"),function(e,t,r){for(var n=t,o=e.length-1;o>=0;--o){var i,s=e[o];if("[]"===s)i=(i=[]).concat(n);else{i=r.plainObjects?Object.create(null):{};var a="["===s.charAt(0)&&"]"===s.charAt(s.length-1)?s.slice(1,-1):s,c=parseInt(a,10);!isNaN(c)&&s!==a&&String(c)===a&&c>=0&&r.parseArrays&&c<=r.arrayLimit?(i=[])[c]=n:i[a]=n}n=i}return n}(c,t,r)}};t.exports=function(e,t){var r=t?n.assign({},t):{};if(null!==r.decoder&&void 0!==r.decoder&&"function"!=typeof r.decoder)throw new TypeError("Decoder has to be a function.");if(r.ignoreQueryPrefix=!0===r.ignoreQueryPrefix,r.delimiter="string"==typeof r.delimiter||n.isRegExp(r.delimiter)?r.delimiter:i.delimiter,r.depth="number"==typeof r.depth?r.depth:i.depth,r.arrayLimit="number"==typeof r.arrayLimit?r.arrayLimit:i.arrayLimit,r.parseArrays=!1!==r.parseArrays,r.decoder="function"==typeof r.decoder?r.decoder:i.decoder,r.allowDots="boolean"==typeof r.allowDots?r.allowDots:i.allowDots,r.plainObjects="boolean"==typeof r.plainObjects?r.plainObjects:i.plainObjects,r.allowPrototypes="boolean"==typeof r.allowPrototypes?r.allowPrototypes:i.allowPrototypes,r.parameterLimit="number"==typeof r.parameterLimit?r.parameterLimit:i.parameterLimit,r.strictNullHandling="boolean"==typeof r.strictNullHandling?r.strictNullHandling:i.strictNullHandling,""===e||null===e||void 0===e)return r.plainObjects?Object.create(null):{};for(var a="string"==typeof e?function(e,t){for(var r={},n=t.ignoreQueryPrefix?e.replace(/^\?/,""):e,s=t.parameterLimit===1/0?void 0:t.parameterLimit,a=n.split(t.delimiter,s),c=0;c<a.length;++c){var u,l,f=a[c],p=f.indexOf("]="),d=-1===p?f.indexOf("="):p+1;-1===d?(u=t.decoder(f,i.decoder),l=t.strictNullHandling?null:""):(u=t.decoder(f.slice(0,d),i.decoder),l=t.decoder(f.slice(d+1),i.decoder)),o.call(r,u)?r[u]=[].concat(r[u]).concat(l):r[u]=l}return r}(e,r):e,c=r.plainObjects?Object.create(null):{},u=Object.keys(a),l=0;l<u.length;++l){var f=u[l],p=s(f,a[f],r);c=n.merge(c,p,r)}return n.compact(c)}},{"./utils":37}],36:[function(e,t,r){"use strict";var n=e("./utils"),o=e("./formats"),i={brackets:function(e){return e+"[]"},indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},s=Date.prototype.toISOString,a={delimiter:"&",encode:!0,encoder:n.encode,encodeValuesOnly:!1,serializeDate:function(e){return s.call(e)},skipNulls:!1,strictNullHandling:!1},c=function e(t,r,o,i,s,c,u,l,f,p,d,h){var y=t;if("function"==typeof u)y=u(r,y);else if(y instanceof Date)y=p(y);else if(null===y){if(i)return c&&!h?c(r,a.encoder):r;y=""}if("string"==typeof y||"number"==typeof y||"boolean"==typeof y||n.isBuffer(y)){if(c){return[d(h?r:c(r,a.encoder))+"="+d(c(y,a.encoder))]}return[d(r)+"="+d(String(y))]}var m=[];if(void 0===y)return m;var v;if(Array.isArray(u))v=u;else{var g=Object.keys(y);v=l?g.sort(l):g}for(var w=0;w<v.length;++w){var b=v[w];s&&null===y[b]||(m=Array.isArray(y)?m.concat(e(y[b],o(r,b),o,i,s,c,u,l,f,p,d,h)):m.concat(e(y[b],r+(f?"."+b:"["+b+"]"),o,i,s,c,u,l,f,p,d,h)))}return m};t.exports=function(e,t){var r=e,s=t?n.assign({},t):{};if(null!==s.encoder&&void 0!==s.encoder&&"function"!=typeof s.encoder)throw new TypeError("Encoder has to be a function.");var u=void 0===s.delimiter?a.delimiter:s.delimiter,l="boolean"==typeof s.strictNullHandling?s.strictNullHandling:a.strictNullHandling,f="boolean"==typeof s.skipNulls?s.skipNulls:a.skipNulls,p="boolean"==typeof s.encode?s.encode:a.encode,d="function"==typeof s.encoder?s.encoder:a.encoder,h="function"==typeof s.sort?s.sort:null,y=void 0!==s.allowDots&&s.allowDots,m="function"==typeof s.serializeDate?s.serializeDate:a.serializeDate,v="boolean"==typeof s.encodeValuesOnly?s.encodeValuesOnly:a.encodeValuesOnly;if(void 0===s.format)s.format=o.default;else if(!Object.prototype.hasOwnProperty.call(o.formatters,s.format))throw new TypeError("Unknown format option provided.");var g,w,b=o.formatters[s.format];"function"==typeof s.filter?r=(w=s.filter)("",r):Array.isArray(s.filter)&&(g=w=s.filter);var x=[];if("object"!=typeof r||null===r)return"";var E;E=s.arrayFormat in i?s.arrayFormat:"indices"in s?s.indices?"indices":"repeat":"indices";var L=i[E];g||(g=Object.keys(r)),h&&g.sort(h);for(var j=0;j<g.length;++j){var A=g[j];f&&null===r[A]||(x=x.concat(c(r[A],A,L,l,f,p?d:null,w,h,y,m,b,v)))}var C=x.join(u),O=!0===s.addQueryPrefix?"?":"";return C.length>0?O+C:""}},{"./formats":33,"./utils":37}],37:[function(e,t,r){"use strict";var n=Object.prototype.hasOwnProperty,o=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}();r.arrayToObject=function(e,t){for(var r=t&&t.plainObjects?Object.create(null):{},n=0;n<e.length;++n)void 0!==e[n]&&(r[n]=e[n]);return r},r.merge=function(e,t,o){if(!t)return e;if("object"!=typeof t){if(Array.isArray(e))e.push(t);else{if("object"!=typeof e)return[e,t];(o.plainObjects||o.allowPrototypes||!n.call(Object.prototype,t))&&(e[t]=!0)}return e}if("object"!=typeof e)return[e].concat(t);var i=e;return Array.isArray(e)&&!Array.isArray(t)&&(i=r.arrayToObject(e,o)),Array.isArray(e)&&Array.isArray(t)?(t.forEach(function(t,i){n.call(e,i)?e[i]&&"object"==typeof e[i]?e[i]=r.merge(e[i],t,o):e.push(t):e[i]=t}),e):Object.keys(t).reduce(function(e,i){var s=t[i];return n.call(e,i)?e[i]=r.merge(e[i],s,o):e[i]=s,e},i)},r.assign=function(e,t){return Object.keys(t).reduce(function(e,r){return e[r]=t[r],e},e)},r.decode=function(e){try{return decodeURIComponent(e.replace(/\+/g," "))}catch(t){return e}},r.encode=function(e){if(0===e.length)return e;for(var t="string"==typeof e?e:String(e),r="",n=0;n<t.length;++n){var i=t.charCodeAt(n);45===i||46===i||95===i||126===i||i>=48&&i<=57||i>=65&&i<=90||i>=97&&i<=122?r+=t.charAt(n):i<128?r+=o[i]:i<2048?r+=o[192|i>>6]+o[128|63&i]:i<55296||i>=57344?r+=o[224|i>>12]+o[128|i>>6&63]+o[128|63&i]:(n+=1,i=65536+((1023&i)<<10|1023&t.charCodeAt(n)),r+=o[240|i>>18]+o[128|i>>12&63]+o[128|i>>6&63]+o[128|63&i])}return r},r.compact=function(e){for(var t=[{obj:{o:e},prop:"o"}],r=[],n=0;n<t.length;++n)for(var o=t[n],i=o.obj[o.prop],s=Object.keys(i),a=0;a<s.length;++a){var c=s[a],u=i[c];"object"==typeof u&&null!==u&&-1===r.indexOf(u)&&(t.push({obj:i,prop:c}),r.push(u))}return function(e){for(var t;e.length;){var r=e.pop();if(t=r.obj[r.prop],Array.isArray(t)){for(var n=[],o=0;o<t.length;++o)void 0!==t[o]&&n.push(t[o]);r.obj[r.prop]=n}}return t}(t)},r.isRegExp=function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},r.isBuffer=function(e){return null!==e&&void 0!==e&&!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))}},{}]},{},[5]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiZSIsInQiLCJuIiwiciIsInMiLCJvIiwidSIsImEiLCJyZXF1aXJlIiwiaSIsImYiLCJFcnJvciIsImNvZGUiLCJsIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLCIxIiwibW9kdWxlIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwcm90b3R5cGUiLCJIZWFkZXIiLCJjb250YWluZXIiLCJfdGhpcyIsInRoaXMiLCJpbnN0YW5jZSIsIlR5cGVFcnJvciIsIl9jbGFzc0NhbGxDaGVjayIsImhlYWRlciIsInRyaWdnZXIiLCJxdWVyeVNlbGVjdG9yIiwid3JhcHBlciIsImRyb3BEb3duIiwiYWRkRXZlbnRMaXN0ZW5lciIsInRvZ2dsZVZpc2liaWxpdHkiLCJwcmV2ZW50RGVmYXVsdCIsInZhbHVlIiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwiMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9heGlvczIiLCJfcXMyIiwiTG9hZE1vcmUiLCJmb290ZXIiLCJkb2N1bWVudCIsIndhaXQiLCJwYWdlIiwiZGF0ZSIsInZhcnMiLCJwb3N0RGF0ZSIsImlkIiwicG9zdElEIiwicG9zdHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwic2VsZWN0Iiwid2luZG93Iiwic2Nyb2xsVG8iLCJsb2NhdGlvbiIsInJlbG9hZCIsImJvZHkiLCJzY3JvbGxIZWlnaHQiLCJkb2N1bWVudEVsZW1lbnQiLCJzY3JvbGxUb3AiLCJpbm5lckhlaWdodCIsIm9mZnNldEhlaWdodCIsImFkZFBvc3QiLCJnZXRBY3RpdmUiLCJfdGhpczIiLCJkYXRhIiwiYWN0aW9uIiwicG9zdF9kYXRlIiwicG9zdF9pZCIsInBvc3QiLCJhamF4dXJsIiwic3RyaW5naWZ5IiwidGhlbiIsInJlcyIsImZvckVhY2giLCJpbnNlcnRBZGphY2VudEhUTUwiLCJjb250ZW50IiwiY2F0Y2giLCJlcnIiLCJjb25zb2xlIiwibG9nIiwidG9wIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidGl0bGUiLCJkYXRhc2V0IiwicGF0aCIsInVuZGVmaW5lZCIsInVwZGF0ZVBhZ2UiLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwic2Nyb2xsUmVzdG9yYXRpb24iLCJheGlvcyIsInFzIiwiMyIsIlJ1YnJpY3MiLCJkZXNrdG9wIiwiYXJndW1lbnRzIiwiYnV0dG9ucyIsIndyYXBwZXJzIiwibGFzdF9pbmRleCIsImJ1dHRvbiIsImluZGV4IiwiQXJyYXkiLCJpbmRleE9mIiwiaW5uZXJXaWR0aCIsImFkZCIsInN0eWxlIiwiaGVpZ2h0IiwiY2hpbGRFbGVtZW50Q291bnQiLCJzY3JvbGxJbnRvVmlldyIsImJlaGF2aW9yIiwiYmxvY2siLCJpbmxpbmUiLCJyZW1vdmVQcm9wZXJ0eSIsInJlbW92ZSIsIjQiLCJUYXhvbm9teVRhYnMiLCJ0YWJzIiwicmV0dXJuIiwidGFic1dyYXBwZXIiLCJjdXJyZW50VGFyZ2V0IiwiNSIsIl9IZWFkZXIyIiwiX1J1YnJpY3MyIiwiX1RheG9ub215VGFiczIiLCJfTG9hZE1vcmUyIiwiLi9DbGFzc2VzL0hlYWRlciIsIi4vQ2xhc3Nlcy9Mb2FkTW9yZSIsIi4vQ2xhc3Nlcy9SdWJyaWNzIiwiLi9DbGFzc2VzL1RheG9ub215VGFicyIsIjYiLCIuL2xpYi9heGlvcyIsIjciLCJwcm9jZXNzIiwidXRpbHMiLCJzZXR0bGUiLCJidWlsZFVSTCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsImNyZWF0ZUVycm9yIiwiYnRvYSIsImJpbmQiLCJjb25maWciLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJoZWFkZXJzIiwiaXNGb3JtRGF0YSIsInJlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsImxvYWRFdmVudCIsInhEb21haW4iLCJlbnYiLCJOT0RFX0VOViIsIlhEb21haW5SZXF1ZXN0IiwidXJsIiwib25wcm9ncmVzcyIsIm9udGltZW91dCIsImF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiQXV0aG9yaXphdGlvbiIsIm9wZW4iLCJtZXRob2QiLCJ0b1VwcGVyQ2FzZSIsInBhcmFtcyIsInBhcmFtc1NlcmlhbGl6ZXIiLCJ0aW1lb3V0IiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsInJlc3BvbnNlVVJMIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0Iiwib25lcnJvciIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwiY29va2llcyIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsInhzcmZDb29raWVOYW1lIiwicmVhZCIsInhzcmZIZWFkZXJOYW1lIiwidmFsIiwidG9Mb3dlckNhc2UiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25Eb3dubG9hZFByb2dyZXNzIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbFRva2VuIiwicHJvbWlzZSIsImNhbmNlbCIsImFib3J0Iiwic2VuZCIsIi4uL2NvcmUvY3JlYXRlRXJyb3IiLCIuLy4uL2NvcmUvc2V0dGxlIiwiLi8uLi9oZWxwZXJzL2J0b2EiLCIuLy4uL2hlbHBlcnMvYnVpbGRVUkwiLCIuLy4uL2hlbHBlcnMvY29va2llcyIsIi4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4iLCIuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzIiwiLi8uLi91dGlscyIsIl9wcm9jZXNzIiwiOCIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImNvbnRleHQiLCJBeGlvcyIsImV4dGVuZCIsImRlZmF1bHRzIiwiY3JlYXRlIiwiaW5zdGFuY2VDb25maWciLCJtZXJnZSIsIkNhbmNlbCIsIkNhbmNlbFRva2VuIiwiaXNDYW5jZWwiLCJhbGwiLCJwcm9taXNlcyIsInNwcmVhZCIsIi4vY2FuY2VsL0NhbmNlbCIsIi4vY2FuY2VsL0NhbmNlbFRva2VuIiwiLi9jYW5jZWwvaXNDYW5jZWwiLCIuL2NvcmUvQXhpb3MiLCIuL2RlZmF1bHRzIiwiLi9oZWxwZXJzL2JpbmQiLCIuL2hlbHBlcnMvc3ByZWFkIiwiLi91dGlscyIsIjkiLCJtZXNzYWdlIiwidG9TdHJpbmciLCJfX0NBTkNFTF9fIiwiMTAiLCJleGVjdXRvciIsInJlc29sdmVQcm9taXNlIiwidG9rZW4iLCJyZWFzb24iLCJ0aHJvd0lmUmVxdWVzdGVkIiwic291cmNlIiwiYyIsIi4vQ2FuY2VsIiwiMTEiLCIxMiIsImludGVyY2VwdG9ycyIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsImNoYWluIiwiaW50ZXJjZXB0b3IiLCJ1bnNoaWZ0IiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJwdXNoIiwic2hpZnQiLCIuLy4uL2RlZmF1bHRzIiwiLi9JbnRlcmNlcHRvck1hbmFnZXIiLCIuL2Rpc3BhdGNoUmVxdWVzdCIsIjEzIiwiaGFuZGxlcnMiLCJ1c2UiLCJlamVjdCIsImZuIiwiaCIsIjE0IiwiZW5oYW5jZUVycm9yIiwiZXJyb3IiLCIuL2VuaGFuY2VFcnJvciIsIjE1IiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsInRyYW5zZm9ybURhdGEiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJiYXNlVVJMIiwidHJhbnNmb3JtUmVxdWVzdCIsImNvbW1vbiIsImFkYXB0ZXIiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsIi4uL2NhbmNlbC9pc0NhbmNlbCIsIi4uL2RlZmF1bHRzIiwiLi8uLi9oZWxwZXJzL2NvbWJpbmVVUkxzIiwiLi8uLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwiLCIuL3RyYW5zZm9ybURhdGEiLCIxNiIsIjE3IiwidmFsaWRhdGVTdGF0dXMiLCIuL2NyZWF0ZUVycm9yIiwiMTgiLCJmbnMiLCIxOSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsImlzVW5kZWZpbmVkIiwibm9ybWFsaXplSGVhZGVyTmFtZSIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwiQ29udGVudC1UeXBlIiwiZ2V0RGVmYXVsdEFkYXB0ZXIiLCJpc0FycmF5QnVmZmVyIiwiaXNCdWZmZXIiLCJpc1N0cmVhbSIsImlzRmlsZSIsImlzQmxvYiIsImlzQXJyYXlCdWZmZXJWaWV3IiwiYnVmZmVyIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJpc09iamVjdCIsIkpTT04iLCJwYXJzZSIsIm1heENvbnRlbnRMZW5ndGgiLCJBY2NlcHQiLCIuL2FkYXB0ZXJzL2h0dHAiLCIuL2FkYXB0ZXJzL3hociIsIi4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lIiwiMjAiLCJ0aGlzQXJnIiwiYXJncyIsImFwcGx5IiwiMjEiLCJFIiwiY2hhcnMiLCJuYW1lIiwiaW5wdXQiLCJjaGFyQ29kZSIsInN0ciIsIlN0cmluZyIsIm91dHB1dCIsImlkeCIsIm1hcCIsImNoYXJBdCIsImNoYXJDb2RlQXQiLCIyMiIsImVuY29kZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInJlcGxhY2UiLCJzZXJpYWxpemVkUGFyYW1zIiwicGFydHMiLCJpc0FycmF5IiwidiIsImlzRGF0ZSIsInRvSVNPU3RyaW5nIiwiam9pbiIsIjIzIiwicmVsYXRpdmVVUkwiLCIyNCIsIndyaXRlIiwiZXhwaXJlcyIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsImlzTnVtYmVyIiwiRGF0ZSIsInRvR01UU3RyaW5nIiwiaXNTdHJpbmciLCJtYXRjaCIsIlJlZ0V4cCIsImRlY29kZVVSSUNvbXBvbmVudCIsIm5vdyIsIjI1IiwidGVzdCIsIjI2IiwicmVzb2x2ZVVSTCIsImhyZWYiLCJtc2llIiwidXJsUGFyc2luZ05vZGUiLCJzZXRBdHRyaWJ1dGUiLCJwcm90b2NvbCIsImhvc3QiLCJzZWFyY2giLCJoYXNoIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aG5hbWUiLCJvcmlnaW5VUkwiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJjcmVhdGVFbGVtZW50IiwicmVxdWVzdFVSTCIsInBhcnNlZCIsIjI3Iiwibm9ybWFsaXplZE5hbWUiLCIuLi91dGlscyIsIjI4IiwiaWdub3JlRHVwbGljYXRlT2YiLCJzcGxpdCIsImxpbmUiLCJ0cmltIiwic3Vic3RyIiwiY29uY2F0IiwiMjkiLCJjYWxsYmFjayIsImFyciIsIjMwIiwiaXNGdW5jdGlvbiIsImhhc093blByb3BlcnR5IiwiYXNzaWduVmFsdWUiLCJyZXN1bHQiLCJGb3JtRGF0YSIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwicGlwZSIsIlVSTFNlYXJjaFBhcmFtcyIsInByb2R1Y3QiLCJiIiwiaXMtYnVmZmVyIiwiMzEiLCJjb25zdHJ1Y3RvciIsInJlYWRGbG9hdExFIiwic2xpY2UiLCJpc1Nsb3dCdWZmZXIiLCJfaXNCdWZmZXIiLCIzMiIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImNhY2hlZFNldFRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5pbmciLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsInF1ZXVlSW5kZXgiLCJkcmFpblF1ZXVlIiwibGVuIiwicnVuIiwibWFya2VyIiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImFycmF5Iiwibm9vcCIsIm5leHRUaWNrIiwiYnJvd3NlciIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsIjMzIiwicGVyY2VudFR3ZW50aWVzIiwiZm9ybWF0dGVycyIsIlJGQzE3MzgiLCJSRkMzOTg2IiwiMzQiLCJmb3JtYXRzIiwiLi9mb3JtYXRzIiwiLi9wYXJzZSIsIi4vc3RyaW5naWZ5IiwiMzUiLCJoYXMiLCJhbGxvd0RvdHMiLCJhbGxvd1Byb3RvdHlwZXMiLCJhcnJheUxpbWl0IiwiZGVjb2RlciIsImRlY29kZSIsImRlbGltaXRlciIsImRlcHRoIiwicGFyYW1ldGVyTGltaXQiLCJwbGFpbk9iamVjdHMiLCJzdHJpY3ROdWxsSGFuZGxpbmciLCJwYXJzZUtleXMiLCJnaXZlbktleSIsIm9wdGlvbnMiLCJjaGlsZCIsInNlZ21lbnQiLCJleGVjIiwicGFyZW50Iiwia2V5cyIsImxlYWYiLCJyb290IiwiY2xlYW5Sb290IiwicGFyc2VJbnQiLCJpc05hTiIsInBhcnNlQXJyYXlzIiwicGFyc2VPYmplY3QiLCJvcHRzIiwiYXNzaWduIiwiaWdub3JlUXVlcnlQcmVmaXgiLCJpc1JlZ0V4cCIsInRlbXBPYmoiLCJjbGVhblN0ciIsImxpbWl0IiwiSW5maW5pdHkiLCJwYXJ0IiwiYnJhY2tldEVxdWFsc1BvcyIsInBvcyIsInBhcnNlVmFsdWVzIiwibmV3T2JqIiwiY29tcGFjdCIsIjM2IiwiYXJyYXlQcmVmaXhHZW5lcmF0b3JzIiwiYnJhY2tldHMiLCJwcmVmaXgiLCJpbmRpY2VzIiwicmVwZWF0IiwidG9JU08iLCJlbmNvZGVyIiwiZW5jb2RlVmFsdWVzT25seSIsInNlcmlhbGl6ZURhdGUiLCJza2lwTnVsbHMiLCJvYmplY3QiLCJnZW5lcmF0ZUFycmF5UHJlZml4IiwiZmlsdGVyIiwic29ydCIsImZvcm1hdHRlciIsInZhbHVlcyIsIm9iaktleXMiLCJmb3JtYXQiLCJhcnJheUZvcm1hdCIsImpvaW5lZCIsImFkZFF1ZXJ5UHJlZml4IiwiMzciLCJoZXhUYWJsZSIsImFycmF5VG9PYmplY3QiLCJtZXJnZVRhcmdldCIsIml0ZW0iLCJyZWR1Y2UiLCJhY2MiLCJzdHJpbmciLCJvdXQiLCJwcm9wIiwicmVmcyIsImoiLCJwb3AiLCJjb21wYWN0ZWQiLCJjb21wYWN0UXVldWUiXSwibWFwcGluZ3MiOiJDQUFBLFNBQVVBLEVBQUVDLEVBQUVDLEVBQUVDLEdBQUcsU0FBU0MsRUFBRUMsRUFBRUMsR0FBRyxJQUFJSixFQUFFRyxHQUFHLENBQUMsSUFBSUosRUFBRUksR0FBRyxDQUFDLElBQUlFLEVBQWtCLG1CQUFUQyxTQUFxQkEsUUFBUSxJQUFJRixHQUFHQyxFQUFFLE9BQU9BLEVBQUVGLEdBQUUsR0FBSSxHQUFHSSxFQUFFLE9BQU9BLEVBQUVKLEdBQUUsR0FBSSxJQUFJSyxFQUFFLElBQUlDLE1BQU0sdUJBQXVCTixFQUFFLEtBQUssTUFBTUssRUFBRUUsS0FBSyxtQkFBbUJGLEVBQUUsSUFBSUcsRUFBRVgsRUFBRUcsSUFBSVMsWUFBWWIsRUFBRUksR0FBRyxHQUFHVSxLQUFLRixFQUFFQyxRQUFRLFNBQVNkLEdBQUcsSUFBSUUsRUFBRUQsRUFBRUksR0FBRyxHQUFHTCxHQUFHLE9BQU9JLEVBQUVGLEdBQUlGLElBQUlhLEVBQUVBLEVBQUVDLFFBQVFkLEVBQUVDLEVBQUVDLEVBQUVDLEdBQUcsT0FBT0QsRUFBRUcsR0FBR1MsUUFBa0QsSUFBSSxJQUExQ0wsRUFBa0IsbUJBQVRELFNBQXFCQSxRQUFnQkgsRUFBRSxFQUFFQSxFQUFFRixFQUFFYSxPQUFPWCxJQUFJRCxFQUFFRCxFQUFFRSxJQUFJLE9BQU9ELEVBQXZiLEVBQTRiYSxHQUFHLFNBQVNULEVBQVFVLEVBQU9KLEdBQ3ZkLGFBRUEsSUFBSUssRUFBZSxXQUFjLFNBQVNDLEVBQWlCQyxFQUFRQyxHQUFTLElBQUssSUFBSWIsRUFBSSxFQUFHQSxFQUFJYSxFQUFNTixPQUFRUCxJQUFLLENBQUUsSUFBSWMsRUFBYUQsRUFBTWIsR0FBSWMsRUFBV0MsV0FBYUQsRUFBV0MsYUFBYyxFQUFPRCxFQUFXRSxjQUFlLEVBQVUsVUFBV0YsSUFBWUEsRUFB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QjRWLEVBQUtoYixRQUFRb0YsS0FDeER5TyxFQUFNdEssTUFBTzVOLElBQUtBLEVBQUtvZixLQUFNN2dCLElBQzdCOGdCLEVBQUt6UixLQUFLbkUsSUFLdEIsT0EvS2UsU0FBc0J5TyxHQUdyQyxJQUZBLElBQUlsWSxFQUVHa1ksRUFBTXhhLFFBQVEsQ0FDakIsSUFBSXFoQixFQUFPN0csRUFBTXFILE1BR2pCLEdBRkF2ZixFQUFNK2UsRUFBSy9lLElBQUkrZSxFQUFLSyxNQUVoQmhiLE1BQU0wTyxRQUFROVMsR0FBTSxDQUdwQixJQUFLLElBRkR3ZixLQUVLRixFQUFJLEVBQUdBLEVBQUl0ZixFQUFJdEMsU0FBVTRoQixPQUNSLElBQVh0ZixFQUFJc2YsSUFDWEUsRUFBVTVSLEtBQUs1TixFQUFJc2YsSUFJM0JQLEVBQUsvZSxJQUFJK2UsRUFBS0ssTUFBUUksR0FJOUIsT0FBT3hmLEVBMkpBeWYsQ0FBYXZILElBR3hCMWEsRUFBUWtmLFNBQVcsU0FBa0IxYyxHQUNqQyxNQUErQyxvQkFBeEMzQixPQUFPTSxVQUFVNE4sU0FBUzlPLEtBQUt1QyxJQUcxQ3hDLEVBQVFnVCxTQUFXLFNBQWtCeFEsR0FDakMsT0FBWSxPQUFSQSxRQUErQixJQUFSQSxNQUlqQkEsRUFBSW1YLGFBQWVuWCxFQUFJbVgsWUFBWTNHLFVBQVl4USxFQUFJbVgsWUFBWTNHLFNBQVN4USxlQUczRSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkoezE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgSGVhZGVyID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBIZWFkZXIoY29udGFpbmVyKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIZWFkZXIpO1xuXG4gICAgdGhpcy5oZWFkZXIgPSBjb250YWluZXI7XG4gICAgdGhpcy50cmlnZ2VyID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5zaXRlLWhlYWRlcl9fbmF2LXRyaWdnZXInKTtcbiAgICB0aGlzLndyYXBwZXIgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignLnNpdGUtaGVhZGVyX193cmFwcGVyJyk7XG4gICAgdGhpcy5kcm9wRG93biA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuZHJvcF9fdHJpZ2dlcicpO1xuXG4gICAgdGhpcy50cmlnZ2VyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLnRvZ2dsZVZpc2liaWxpdHkoKTtcbiAgICB9KTtcblxuICAgIHRoaXMuZHJvcERvd24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEhlYWRlciwgW3tcbiAgICBrZXk6ICd0b2dnbGVWaXNpYmlsaXR5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9nZ2xlVmlzaWJpbGl0eSgpIHtcbiAgICAgIHRoaXMud3JhcHBlci5jbGFzc0xpc3QudG9nZ2xlKCdzaXRlLWhlYWRlcl9fd3JhcHBlci0taGlkZScpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBIZWFkZXI7XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gSGVhZGVyO1xuXG59LHt9XSwyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9heGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5cbnZhciBfYXhpb3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXhpb3MpO1xuXG52YXIgX3FzID0gcmVxdWlyZSgncXMnKTtcblxudmFyIF9xczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9xcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBMb2FkTW9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTG9hZE1vcmUoY29udGFpbmVyKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2FkTW9yZSk7XG5cbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICB0aGlzLmZvb3RlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Zvb3Rlci5zaXRlLWZvb3RlcicpO1xuICAgIHRoaXMud2FpdCA9IGZhbHNlO1xuICAgIHRoaXMucGFnZSA9IDE7XG4gICAgdGhpcy5kYXRlID0gdmFycy5wb3N0RGF0ZTtcbiAgICB0aGlzLmlkID0gdmFycy5wb3N0SUQ7XG4gICAgdGhpcy5wb3N0cyA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5wdWJsaWNhdGlvbi13cmFwcGVyJyk7XG5cbiAgICB0aGlzLnNlbGVjdCA9IHt9O1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29ubG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgICB9KTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBsb2NhdGlvbi5yZWxvYWQoKTtcbiAgICB9KTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc2Nyb2xsQm90dG9tID0gZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQgLSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIC0gKHdpbmRvdy5pbm5lckhlaWdodCArIF90aGlzLmZvb3Rlci5vZmZzZXRIZWlnaHQpO1xuXG4gICAgICBpZiAoc2Nyb2xsQm90dG9tIDw9IHdpbmRvdy5pbm5lckhlaWdodCAqIDIgJiYgIV90aGlzLndhaXQpIHtcbiAgICAgICAgX3RoaXMuYWRkUG9zdCgpO1xuICAgICAgICBfdGhpcy53YWl0ID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuZ2V0QWN0aXZlKCk7XG4gICAgfSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTG9hZE1vcmUsIFt7XG4gICAga2V5OiAnYWRkUG9zdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFBvc3QoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgIGFjdGlvbjogJ3B1YmxpY2F0aW9uX2xvYWRfbW9yZScsXG4gICAgICAgIHBvc3RfZGF0ZTogdGhpcy5kYXRlLFxuICAgICAgICBwb3N0X2lkOiB0aGlzLmlkLFxuICAgICAgICBwYWdlOiB0aGlzLnBhZ2VcbiAgICAgIH07XG5cbiAgICAgIF9heGlvczIuZGVmYXVsdC5wb3N0KGFqYXh1cmwsIF9xczIuZGVmYXVsdC5zdHJpbmdpZnkoZGF0YSkpLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICByZXMuZGF0YS5kYXRhLnBvc3RzLmZvckVhY2goZnVuY3Rpb24gKHBvc3QpIHtcbiAgICAgICAgICBfdGhpczIuY29udGFpbmVyLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgcG9zdC5jb250ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIF90aGlzMi5wb3N0cyA9IF90aGlzMi5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLnNpbmdsZV9fd3JhcHBlcicpO1xuICAgICAgICBfdGhpczIucGFnZSArPSAxO1xuICAgICAgICBfdGhpczIud2FpdCA9IGZhbHNlO1xuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0QWN0aXZlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QWN0aXZlKCkge1xuICAgICAgdmFyIHNlbGVjdCA9IHt9O1xuICAgICAgdGhpcy5wb3N0cy5mb3JFYWNoKGZ1bmN0aW9uIChwb3N0KSB7XG4gICAgICAgIHZhciBfcG9zdCRnZXRCb3VuZGluZ0NsaWUgPSBwb3N0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICAgICAgdG9wID0gX3Bvc3QkZ2V0Qm91bmRpbmdDbGllLnRvcDtcblxuICAgICAgICBpZiAodG9wIDwgd2luZG93LmlubmVySGVpZ2h0IC8gMiAmJiB0b3AgPiAwKSB7XG4gICAgICAgICAgc2VsZWN0ID0ge1xuICAgICAgICAgICAgdGl0bGU6IHBvc3QuZGF0YXNldC50aXRsZSxcbiAgICAgICAgICAgIHBhdGg6IHBvc3QuZGF0YXNldC5wYXRoXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLnNlbGVjdC50aXRsZSAhPT0gc2VsZWN0LnRpdGxlICYmIHNlbGVjdC50aXRsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ID0gc2VsZWN0O1xuICAgICAgICB0aGlzLnVwZGF0ZVBhZ2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd1cGRhdGVQYWdlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlUGFnZSgpIHtcbiAgICAgIGRvY3VtZW50LnRpdGxlID0gdGhpcy5zZWxlY3QudGl0bGUgKyAnIC0gRWNyaXR1cmVzIE51bWVyaXF1ZXMnO1xuICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHt9LCAnJywgdGhpcy5zZWxlY3QucGF0aCk7XG4gICAgICB3aW5kb3cuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9ICdtYW51YWwnO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBMb2FkTW9yZTtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gTG9hZE1vcmU7XG5cbn0se1wiYXhpb3NcIjo2LFwicXNcIjozNH1dLDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgUnVicmljcyA9IGZ1bmN0aW9uIFJ1YnJpY3MoY29udGFpbmVyKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIGRlc2t0b3AgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG5cbiAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJ1YnJpY3MpO1xuXG4gIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICB0aGlzLmJ1dHRvbnMgPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLml0ZW1fX2J1dHRvbicpO1xuICB0aGlzLndyYXBwZXJzID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5pdGVtX193cmFwcGVyJyk7XG4gIHRoaXMubGFzdF9pbmRleCA9IG51bGw7XG4gIHRoaXMuZGVza3RvcCA9IGRlc2t0b3A7XG5cbiAgdGhpcy5idXR0b25zLmZvckVhY2goZnVuY3Rpb24gKGJ1dHRvbikge1xuICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB2YXIgaW5kZXggPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKF90aGlzLmJ1dHRvbnMsIGJ1dHRvbik7XG5cbiAgICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA8IDcwMCkge1xuICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgnbW9iaWxlLWFjdGl2ZScpO1xuICAgICAgICBfdGhpcy53cmFwcGVyc1tpbmRleF0uc3R5bGUuaGVpZ2h0ID0gX3RoaXMud3JhcHBlcnNbaW5kZXhdLmNoaWxkRWxlbWVudENvdW50ICogNjAgKyAncHgnO1xuICAgICAgICBfdGhpcy5jb250YWluZXIuc2Nyb2xsSW50b1ZpZXcoeyBiZWhhdmlvcjogJ3Ntb290aCcsIGJsb2NrOiAnc3RhcnQnLCBpbmxpbmU6ICduZWFyZXN0JyB9KTtcblxuICAgICAgICBfdGhpcy53cmFwcGVycy5mb3JFYWNoKGZ1bmN0aW9uICh3cmFwcGVyLCBpKSB7XG4gICAgICAgICAgaWYgKGkgIT09IGluZGV4IHx8IGluZGV4ID09PSBfdGhpcy5sYXN0X2luZGV4KSB7XG4gICAgICAgICAgICB3cmFwcGVyLnN0eWxlLnJlbW92ZVByb3BlcnR5KCdoZWlnaHQnKTtcbiAgICAgICAgICAgIF90aGlzLmJ1dHRvbnNbaV0uY2xhc3NMaXN0LnJlbW92ZSgnbW9iaWxlLWFjdGl2ZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGRlc2t0b3ApIHtcbiAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2Rlc2t0b3AtYWN0aXZlJyk7XG4gICAgICAgIF90aGlzLndyYXBwZXJzW2luZGV4XS5jbGFzc0xpc3QuYWRkKCdkZXNrdG9wLWFjdGl2ZScpO1xuXG4gICAgICAgIF90aGlzLndyYXBwZXJzLmZvckVhY2goZnVuY3Rpb24gKHdyYXBwZXIsIGkpIHtcbiAgICAgICAgICBfdGhpcy53cmFwcGVyc1tpXS5jbGFzc0xpc3QucmVtb3ZlKCdtb2JpbGUtYWN0aXZlJyk7XG4gICAgICAgICAgX3RoaXMuYnV0dG9uc1tpXS5jbGFzc0xpc3QucmVtb3ZlKCdtb2JpbGUtYWN0aXZlJyk7XG4gICAgICAgICAgd3JhcHBlci5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnaGVpZ2h0Jyk7XG4gICAgICAgICAgaWYgKGkgIT09IGluZGV4KSB7XG4gICAgICAgICAgICBfdGhpcy53cmFwcGVyc1tpXS5jbGFzc0xpc3QucmVtb3ZlKCdkZXNrdG9wLWFjdGl2ZScpO1xuICAgICAgICAgICAgX3RoaXMuYnV0dG9uc1tpXS5jbGFzc0xpc3QucmVtb3ZlKCdkZXNrdG9wLWFjdGl2ZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmxhc3RfaW5kZXggPSBfdGhpcy5sYXN0X2luZGV4ID09PSBpbmRleCA/IG51bGwgOiBpbmRleDtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJ1YnJpY3M7XG5cbn0se31dLDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgVGF4b25vbXlUYWJzID0gZnVuY3Rpb24gVGF4b25vbXlUYWJzKGNvbnRhaW5lcikge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUYXhvbm9teVRhYnMpO1xuXG4gIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICB0aGlzLnRhYnMgPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnc2VjdGlvbi5yZWxhdGVkX19zZWN0aW9uJyk7XG4gIHRoaXMuYnV0dG9ucyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCdidXR0b24uaGVhZGVyX19idXR0b24nKTtcbiAgdGhpcy53cmFwcGVyID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5yZWxhdGVkX19jb250YWluZXInKTtcbiAgdGhpcy5yZXR1cm4gPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignLnJlbGF0ZWRfX3JldHVybicpO1xuICB0aGlzLnRhYnNXcmFwcGVyID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5yZWxhdGVkX193cmFwcGVyJyk7XG4gIHRoaXMubGFzdF9pbmRleCA9IDA7XG5cbiAgdGhpcy5idXR0b25zLmZvckVhY2goZnVuY3Rpb24gKGJ1dHRvbikge1xuICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgaW5kZXggPSBlLmN1cnJlbnRUYXJnZXQuZGF0YXNldC5pbmRleDtcblxuXG4gICAgICBpZiAoaW5kZXggIT09IF90aGlzLmxhc3RfaW5kZXgpIHtcbiAgICAgICAgX3RoaXMuYnV0dG9uc1tfdGhpcy5sYXN0X2luZGV4XS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgICAgX3RoaXMudGFic1tfdGhpcy5sYXN0X2luZGV4XS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcblxuICAgICAgICBfdGhpcy5idXR0b25zW2luZGV4XS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICAgICAgX3RoaXMudGFic1tpbmRleF0uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG5cbiAgICAgICAgX3RoaXMubGFzdF9pbmRleCA9IGluZGV4O1xuICAgICAgfVxuXG4gICAgICBpZiAod2luZG93LmlubmVyV2lkdGggPD0gNzAwKSB7XG4gICAgICAgIF90aGlzLndyYXBwZXIuY2xhc3NMaXN0LmFkZCgnY29udGFpbmVyLS1zbGlkZScpO1xuICAgICAgICBfdGhpcy50YWJzV3JhcHBlci5jbGFzc0xpc3QucmVtb3ZlKCd3cmFwcGVyLS1oaWRlJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIHRoaXMucmV0dXJuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA8PSA3MDApIHtcbiAgICAgIF90aGlzLndyYXBwZXIuY2xhc3NMaXN0LnJlbW92ZSgnY29udGFpbmVyLS1zbGlkZScpO1xuICAgICAgX3RoaXMudGFic1dyYXBwZXIuY2xhc3NMaXN0LmFkZCgnd3JhcHBlci0taGlkZScpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRheG9ub215VGFicztcblxufSx7fV0sNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfSGVhZGVyID0gcmVxdWlyZSgnLi9DbGFzc2VzL0hlYWRlcicpO1xuXG52YXIgX0hlYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9IZWFkZXIpO1xuXG52YXIgX1J1YnJpY3MgPSByZXF1aXJlKCcuL0NsYXNzZXMvUnVicmljcycpO1xuXG52YXIgX1J1YnJpY3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUnVicmljcyk7XG5cbnZhciBfVGF4b25vbXlUYWJzID0gcmVxdWlyZSgnLi9DbGFzc2VzL1RheG9ub215VGFicycpO1xuXG52YXIgX1RheG9ub215VGFiczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9UYXhvbm9teVRhYnMpO1xuXG52YXIgX0xvYWRNb3JlID0gcmVxdWlyZSgnLi9DbGFzc2VzL0xvYWRNb3JlJyk7XG5cbnZhciBfTG9hZE1vcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTG9hZE1vcmUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgaGVhZGVyID0gbmV3IF9IZWFkZXIyLmRlZmF1bHQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNpdGUtaGVhZGVyJykpO1xuXG5pZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhvbWUtc2VjdGlvbi5ydWJyaWNzJykpIHtcbiAgdmFyIGhvbWVSdWJyaWNzID0gbmV3IF9SdWJyaWNzMi5kZWZhdWx0KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ob21lLXNlY3Rpb24ucnVicmljcycpLCB0cnVlKTtcbn1cblxuaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50YXhvbm9teV9fcmVsYXRlZCcpKSB7XG4gIHZhciB0YWJzID0gbmV3IF9UYXhvbm9teVRhYnMyLmRlZmF1bHQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRheG9ub215X19yZWxhdGVkJykpO1xufVxuXG5pZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBhZ2UtcnVicmljcycpKSB7XG4gIHZhciBwYWdlUnVicmljcyA9IG5ldyBfUnVicmljczIuZGVmYXVsdChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucGFnZS1ydWJyaWNzJyksIGZhbHNlKTtcbn1cblxuaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wdWJsaWNhdGlvbl9fY29udGFpbmVyJykpIHtcbiAgdmFyIGxvYWRNb3JlID0gbmV3IF9Mb2FkTW9yZTIuZGVmYXVsdChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHVibGljYXRpb25fX2NvbnRhaW5lcicpKTtcbn1cblxufSx7XCIuL0NsYXNzZXMvSGVhZGVyXCI6MSxcIi4vQ2xhc3Nlcy9Mb2FkTW9yZVwiOjIsXCIuL0NsYXNzZXMvUnVicmljc1wiOjMsXCIuL0NsYXNzZXMvVGF4b25vbXlUYWJzXCI6NH1dLDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpO1xufSx7XCIuL2xpYi9heGlvc1wiOjh9XSw3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xudmFyIGJ0b2EgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmJ0b2EgJiYgd2luZG93LmJ0b2EuYmluZCh3aW5kb3cpKSB8fCByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnRvYScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHZhciBsb2FkRXZlbnQgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbiAgICB2YXIgeERvbWFpbiA9IGZhbHNlO1xuXG4gICAgLy8gRm9yIElFIDgvOSBDT1JTIHN1cHBvcnRcbiAgICAvLyBPbmx5IHN1cHBvcnRzIFBPU1QgYW5kIEdFVCBjYWxscyBhbmQgZG9lc24ndCByZXR1cm5zIHRoZSByZXNwb25zZSBoZWFkZXJzLlxuICAgIC8vIERPTidUIGRvIHRoaXMgZm9yIHRlc3RpbmcgYi9jIFhNTEh0dHBSZXF1ZXN0IGlzIG1vY2tlZCwgbm90IFhEb21haW5SZXF1ZXN0LlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmXG4gICAgICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIHdpbmRvdy5YRG9tYWluUmVxdWVzdCAmJiAhKCd3aXRoQ3JlZGVudGlhbHMnIGluIHJlcXVlc3QpICYmXG4gICAgICAgICFpc1VSTFNhbWVPcmlnaW4oY29uZmlnLnVybCkpIHtcbiAgICAgIHJlcXVlc3QgPSBuZXcgd2luZG93LlhEb21haW5SZXF1ZXN0KCk7XG4gICAgICBsb2FkRXZlbnQgPSAnb25sb2FkJztcbiAgICAgIHhEb21haW4gPSB0cnVlO1xuICAgICAgcmVxdWVzdC5vbnByb2dyZXNzID0gZnVuY3Rpb24gaGFuZGxlUHJvZ3Jlc3MoKSB7fTtcbiAgICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHt9O1xuICAgIH1cblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgfHwgJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZVxuICAgIHJlcXVlc3RbbG9hZEV2ZW50XSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgKHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCAmJiAheERvbWFpbikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhY29uZmlnLnJlc3BvbnNlVHlwZSB8fCBjb25maWcucmVzcG9uc2VUeXBlID09PSAndGV4dCcgPyByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgLy8gSUUgc2VuZHMgMTIyMyBpbnN0ZWFkIG9mIDIwNCAoaHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9zL2lzc3Vlcy8yMDEpXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMgPT09IDEyMjMgPyAyMDQgOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXMgPT09IDEyMjMgPyAnTm8gQ29udGVudCcgOiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIHZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcblxuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG5cbn0se1wiLi4vY29yZS9jcmVhdGVFcnJvclwiOjE0LFwiLi8uLi9jb3JlL3NldHRsZVwiOjE3LFwiLi8uLi9oZWxwZXJzL2J0b2FcIjoyMSxcIi4vLi4vaGVscGVycy9idWlsZFVSTFwiOjIyLFwiLi8uLi9oZWxwZXJzL2Nvb2tpZXNcIjoyNCxcIi4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW5cIjoyNixcIi4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnNcIjoyOCxcIi4vLi4vdXRpbHNcIjozMCxcIl9wcm9jZXNzXCI6MzJ9XSw4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKHV0aWxzLm1lcmdlKGRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG5cbn0se1wiLi9jYW5jZWwvQ2FuY2VsXCI6OSxcIi4vY2FuY2VsL0NhbmNlbFRva2VuXCI6MTAsXCIuL2NhbmNlbC9pc0NhbmNlbFwiOjExLFwiLi9jb3JlL0F4aW9zXCI6MTIsXCIuL2RlZmF1bHRzXCI6MTksXCIuL2hlbHBlcnMvYmluZFwiOjIwLFwiLi9oZWxwZXJzL3NwcmVhZFwiOjI5LFwiLi91dGlsc1wiOjMwfV0sOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcblxufSx7fV0sMTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcblxufSx7XCIuL0NhbmNlbFwiOjl9XSwxMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcblxufSx7fV0sMTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLy4uL2RlZmF1bHRzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gdXRpbHMubWVyZ2Uoe1xuICAgICAgdXJsOiBhcmd1bWVudHNbMF1cbiAgICB9LCBhcmd1bWVudHNbMV0pO1xuICB9XG5cbiAgY29uZmlnID0gdXRpbHMubWVyZ2UoZGVmYXVsdHMsIHttZXRob2Q6ICdnZXQnfSwgdGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcblxuICAvLyBIb29rIHVwIGludGVyY2VwdG9ycyBtaWRkbGV3YXJlXG4gIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcblxufSx7XCIuLy4uL2RlZmF1bHRzXCI6MTksXCIuLy4uL3V0aWxzXCI6MzAsXCIuL0ludGVyY2VwdG9yTWFuYWdlclwiOjEzLFwiLi9kaXNwYXRjaFJlcXVlc3RcIjoxNX1dLDEzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG5cbn0se1wiLi8uLi91dGlsc1wiOjMwfV0sMTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcblxufSx7XCIuL2VuaGFuY2VFcnJvclwiOjE2fV0sMTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gU3VwcG9ydCBiYXNlVVJMIGNvbmZpZ1xuICBpZiAoY29uZmlnLmJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwoY29uZmlnLnVybCkpIHtcbiAgICBjb25maWcudXJsID0gY29tYmluZVVSTHMoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICB9XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVycyB8fCB7fVxuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG5cbn0se1wiLi4vY2FuY2VsL2lzQ2FuY2VsXCI6MTEsXCIuLi9kZWZhdWx0c1wiOjE5LFwiLi8uLi9oZWxwZXJzL2NvbWJpbmVVUkxzXCI6MjMsXCIuLy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTFwiOjI1LFwiLi8uLi91dGlsc1wiOjMwLFwiLi90cmFuc2Zvcm1EYXRhXCI6MTh9XSwxNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICByZXR1cm4gZXJyb3I7XG59O1xuXG59LHt9XSwxNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIC8vIE5vdGU6IHN0YXR1cyBpcyBub3QgZXhwb3NlZCBieSBYRG9tYWluUmVxdWVzdFxuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG5cbn0se1wiLi9jcmVhdGVFcnJvclwiOjE0fV0sMTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuXG59LHtcIi4vLi4vdXRpbHNcIjozMH1dLDE5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG5cbn0se1wiLi9hZGFwdGVycy9odHRwXCI6NyxcIi4vYWRhcHRlcnMveGhyXCI6NyxcIi4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lXCI6MjcsXCIuL3V0aWxzXCI6MzAsXCJfcHJvY2Vzc1wiOjMyfV0sMjA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuXG59LHt9XSwyMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbi8vIGJ0b2EgcG9seWZpbGwgZm9yIElFPDEwIGNvdXJ0ZXN5IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXZpZGNoYW1iZXJzL0Jhc2U2NC5qc1xuXG52YXIgY2hhcnMgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0nO1xuXG5mdW5jdGlvbiBFKCkge1xuICB0aGlzLm1lc3NhZ2UgPSAnU3RyaW5nIGNvbnRhaW5zIGFuIGludmFsaWQgY2hhcmFjdGVyJztcbn1cbkUucHJvdG90eXBlID0gbmV3IEVycm9yO1xuRS5wcm90b3R5cGUuY29kZSA9IDU7XG5FLnByb3RvdHlwZS5uYW1lID0gJ0ludmFsaWRDaGFyYWN0ZXJFcnJvcic7XG5cbmZ1bmN0aW9uIGJ0b2EoaW5wdXQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhpbnB1dCk7XG4gIHZhciBvdXRwdXQgPSAnJztcbiAgZm9yIChcbiAgICAvLyBpbml0aWFsaXplIHJlc3VsdCBhbmQgY291bnRlclxuICAgIHZhciBibG9jaywgY2hhckNvZGUsIGlkeCA9IDAsIG1hcCA9IGNoYXJzO1xuICAgIC8vIGlmIHRoZSBuZXh0IHN0ciBpbmRleCBkb2VzIG5vdCBleGlzdDpcbiAgICAvLyAgIGNoYW5nZSB0aGUgbWFwcGluZyB0YWJsZSB0byBcIj1cIlxuICAgIC8vICAgY2hlY2sgaWYgZCBoYXMgbm8gZnJhY3Rpb25hbCBkaWdpdHNcbiAgICBzdHIuY2hhckF0KGlkeCB8IDApIHx8IChtYXAgPSAnPScsIGlkeCAlIDEpO1xuICAgIC8vIFwiOCAtIGlkeCAlIDEgKiA4XCIgZ2VuZXJhdGVzIHRoZSBzZXF1ZW5jZSAyLCA0LCA2LCA4XG4gICAgb3V0cHV0ICs9IG1hcC5jaGFyQXQoNjMgJiBibG9jayA+PiA4IC0gaWR4ICUgMSAqIDgpXG4gICkge1xuICAgIGNoYXJDb2RlID0gc3RyLmNoYXJDb2RlQXQoaWR4ICs9IDMgLyA0KTtcbiAgICBpZiAoY2hhckNvZGUgPiAweEZGKSB7XG4gICAgICB0aHJvdyBuZXcgRSgpO1xuICAgIH1cbiAgICBibG9jayA9IGJsb2NrIDw8IDggfCBjaGFyQ29kZTtcbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJ0b2E7XG5cbn0se31dLDIyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG5cbn0se1wiLi8uLi91dGlsc1wiOjMwfV0sMjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuXG59LHt9XSwyNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgfSxcblxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgfVxuICAgIH07XG4gIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9KSgpXG4pO1xuXG59LHtcIi4vLi4vdXRpbHNcIjozMH1dLDI1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuXG59LHt9XSwyNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgfVxuXG4gICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9KSgpXG4pO1xuXG59LHtcIi4vLi4vdXRpbHNcIjozMH1dLDI3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcblxufSx7XCIuLi91dGlsc1wiOjMwfV0sMjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcblxufSx7XCIuLy4uL3V0aWxzXCI6MzB9XSwyOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG5cbn0se31dLDMwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIGlzQnVmZmVyID0gcmVxdWlyZSgnaXMtYnVmZmVyJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHR5cGVvZiByZXN1bHRba2V5XSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW1cbn07XG5cbn0se1wiLi9oZWxwZXJzL2JpbmRcIjoyMCxcImlzLWJ1ZmZlclwiOjMxfV0sMzE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG4vLyBUaGUgX2lzQnVmZmVyIGNoZWNrIGlzIGZvciBTYWZhcmkgNS03IHN1cHBvcnQsIGJlY2F1c2UgaXQncyBtaXNzaW5nXG4vLyBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLiBSZW1vdmUgdGhpcyBldmVudHVhbGx5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIChpc0J1ZmZlcihvYmopIHx8IGlzU2xvd0J1ZmZlcihvYmopIHx8ICEhb2JqLl9pc0J1ZmZlcilcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIgKG9iaikge1xuICByZXR1cm4gISFvYmouY29uc3RydWN0b3IgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuXG4vLyBGb3IgTm9kZSB2MC4xMCBzdXBwb3J0LiBSZW1vdmUgdGhpcyBldmVudHVhbGx5LlxuZnVuY3Rpb24gaXNTbG93QnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmoucmVhZEZsb2F0TEUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5zbGljZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpc0J1ZmZlcihvYmouc2xpY2UoMCwgMCkpXG59XG5cbn0se31dLDMyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG5cbn0se31dLDMzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIHJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG52YXIgcGVyY2VudFR3ZW50aWVzID0gLyUyMC9nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAnZGVmYXVsdCc6ICdSRkMzOTg2JyxcbiAgICBmb3JtYXR0ZXJzOiB7XG4gICAgICAgIFJGQzE3Mzg6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcGxhY2UuY2FsbCh2YWx1ZSwgcGVyY2VudFR3ZW50aWVzLCAnKycpO1xuICAgICAgICB9LFxuICAgICAgICBSRkMzOTg2OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgUkZDMTczODogJ1JGQzE3MzgnLFxuICAgIFJGQzM5ODY6ICdSRkMzOTg2J1xufTtcblxufSx7fV0sMzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9zdHJpbmdpZnknKTtcbnZhciBwYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UnKTtcbnZhciBmb3JtYXRzID0gcmVxdWlyZSgnLi9mb3JtYXRzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGZvcm1hdHM6IGZvcm1hdHMsXG4gICAgcGFyc2U6IHBhcnNlLFxuICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5XG59O1xuXG59LHtcIi4vZm9ybWF0c1wiOjMzLFwiLi9wYXJzZVwiOjM1LFwiLi9zdHJpbmdpZnlcIjozNn1dLDM1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGRlZmF1bHRzID0ge1xuICAgIGFsbG93RG90czogZmFsc2UsXG4gICAgYWxsb3dQcm90b3R5cGVzOiBmYWxzZSxcbiAgICBhcnJheUxpbWl0OiAyMCxcbiAgICBkZWNvZGVyOiB1dGlscy5kZWNvZGUsXG4gICAgZGVsaW1pdGVyOiAnJicsXG4gICAgZGVwdGg6IDUsXG4gICAgcGFyYW1ldGVyTGltaXQ6IDEwMDAsXG4gICAgcGxhaW5PYmplY3RzOiBmYWxzZSxcbiAgICBzdHJpY3ROdWxsSGFuZGxpbmc6IGZhbHNlXG59O1xuXG52YXIgcGFyc2VWYWx1ZXMgPSBmdW5jdGlvbiBwYXJzZVF1ZXJ5U3RyaW5nVmFsdWVzKHN0ciwgb3B0aW9ucykge1xuICAgIHZhciBvYmogPSB7fTtcbiAgICB2YXIgY2xlYW5TdHIgPSBvcHRpb25zLmlnbm9yZVF1ZXJ5UHJlZml4ID8gc3RyLnJlcGxhY2UoL15cXD8vLCAnJykgOiBzdHI7XG4gICAgdmFyIGxpbWl0ID0gb3B0aW9ucy5wYXJhbWV0ZXJMaW1pdCA9PT0gSW5maW5pdHkgPyB1bmRlZmluZWQgOiBvcHRpb25zLnBhcmFtZXRlckxpbWl0O1xuICAgIHZhciBwYXJ0cyA9IGNsZWFuU3RyLnNwbGl0KG9wdGlvbnMuZGVsaW1pdGVyLCBsaW1pdCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBwYXJ0ID0gcGFydHNbaV07XG5cbiAgICAgICAgdmFyIGJyYWNrZXRFcXVhbHNQb3MgPSBwYXJ0LmluZGV4T2YoJ109Jyk7XG4gICAgICAgIHZhciBwb3MgPSBicmFja2V0RXF1YWxzUG9zID09PSAtMSA/IHBhcnQuaW5kZXhPZignPScpIDogYnJhY2tldEVxdWFsc1BvcyArIDE7XG5cbiAgICAgICAgdmFyIGtleSwgdmFsO1xuICAgICAgICBpZiAocG9zID09PSAtMSkge1xuICAgICAgICAgICAga2V5ID0gb3B0aW9ucy5kZWNvZGVyKHBhcnQsIGRlZmF1bHRzLmRlY29kZXIpO1xuICAgICAgICAgICAgdmFsID0gb3B0aW9ucy5zdHJpY3ROdWxsSGFuZGxpbmcgPyBudWxsIDogJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBrZXkgPSBvcHRpb25zLmRlY29kZXIocGFydC5zbGljZSgwLCBwb3MpLCBkZWZhdWx0cy5kZWNvZGVyKTtcbiAgICAgICAgICAgIHZhbCA9IG9wdGlvbnMuZGVjb2RlcihwYXJ0LnNsaWNlKHBvcyArIDEpLCBkZWZhdWx0cy5kZWNvZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzLmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgICBvYmpba2V5XSA9IFtdLmNvbmNhdChvYmpba2V5XSkuY29uY2F0KHZhbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvYmpba2V5XSA9IHZhbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG59O1xuXG52YXIgcGFyc2VPYmplY3QgPSBmdW5jdGlvbiAoY2hhaW4sIHZhbCwgb3B0aW9ucykge1xuICAgIHZhciBsZWFmID0gdmFsO1xuXG4gICAgZm9yICh2YXIgaSA9IGNoYWluLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBvYmo7XG4gICAgICAgIHZhciByb290ID0gY2hhaW5baV07XG5cbiAgICAgICAgaWYgKHJvb3QgPT09ICdbXScpIHtcbiAgICAgICAgICAgIG9iaiA9IFtdO1xuICAgICAgICAgICAgb2JqID0gb2JqLmNvbmNhdChsZWFmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9iaiA9IG9wdGlvbnMucGxhaW5PYmplY3RzID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IHt9O1xuICAgICAgICAgICAgdmFyIGNsZWFuUm9vdCA9IHJvb3QuY2hhckF0KDApID09PSAnWycgJiYgcm9vdC5jaGFyQXQocm9vdC5sZW5ndGggLSAxKSA9PT0gJ10nID8gcm9vdC5zbGljZSgxLCAtMSkgOiByb290O1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gcGFyc2VJbnQoY2xlYW5Sb290LCAxMCk7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgIWlzTmFOKGluZGV4KVxuICAgICAgICAgICAgICAgICYmIHJvb3QgIT09IGNsZWFuUm9vdFxuICAgICAgICAgICAgICAgICYmIFN0cmluZyhpbmRleCkgPT09IGNsZWFuUm9vdFxuICAgICAgICAgICAgICAgICYmIGluZGV4ID49IDBcbiAgICAgICAgICAgICAgICAmJiAob3B0aW9ucy5wYXJzZUFycmF5cyAmJiBpbmRleCA8PSBvcHRpb25zLmFycmF5TGltaXQpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBvYmogPSBbXTtcbiAgICAgICAgICAgICAgICBvYmpbaW5kZXhdID0gbGVhZjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb2JqW2NsZWFuUm9vdF0gPSBsZWFmO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGVhZiA9IG9iajtcbiAgICB9XG5cbiAgICByZXR1cm4gbGVhZjtcbn07XG5cbnZhciBwYXJzZUtleXMgPSBmdW5jdGlvbiBwYXJzZVF1ZXJ5U3RyaW5nS2V5cyhnaXZlbktleSwgdmFsLCBvcHRpb25zKSB7XG4gICAgaWYgKCFnaXZlbktleSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gVHJhbnNmb3JtIGRvdCBub3RhdGlvbiB0byBicmFja2V0IG5vdGF0aW9uXG4gICAgdmFyIGtleSA9IG9wdGlvbnMuYWxsb3dEb3RzID8gZ2l2ZW5LZXkucmVwbGFjZSgvXFwuKFteLltdKykvZywgJ1skMV0nKSA6IGdpdmVuS2V5O1xuXG4gICAgLy8gVGhlIHJlZ2V4IGNodW5rc1xuXG4gICAgdmFyIGJyYWNrZXRzID0gLyhcXFtbXltcXF1dKl0pLztcbiAgICB2YXIgY2hpbGQgPSAvKFxcW1teW1xcXV0qXSkvZztcblxuICAgIC8vIEdldCB0aGUgcGFyZW50XG5cbiAgICB2YXIgc2VnbWVudCA9IGJyYWNrZXRzLmV4ZWMoa2V5KTtcbiAgICB2YXIgcGFyZW50ID0gc2VnbWVudCA/IGtleS5zbGljZSgwLCBzZWdtZW50LmluZGV4KSA6IGtleTtcblxuICAgIC8vIFN0YXNoIHRoZSBwYXJlbnQgaWYgaXQgZXhpc3RzXG5cbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgLy8gSWYgd2UgYXJlbid0IHVzaW5nIHBsYWluIG9iamVjdHMsIG9wdGlvbmFsbHkgcHJlZml4IGtleXNcbiAgICAgICAgLy8gdGhhdCB3b3VsZCBvdmVyd3JpdGUgb2JqZWN0IHByb3RvdHlwZSBwcm9wZXJ0aWVzXG4gICAgICAgIGlmICghb3B0aW9ucy5wbGFpbk9iamVjdHMgJiYgaGFzLmNhbGwoT2JqZWN0LnByb3RvdHlwZSwgcGFyZW50KSkge1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmFsbG93UHJvdG90eXBlcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGtleXMucHVzaChwYXJlbnQpO1xuICAgIH1cblxuICAgIC8vIExvb3AgdGhyb3VnaCBjaGlsZHJlbiBhcHBlbmRpbmcgdG8gdGhlIGFycmF5IHVudGlsIHdlIGhpdCBkZXB0aFxuXG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlICgoc2VnbWVudCA9IGNoaWxkLmV4ZWMoa2V5KSkgIT09IG51bGwgJiYgaSA8IG9wdGlvbnMuZGVwdGgpIHtcbiAgICAgICAgaSArPSAxO1xuICAgICAgICBpZiAoIW9wdGlvbnMucGxhaW5PYmplY3RzICYmIGhhcy5jYWxsKE9iamVjdC5wcm90b3R5cGUsIHNlZ21lbnRbMV0uc2xpY2UoMSwgLTEpKSkge1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmFsbG93UHJvdG90eXBlcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBrZXlzLnB1c2goc2VnbWVudFsxXSk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlcmUncyBhIHJlbWFpbmRlciwganVzdCBhZGQgd2hhdGV2ZXIgaXMgbGVmdFxuXG4gICAgaWYgKHNlZ21lbnQpIHtcbiAgICAgICAga2V5cy5wdXNoKCdbJyArIGtleS5zbGljZShzZWdtZW50LmluZGV4KSArICddJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnNlT2JqZWN0KGtleXMsIHZhbCwgb3B0aW9ucyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHIsIG9wdHMpIHtcbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgPyB1dGlscy5hc3NpZ24oe30sIG9wdHMpIDoge307XG5cbiAgICBpZiAob3B0aW9ucy5kZWNvZGVyICE9PSBudWxsICYmIG9wdGlvbnMuZGVjb2RlciAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvcHRpb25zLmRlY29kZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRGVjb2RlciBoYXMgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBvcHRpb25zLmlnbm9yZVF1ZXJ5UHJlZml4ID0gb3B0aW9ucy5pZ25vcmVRdWVyeVByZWZpeCA9PT0gdHJ1ZTtcbiAgICBvcHRpb25zLmRlbGltaXRlciA9IHR5cGVvZiBvcHRpb25zLmRlbGltaXRlciA9PT0gJ3N0cmluZycgfHwgdXRpbHMuaXNSZWdFeHAob3B0aW9ucy5kZWxpbWl0ZXIpID8gb3B0aW9ucy5kZWxpbWl0ZXIgOiBkZWZhdWx0cy5kZWxpbWl0ZXI7XG4gICAgb3B0aW9ucy5kZXB0aCA9IHR5cGVvZiBvcHRpb25zLmRlcHRoID09PSAnbnVtYmVyJyA/IG9wdGlvbnMuZGVwdGggOiBkZWZhdWx0cy5kZXB0aDtcbiAgICBvcHRpb25zLmFycmF5TGltaXQgPSB0eXBlb2Ygb3B0aW9ucy5hcnJheUxpbWl0ID09PSAnbnVtYmVyJyA/IG9wdGlvbnMuYXJyYXlMaW1pdCA6IGRlZmF1bHRzLmFycmF5TGltaXQ7XG4gICAgb3B0aW9ucy5wYXJzZUFycmF5cyA9IG9wdGlvbnMucGFyc2VBcnJheXMgIT09IGZhbHNlO1xuICAgIG9wdGlvbnMuZGVjb2RlciA9IHR5cGVvZiBvcHRpb25zLmRlY29kZXIgPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLmRlY29kZXIgOiBkZWZhdWx0cy5kZWNvZGVyO1xuICAgIG9wdGlvbnMuYWxsb3dEb3RzID0gdHlwZW9mIG9wdGlvbnMuYWxsb3dEb3RzID09PSAnYm9vbGVhbicgPyBvcHRpb25zLmFsbG93RG90cyA6IGRlZmF1bHRzLmFsbG93RG90cztcbiAgICBvcHRpb25zLnBsYWluT2JqZWN0cyA9IHR5cGVvZiBvcHRpb25zLnBsYWluT2JqZWN0cyA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5wbGFpbk9iamVjdHMgOiBkZWZhdWx0cy5wbGFpbk9iamVjdHM7XG4gICAgb3B0aW9ucy5hbGxvd1Byb3RvdHlwZXMgPSB0eXBlb2Ygb3B0aW9ucy5hbGxvd1Byb3RvdHlwZXMgPT09ICdib29sZWFuJyA/IG9wdGlvbnMuYWxsb3dQcm90b3R5cGVzIDogZGVmYXVsdHMuYWxsb3dQcm90b3R5cGVzO1xuICAgIG9wdGlvbnMucGFyYW1ldGVyTGltaXQgPSB0eXBlb2Ygb3B0aW9ucy5wYXJhbWV0ZXJMaW1pdCA9PT0gJ251bWJlcicgPyBvcHRpb25zLnBhcmFtZXRlckxpbWl0IDogZGVmYXVsdHMucGFyYW1ldGVyTGltaXQ7XG4gICAgb3B0aW9ucy5zdHJpY3ROdWxsSGFuZGxpbmcgPSB0eXBlb2Ygb3B0aW9ucy5zdHJpY3ROdWxsSGFuZGxpbmcgPT09ICdib29sZWFuJyA/IG9wdGlvbnMuc3RyaWN0TnVsbEhhbmRsaW5nIDogZGVmYXVsdHMuc3RyaWN0TnVsbEhhbmRsaW5nO1xuXG4gICAgaWYgKHN0ciA9PT0gJycgfHwgc3RyID09PSBudWxsIHx8IHR5cGVvZiBzdHIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLnBsYWluT2JqZWN0cyA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTtcbiAgICB9XG5cbiAgICB2YXIgdGVtcE9iaiA9IHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnID8gcGFyc2VWYWx1ZXMoc3RyLCBvcHRpb25zKSA6IHN0cjtcbiAgICB2YXIgb2JqID0gb3B0aW9ucy5wbGFpbk9iamVjdHMgPyBPYmplY3QuY3JlYXRlKG51bGwpIDoge307XG5cbiAgICAvLyBJdGVyYXRlIG92ZXIgdGhlIGtleXMgYW5kIHNldHVwIHRoZSBuZXcgb2JqZWN0XG5cbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHRlbXBPYmopO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgdmFyIG5ld09iaiA9IHBhcnNlS2V5cyhrZXksIHRlbXBPYmpba2V5XSwgb3B0aW9ucyk7XG4gICAgICAgIG9iaiA9IHV0aWxzLm1lcmdlKG9iaiwgbmV3T2JqLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdXRpbHMuY29tcGFjdChvYmopO1xufTtcblxufSx7XCIuL3V0aWxzXCI6Mzd9XSwzNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBmb3JtYXRzID0gcmVxdWlyZSgnLi9mb3JtYXRzJyk7XG5cbnZhciBhcnJheVByZWZpeEdlbmVyYXRvcnMgPSB7XG4gICAgYnJhY2tldHM6IGZ1bmN0aW9uIGJyYWNrZXRzKHByZWZpeCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZ1bmMtbmFtZS1tYXRjaGluZ1xuICAgICAgICByZXR1cm4gcHJlZml4ICsgJ1tdJztcbiAgICB9LFxuICAgIGluZGljZXM6IGZ1bmN0aW9uIGluZGljZXMocHJlZml4LCBrZXkpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBmdW5jLW5hbWUtbWF0Y2hpbmdcbiAgICAgICAgcmV0dXJuIHByZWZpeCArICdbJyArIGtleSArICddJztcbiAgICB9LFxuICAgIHJlcGVhdDogZnVuY3Rpb24gcmVwZWF0KHByZWZpeCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZ1bmMtbmFtZS1tYXRjaGluZ1xuICAgICAgICByZXR1cm4gcHJlZml4O1xuICAgIH1cbn07XG5cbnZhciB0b0lTTyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nO1xuXG52YXIgZGVmYXVsdHMgPSB7XG4gICAgZGVsaW1pdGVyOiAnJicsXG4gICAgZW5jb2RlOiB0cnVlLFxuICAgIGVuY29kZXI6IHV0aWxzLmVuY29kZSxcbiAgICBlbmNvZGVWYWx1ZXNPbmx5OiBmYWxzZSxcbiAgICBzZXJpYWxpemVEYXRlOiBmdW5jdGlvbiBzZXJpYWxpemVEYXRlKGRhdGUpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBmdW5jLW5hbWUtbWF0Y2hpbmdcbiAgICAgICAgcmV0dXJuIHRvSVNPLmNhbGwoZGF0ZSk7XG4gICAgfSxcbiAgICBza2lwTnVsbHM6IGZhbHNlLFxuICAgIHN0cmljdE51bGxIYW5kbGluZzogZmFsc2Vcbn07XG5cbnZhciBzdHJpbmdpZnkgPSBmdW5jdGlvbiBzdHJpbmdpZnkoIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZnVuYy1uYW1lLW1hdGNoaW5nXG4gICAgb2JqZWN0LFxuICAgIHByZWZpeCxcbiAgICBnZW5lcmF0ZUFycmF5UHJlZml4LFxuICAgIHN0cmljdE51bGxIYW5kbGluZyxcbiAgICBza2lwTnVsbHMsXG4gICAgZW5jb2RlcixcbiAgICBmaWx0ZXIsXG4gICAgc29ydCxcbiAgICBhbGxvd0RvdHMsXG4gICAgc2VyaWFsaXplRGF0ZSxcbiAgICBmb3JtYXR0ZXIsXG4gICAgZW5jb2RlVmFsdWVzT25seVxuKSB7XG4gICAgdmFyIG9iaiA9IG9iamVjdDtcbiAgICBpZiAodHlwZW9mIGZpbHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvYmogPSBmaWx0ZXIocHJlZml4LCBvYmopO1xuICAgIH0gZWxzZSBpZiAob2JqIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICBvYmogPSBzZXJpYWxpemVEYXRlKG9iaik7XG4gICAgfSBlbHNlIGlmIChvYmogPT09IG51bGwpIHtcbiAgICAgICAgaWYgKHN0cmljdE51bGxIYW5kbGluZykge1xuICAgICAgICAgICAgcmV0dXJuIGVuY29kZXIgJiYgIWVuY29kZVZhbHVlc09ubHkgPyBlbmNvZGVyKHByZWZpeCwgZGVmYXVsdHMuZW5jb2RlcikgOiBwcmVmaXg7XG4gICAgICAgIH1cblxuICAgICAgICBvYmogPSAnJztcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG9iaiA9PT0gJ251bWJlcicgfHwgdHlwZW9mIG9iaiA9PT0gJ2Jvb2xlYW4nIHx8IHV0aWxzLmlzQnVmZmVyKG9iaikpIHtcbiAgICAgICAgaWYgKGVuY29kZXIpIHtcbiAgICAgICAgICAgIHZhciBrZXlWYWx1ZSA9IGVuY29kZVZhbHVlc09ubHkgPyBwcmVmaXggOiBlbmNvZGVyKHByZWZpeCwgZGVmYXVsdHMuZW5jb2Rlcik7XG4gICAgICAgICAgICByZXR1cm4gW2Zvcm1hdHRlcihrZXlWYWx1ZSkgKyAnPScgKyBmb3JtYXR0ZXIoZW5jb2RlcihvYmosIGRlZmF1bHRzLmVuY29kZXIpKV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtmb3JtYXR0ZXIocHJlZml4KSArICc9JyArIGZvcm1hdHRlcihTdHJpbmcob2JqKSldO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZXMgPSBbXTtcblxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH1cblxuICAgIHZhciBvYmpLZXlzO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGZpbHRlcikpIHtcbiAgICAgICAgb2JqS2V5cyA9IGZpbHRlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgICAgIG9iaktleXMgPSBzb3J0ID8ga2V5cy5zb3J0KHNvcnQpIDoga2V5cztcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iaktleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGtleSA9IG9iaktleXNbaV07XG5cbiAgICAgICAgaWYgKHNraXBOdWxscyAmJiBvYmpba2V5XSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgICAgICAgICB2YWx1ZXMgPSB2YWx1ZXMuY29uY2F0KHN0cmluZ2lmeShcbiAgICAgICAgICAgICAgICBvYmpba2V5XSxcbiAgICAgICAgICAgICAgICBnZW5lcmF0ZUFycmF5UHJlZml4KHByZWZpeCwga2V5KSxcbiAgICAgICAgICAgICAgICBnZW5lcmF0ZUFycmF5UHJlZml4LFxuICAgICAgICAgICAgICAgIHN0cmljdE51bGxIYW5kbGluZyxcbiAgICAgICAgICAgICAgICBza2lwTnVsbHMsXG4gICAgICAgICAgICAgICAgZW5jb2RlcixcbiAgICAgICAgICAgICAgICBmaWx0ZXIsXG4gICAgICAgICAgICAgICAgc29ydCxcbiAgICAgICAgICAgICAgICBhbGxvd0RvdHMsXG4gICAgICAgICAgICAgICAgc2VyaWFsaXplRGF0ZSxcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZXIsXG4gICAgICAgICAgICAgICAgZW5jb2RlVmFsdWVzT25seVxuICAgICAgICAgICAgKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZXMgPSB2YWx1ZXMuY29uY2F0KHN0cmluZ2lmeShcbiAgICAgICAgICAgICAgICBvYmpba2V5XSxcbiAgICAgICAgICAgICAgICBwcmVmaXggKyAoYWxsb3dEb3RzID8gJy4nICsga2V5IDogJ1snICsga2V5ICsgJ10nKSxcbiAgICAgICAgICAgICAgICBnZW5lcmF0ZUFycmF5UHJlZml4LFxuICAgICAgICAgICAgICAgIHN0cmljdE51bGxIYW5kbGluZyxcbiAgICAgICAgICAgICAgICBza2lwTnVsbHMsXG4gICAgICAgICAgICAgICAgZW5jb2RlcixcbiAgICAgICAgICAgICAgICBmaWx0ZXIsXG4gICAgICAgICAgICAgICAgc29ydCxcbiAgICAgICAgICAgICAgICBhbGxvd0RvdHMsXG4gICAgICAgICAgICAgICAgc2VyaWFsaXplRGF0ZSxcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZXIsXG4gICAgICAgICAgICAgICAgZW5jb2RlVmFsdWVzT25seVxuICAgICAgICAgICAgKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBvcHRzKSB7XG4gICAgdmFyIG9iaiA9IG9iamVjdDtcbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgPyB1dGlscy5hc3NpZ24oe30sIG9wdHMpIDoge307XG5cbiAgICBpZiAob3B0aW9ucy5lbmNvZGVyICE9PSBudWxsICYmIG9wdGlvbnMuZW5jb2RlciAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvcHRpb25zLmVuY29kZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRW5jb2RlciBoYXMgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICB2YXIgZGVsaW1pdGVyID0gdHlwZW9mIG9wdGlvbnMuZGVsaW1pdGVyID09PSAndW5kZWZpbmVkJyA/IGRlZmF1bHRzLmRlbGltaXRlciA6IG9wdGlvbnMuZGVsaW1pdGVyO1xuICAgIHZhciBzdHJpY3ROdWxsSGFuZGxpbmcgPSB0eXBlb2Ygb3B0aW9ucy5zdHJpY3ROdWxsSGFuZGxpbmcgPT09ICdib29sZWFuJyA/IG9wdGlvbnMuc3RyaWN0TnVsbEhhbmRsaW5nIDogZGVmYXVsdHMuc3RyaWN0TnVsbEhhbmRsaW5nO1xuICAgIHZhciBza2lwTnVsbHMgPSB0eXBlb2Ygb3B0aW9ucy5za2lwTnVsbHMgPT09ICdib29sZWFuJyA/IG9wdGlvbnMuc2tpcE51bGxzIDogZGVmYXVsdHMuc2tpcE51bGxzO1xuICAgIHZhciBlbmNvZGUgPSB0eXBlb2Ygb3B0aW9ucy5lbmNvZGUgPT09ICdib29sZWFuJyA/IG9wdGlvbnMuZW5jb2RlIDogZGVmYXVsdHMuZW5jb2RlO1xuICAgIHZhciBlbmNvZGVyID0gdHlwZW9mIG9wdGlvbnMuZW5jb2RlciA9PT0gJ2Z1bmN0aW9uJyA/IG9wdGlvbnMuZW5jb2RlciA6IGRlZmF1bHRzLmVuY29kZXI7XG4gICAgdmFyIHNvcnQgPSB0eXBlb2Ygb3B0aW9ucy5zb3J0ID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy5zb3J0IDogbnVsbDtcbiAgICB2YXIgYWxsb3dEb3RzID0gdHlwZW9mIG9wdGlvbnMuYWxsb3dEb3RzID09PSAndW5kZWZpbmVkJyA/IGZhbHNlIDogb3B0aW9ucy5hbGxvd0RvdHM7XG4gICAgdmFyIHNlcmlhbGl6ZURhdGUgPSB0eXBlb2Ygb3B0aW9ucy5zZXJpYWxpemVEYXRlID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy5zZXJpYWxpemVEYXRlIDogZGVmYXVsdHMuc2VyaWFsaXplRGF0ZTtcbiAgICB2YXIgZW5jb2RlVmFsdWVzT25seSA9IHR5cGVvZiBvcHRpb25zLmVuY29kZVZhbHVlc09ubHkgPT09ICdib29sZWFuJyA/IG9wdGlvbnMuZW5jb2RlVmFsdWVzT25seSA6IGRlZmF1bHRzLmVuY29kZVZhbHVlc09ubHk7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZvcm1hdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgb3B0aW9ucy5mb3JtYXQgPSBmb3JtYXRzWydkZWZhdWx0J107XG4gICAgfSBlbHNlIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGZvcm1hdHMuZm9ybWF0dGVycywgb3B0aW9ucy5mb3JtYXQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZm9ybWF0IG9wdGlvbiBwcm92aWRlZC4nKTtcbiAgICB9XG4gICAgdmFyIGZvcm1hdHRlciA9IGZvcm1hdHMuZm9ybWF0dGVyc1tvcHRpb25zLmZvcm1hdF07XG4gICAgdmFyIG9iaktleXM7XG4gICAgdmFyIGZpbHRlcjtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5maWx0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZmlsdGVyID0gb3B0aW9ucy5maWx0ZXI7XG4gICAgICAgIG9iaiA9IGZpbHRlcignJywgb2JqKTtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucy5maWx0ZXIpKSB7XG4gICAgICAgIGZpbHRlciA9IG9wdGlvbnMuZmlsdGVyO1xuICAgICAgICBvYmpLZXlzID0gZmlsdGVyO1xuICAgIH1cblxuICAgIHZhciBrZXlzID0gW107XG5cbiAgICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICB2YXIgYXJyYXlGb3JtYXQ7XG4gICAgaWYgKG9wdGlvbnMuYXJyYXlGb3JtYXQgaW4gYXJyYXlQcmVmaXhHZW5lcmF0b3JzKSB7XG4gICAgICAgIGFycmF5Rm9ybWF0ID0gb3B0aW9ucy5hcnJheUZvcm1hdDtcbiAgICB9IGVsc2UgaWYgKCdpbmRpY2VzJyBpbiBvcHRpb25zKSB7XG4gICAgICAgIGFycmF5Rm9ybWF0ID0gb3B0aW9ucy5pbmRpY2VzID8gJ2luZGljZXMnIDogJ3JlcGVhdCc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYXJyYXlGb3JtYXQgPSAnaW5kaWNlcyc7XG4gICAgfVxuXG4gICAgdmFyIGdlbmVyYXRlQXJyYXlQcmVmaXggPSBhcnJheVByZWZpeEdlbmVyYXRvcnNbYXJyYXlGb3JtYXRdO1xuXG4gICAgaWYgKCFvYmpLZXlzKSB7XG4gICAgICAgIG9iaktleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIH1cblxuICAgIGlmIChzb3J0KSB7XG4gICAgICAgIG9iaktleXMuc29ydChzb3J0KTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iaktleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGtleSA9IG9iaktleXNbaV07XG5cbiAgICAgICAgaWYgKHNraXBOdWxscyAmJiBvYmpba2V5XSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoc3RyaW5naWZ5KFxuICAgICAgICAgICAgb2JqW2tleV0sXG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICBnZW5lcmF0ZUFycmF5UHJlZml4LFxuICAgICAgICAgICAgc3RyaWN0TnVsbEhhbmRsaW5nLFxuICAgICAgICAgICAgc2tpcE51bGxzLFxuICAgICAgICAgICAgZW5jb2RlID8gZW5jb2RlciA6IG51bGwsXG4gICAgICAgICAgICBmaWx0ZXIsXG4gICAgICAgICAgICBzb3J0LFxuICAgICAgICAgICAgYWxsb3dEb3RzLFxuICAgICAgICAgICAgc2VyaWFsaXplRGF0ZSxcbiAgICAgICAgICAgIGZvcm1hdHRlcixcbiAgICAgICAgICAgIGVuY29kZVZhbHVlc09ubHlcbiAgICAgICAgKSk7XG4gICAgfVxuXG4gICAgdmFyIGpvaW5lZCA9IGtleXMuam9pbihkZWxpbWl0ZXIpO1xuICAgIHZhciBwcmVmaXggPSBvcHRpb25zLmFkZFF1ZXJ5UHJlZml4ID09PSB0cnVlID8gJz8nIDogJyc7XG5cbiAgICByZXR1cm4gam9pbmVkLmxlbmd0aCA+IDAgPyBwcmVmaXggKyBqb2luZWQgOiAnJztcbn07XG5cbn0se1wiLi9mb3JtYXRzXCI6MzMsXCIuL3V0aWxzXCI6Mzd9XSwzNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgaGV4VGFibGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgICAgICAgYXJyYXkucHVzaCgnJScgKyAoKGkgPCAxNiA/ICcwJyA6ICcnKSArIGkudG9TdHJpbmcoMTYpKS50b1VwcGVyQ2FzZSgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXk7XG59KCkpO1xuXG52YXIgY29tcGFjdFF1ZXVlID0gZnVuY3Rpb24gY29tcGFjdFF1ZXVlKHF1ZXVlKSB7XG4gICAgdmFyIG9iajtcblxuICAgIHdoaWxlIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBxdWV1ZS5wb3AoKTtcbiAgICAgICAgb2JqID0gaXRlbS5vYmpbaXRlbS5wcm9wXTtcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgICAgICAgICB2YXIgY29tcGFjdGVkID0gW107XG5cbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgb2JqLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmpbal0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBhY3RlZC5wdXNoKG9ialtqXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpdGVtLm9ialtpdGVtLnByb3BdID0gY29tcGFjdGVkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbn07XG5cbmV4cG9ydHMuYXJyYXlUb09iamVjdCA9IGZ1bmN0aW9uIGFycmF5VG9PYmplY3Qoc291cmNlLCBvcHRpb25zKSB7XG4gICAgdmFyIG9iaiA9IG9wdGlvbnMgJiYgb3B0aW9ucy5wbGFpbk9iamVjdHMgPyBPYmplY3QuY3JlYXRlKG51bGwpIDoge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3VyY2UubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2VbaV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBvYmpbaV0gPSBzb3VyY2VbaV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xufTtcblxuZXhwb3J0cy5tZXJnZSA9IGZ1bmN0aW9uIG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG4gICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHNvdXJjZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSkge1xuICAgICAgICAgICAgdGFyZ2V0LnB1c2goc291cmNlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMucGxhaW5PYmplY3RzIHx8IG9wdGlvbnMuYWxsb3dQcm90b3R5cGVzIHx8ICFoYXMuY2FsbChPYmplY3QucHJvdG90eXBlLCBzb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W3NvdXJjZV0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFt0YXJnZXQsIHNvdXJjZV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdGFyZ2V0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gW3RhcmdldF0uY29uY2F0KHNvdXJjZSk7XG4gICAgfVxuXG4gICAgdmFyIG1lcmdlVGFyZ2V0ID0gdGFyZ2V0O1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgIUFycmF5LmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgICBtZXJnZVRhcmdldCA9IGV4cG9ydHMuYXJyYXlUb09iamVjdCh0YXJnZXQsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgQXJyYXkuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICAgIHNvdXJjZS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpKSB7XG4gICAgICAgICAgICBpZiAoaGFzLmNhbGwodGFyZ2V0LCBpKSkge1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRbaV0gJiYgdHlwZW9mIHRhcmdldFtpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W2ldID0gZXhwb3J0cy5tZXJnZSh0YXJnZXRbaV0sIGl0ZW0sIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2ldID0gaXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHNvdXJjZSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBzb3VyY2Vba2V5XTtcblxuICAgICAgICBpZiAoaGFzLmNhbGwoYWNjLCBrZXkpKSB7XG4gICAgICAgICAgICBhY2Nba2V5XSA9IGV4cG9ydHMubWVyZ2UoYWNjW2tleV0sIHZhbHVlLCBvcHRpb25zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFjY1trZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBtZXJnZVRhcmdldCk7XG59O1xuXG5leHBvcnRzLmFzc2lnbiA9IGZ1bmN0aW9uIGFzc2lnblNpbmdsZVNvdXJjZSh0YXJnZXQsIHNvdXJjZSkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhzb3VyY2UpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICAgICAgYWNjW2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB0YXJnZXQpO1xufTtcblxuZXhwb3J0cy5kZWNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzdHIucmVwbGFjZSgvXFwrL2csICcgJykpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG59O1xuXG5leHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShzdHIpIHtcbiAgICAvLyBUaGlzIGNvZGUgd2FzIG9yaWdpbmFsbHkgd3JpdHRlbiBieSBCcmlhbiBXaGl0ZSAobXNjZGV4KSBmb3IgdGhlIGlvLmpzIGNvcmUgcXVlcnlzdHJpbmcgbGlicmFyeS5cbiAgICAvLyBJdCBoYXMgYmVlbiBhZGFwdGVkIGhlcmUgZm9yIHN0cmljdGVyIGFkaGVyZW5jZSB0byBSRkMgMzk4NlxuICAgIGlmIChzdHIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgdmFyIHN0cmluZyA9IHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnID8gc3RyIDogU3RyaW5nKHN0cik7XG5cbiAgICB2YXIgb3V0ID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGMgPSBzdHJpbmcuY2hhckNvZGVBdChpKTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBjID09PSAweDJEIC8vIC1cbiAgICAgICAgICAgIHx8IGMgPT09IDB4MkUgLy8gLlxuICAgICAgICAgICAgfHwgYyA9PT0gMHg1RiAvLyBfXG4gICAgICAgICAgICB8fCBjID09PSAweDdFIC8vIH5cbiAgICAgICAgICAgIHx8IChjID49IDB4MzAgJiYgYyA8PSAweDM5KSAvLyAwLTlcbiAgICAgICAgICAgIHx8IChjID49IDB4NDEgJiYgYyA8PSAweDVBKSAvLyBhLXpcbiAgICAgICAgICAgIHx8IChjID49IDB4NjEgJiYgYyA8PSAweDdBKSAvLyBBLVpcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBvdXQgKz0gc3RyaW5nLmNoYXJBdChpKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGMgPCAweDgwKSB7XG4gICAgICAgICAgICBvdXQgPSBvdXQgKyBoZXhUYWJsZVtjXTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGMgPCAweDgwMCkge1xuICAgICAgICAgICAgb3V0ID0gb3V0ICsgKGhleFRhYmxlWzB4QzAgfCAoYyA+PiA2KV0gKyBoZXhUYWJsZVsweDgwIHwgKGMgJiAweDNGKV0pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYyA8IDB4RDgwMCB8fCBjID49IDB4RTAwMCkge1xuICAgICAgICAgICAgb3V0ID0gb3V0ICsgKGhleFRhYmxlWzB4RTAgfCAoYyA+PiAxMildICsgaGV4VGFibGVbMHg4MCB8ICgoYyA+PiA2KSAmIDB4M0YpXSArIGhleFRhYmxlWzB4ODAgfCAoYyAmIDB4M0YpXSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGkgKz0gMTtcbiAgICAgICAgYyA9IDB4MTAwMDAgKyAoKChjICYgMHgzRkYpIDw8IDEwKSB8IChzdHJpbmcuY2hhckNvZGVBdChpKSAmIDB4M0ZGKSk7XG4gICAgICAgIG91dCArPSBoZXhUYWJsZVsweEYwIHwgKGMgPj4gMTgpXVxuICAgICAgICAgICAgKyBoZXhUYWJsZVsweDgwIHwgKChjID4+IDEyKSAmIDB4M0YpXVxuICAgICAgICAgICAgKyBoZXhUYWJsZVsweDgwIHwgKChjID4+IDYpICYgMHgzRildXG4gICAgICAgICAgICArIGhleFRhYmxlWzB4ODAgfCAoYyAmIDB4M0YpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xufTtcblxuZXhwb3J0cy5jb21wYWN0ID0gZnVuY3Rpb24gY29tcGFjdCh2YWx1ZSkge1xuICAgIHZhciBxdWV1ZSA9IFt7IG9iajogeyBvOiB2YWx1ZSB9LCBwcm9wOiAnbycgfV07XG4gICAgdmFyIHJlZnMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBxdWV1ZVtpXTtcbiAgICAgICAgdmFyIG9iaiA9IGl0ZW0ub2JqW2l0ZW0ucHJvcF07XG5cbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGtleXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2pdO1xuICAgICAgICAgICAgdmFyIHZhbCA9IG9ialtrZXldO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmIHZhbCAhPT0gbnVsbCAmJiByZWZzLmluZGV4T2YodmFsKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBxdWV1ZS5wdXNoKHsgb2JqOiBvYmosIHByb3A6IGtleSB9KTtcbiAgICAgICAgICAgICAgICByZWZzLnB1c2godmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjb21wYWN0UXVldWUocXVldWUpO1xufTtcblxuZXhwb3J0cy5pc1JlZ0V4cCA9IGZ1bmN0aW9uIGlzUmVnRXhwKG9iaikge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59O1xuXG5leHBvcnRzLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIob2JqKSB7XG4gICAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuICEhKG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iaikpO1xufTtcblxufSx7fV19LHt9LFs1XSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlMWEJoWTJzdlgzQnlaV3gxWkdVdWFuTWlMQ0poYzNObGRITXZjM0pqTDJwekwwTnNZWE56WlhNdlNHVmhaR1Z5TG1weklpd2lZWE56WlhSekwzTnlZeTlxY3k5RGJHRnpjMlZ6TDB4dllXUk5iM0psTG1weklpd2lZWE56WlhSekwzTnlZeTlxY3k5RGJHRnpjMlZ6TDFKMVluSnBZM011YW5NaUxDSmhjM05sZEhNdmMzSmpMMnB6TDBOc1lYTnpaWE12VkdGNGIyNXZiWGxVWVdKekxtcHpJaXdpWVhOelpYUnpMM055WXk5cWN5OXRZV2x1TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJGNGFXOXpMMmx1WkdWNExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyRjRhVzl6TDJ4cFlpOWhaR0Z3ZEdWeWN5OTRhSEl1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WVhocGIzTXZiR2xpTDJGNGFXOXpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkY0YVc5ekwyeHBZaTlqWVc1alpXd3ZRMkZ1WTJWc0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyRjRhVzl6TDJ4cFlpOWpZVzVqWld3dlEyRnVZMlZzVkc5clpXNHVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZWGhwYjNNdmJHbGlMMk5oYm1ObGJDOXBjME5oYm1ObGJDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWhlR2x2Y3k5c2FXSXZZMjl5WlM5QmVHbHZjeTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTloZUdsdmN5OXNhV0l2WTI5eVpTOUpiblJsY21ObGNIUnZjazFoYm1GblpYSXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZWGhwYjNNdmJHbGlMMk52Y21VdlkzSmxZWFJsUlhKeWIzSXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZWGhwYjNNdmJHbGlMMk52Y21VdlpHbHpjR0YwWTJoU1pYRjFaWE4wTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJGNGFXOXpMMnhwWWk5amIzSmxMMlZ1YUdGdVkyVkZjbkp2Y2k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aGVHbHZjeTlzYVdJdlkyOXlaUzl6WlhSMGJHVXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZWGhwYjNNdmJHbGlMMk52Y21VdmRISmhibk5tYjNKdFJHRjBZUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTloZUdsdmN5OXNhV0l2WkdWbVlYVnNkSE11YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WVhocGIzTXZiR2xpTDJobGJIQmxjbk12WW1sdVpDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWhlR2x2Y3k5c2FXSXZhR1ZzY0dWeWN5OWlkRzloTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJGNGFXOXpMMnhwWWk5b1pXeHdaWEp6TDJKMWFXeGtWVkpNTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJGNGFXOXpMMnhwWWk5b1pXeHdaWEp6TDJOdmJXSnBibVZWVWt4ekxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyRjRhVzl6TDJ4cFlpOW9aV3h3WlhKekwyTnZiMnRwWlhNdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdllYaHBiM012YkdsaUwyaGxiSEJsY25NdmFYTkJZbk52YkhWMFpWVlNUQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTloZUdsdmN5OXNhV0l2YUdWc2NHVnljeTlwYzFWU1RGTmhiV1ZQY21sbmFXNHVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZWGhwYjNNdmJHbGlMMmhsYkhCbGNuTXZibTl5YldGc2FYcGxTR1ZoWkdWeVRtRnRaUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTloZUdsdmN5OXNhV0l2YUdWc2NHVnljeTl3WVhKelpVaGxZV1JsY25NdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdllYaHBiM012YkdsaUwyaGxiSEJsY25NdmMzQnlaV0ZrTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJGNGFXOXpMMnhwWWk5MWRHbHNjeTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlwY3kxaWRXWm1aWEl2YVc1a1pYZ3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZjSEp2WTJWemN5OWljbTkzYzJWeUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwzRnpMMnhwWWk5bWIzSnRZWFJ6TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDNGekwyeHBZaTlwYm1SbGVDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OXhjeTlzYVdJdmNHRnljMlV1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12Y1hNdmJHbGlMM04wY21sdVoybG1lUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTl4Y3k5c2FXSXZkWFJwYkhNdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3T3pzN096czdTVU5CVFN4Tk8wRkJRMG9zYTBKQlFWa3NVMEZCV2l4RlFVRjFRanRCUVVGQk96dEJRVUZCT3p0QlFVTnlRaXhUUVVGTExFMUJRVXdzUjBGQll5eFRRVUZrTzBGQlEwRXNVMEZCU3l4UFFVRk1MRWRCUVdVc1ZVRkJWU3hoUVVGV0xFTkJRWGRDTERKQ1FVRjRRaXhEUVVGbU8wRkJRMEVzVTBGQlN5eFBRVUZNTEVkQlFXVXNWVUZCVlN4aFFVRldMRU5CUVhkQ0xIVkNRVUY0UWl4RFFVRm1PMEZCUTBFc1UwRkJTeXhSUVVGTUxFZEJRV2RDTEZWQlFWVXNZVUZCVml4RFFVRjNRaXhuUWtGQmVFSXNRMEZCYUVJN08wRkJSVUVzVTBGQlN5eFBRVUZNTEVOQlFXRXNaMEpCUVdJc1EwRkJPRUlzVDBGQk9VSXNSVUZCZFVNc1ZVRkJReXhEUVVGRUxFVkJRVTg3UVVGRE5VTXNXVUZCU3l4blFrRkJURHRCUVVORUxFdEJSa1E3TzBGQlNVRXNVMEZCU3l4UlFVRk1MRU5CUVdNc1owSkJRV1FzUTBGQkswSXNUMEZCTDBJc1JVRkJkME1zVlVGQlF5eERRVUZFTEVWQlFVODdRVUZETjBNc1VVRkJSU3hqUVVGR08wRkJRMFFzUzBGR1JEdEJRVWRFT3pzN08zVkRRVVZyUWp0QlFVTnFRaXhYUVVGTExFOUJRVXdzUTBGQllTeFRRVUZpTEVOQlFYVkNMRTFCUVhaQ0xFTkJRVGhDTERSQ1FVRTVRanRCUVVORU96czdPenM3UVVGSFNDeFBRVUZQTEU5QlFWQXNSMEZCYVVJc1RVRkJha0k3T3pzN096czdPenM3TzBGRGNrSkJPenM3TzBGQlEwRTdPenM3T3pzN08wbEJSWEZDTEZFN1FVRkRia0lzYjBKQlFWa3NVMEZCV2l4RlFVRjFRanRCUVVGQk96dEJRVUZCT3p0QlFVTnlRaXhUUVVGTExGTkJRVXdzUjBGQmFVSXNVMEZCYWtJN1FVRkRRU3hUUVVGTExFMUJRVXdzUjBGQll5eFRRVUZUTEdGQlFWUXNRMEZCZFVJc2IwSkJRWFpDTEVOQlFXUTdRVUZEUVN4VFFVRkxMRWxCUVV3c1IwRkJXU3hMUVVGYU8wRkJRMEVzVTBGQlN5eEpRVUZNTEVkQlFWa3NRMEZCV2p0QlFVTkJMRk5CUVVzc1NVRkJUQ3hIUVVGWkxFdEJRVXNzVVVGQmFrSTdRVUZEUVN4VFFVRkxMRVZCUVV3c1IwRkJWU3hMUVVGTExFMUJRV1k3UVVGRFFTeFRRVUZMTEV0QlFVd3NSMEZCWVN4TFFVRkxMRk5CUVV3c1EwRkJaU3huUWtGQlppeERRVUZuUXl4elFrRkJhRU1zUTBGQllqczdRVUZGUVN4VFFVRkxMRTFCUVV3c1IwRkJZeXhGUVVGa096dEJRVVZCTEZkQlFVOHNaMEpCUVZBc1EwRkJkMElzVVVGQmVFSXNSVUZCYTBNc1dVRkJUVHRCUVVOMFF5eGhRVUZQTEZGQlFWQXNRMEZCWjBJc1EwRkJhRUlzUlVGQmJVSXNRMEZCYmtJN1FVRkRSQ3hMUVVaRU96dEJRVWxCTEZkQlFVOHNaMEpCUVZBc1EwRkJkMElzVlVGQmVFSXNSVUZCYjBNc1lVRkJTenRCUVVOMlF5eGxRVUZUTEUxQlFWUTdRVUZEUkN4TFFVWkVPenRCUVVsQkxGZEJRVThzWjBKQlFWQXNRMEZCZDBJc1VVRkJlRUlzUlVGQmEwTXNXVUZCVFR0QlFVTjBReXhWUVVGTkxHVkJRV1VzVTBGQlV5eEpRVUZVTEVOQlFXTXNXVUZCWkN4SFFVRTJRaXhUUVVGVExHVkJRVlFzUTBGQmVVSXNVMEZCZEVRc1NVRkJiVVVzVDBGQlR5eFhRVUZRTEVkQlFYRkNMRTFCUVVzc1RVRkJUQ3hEUVVGWkxGbEJRWEJITEVOQlFYSkNPenRCUVVWQkxGVkJRVWtzWjBKQlFXbENMRTlCUVU4c1YwRkJVQ3hIUVVGeFFpeERRVUYwUXl4SlFVRTBReXhEUVVGRExFMUJRVXNzU1VGQmRFUXNSVUZCTkVRN1FVRkRNVVFzWTBGQlN5eFBRVUZNTzBGQlEwRXNZMEZCU3l4SlFVRk1MRWRCUVZrc1NVRkJXanRCUVVORU96dEJRVVZFTEZsQlFVc3NVMEZCVER0QlFVTkVMRXRCVkVRN1FVRlZSRHM3T3pzNFFrRkZVenRCUVVGQk96dEJRVU5TTEZWQlFVMHNUMEZCVHp0QlFVTllMR2RDUVVGUkxIVkNRVVJITzBGQlJWZ3NiVUpCUVZjc1MwRkJTeXhKUVVaTU8wRkJSMWdzYVVKQlFWTXNTMEZCU3l4RlFVaElPMEZCU1Znc1kwRkJUU3hMUVVGTE8wRkJTa0VzVDBGQllqczdRVUZQUVN4elFrRkJUU3hKUVVGT0xFTkJRVmNzVDBGQldDeEZRVUZ2UWl4aFFVRkhMRk5CUVVnc1EwRkJZU3hKUVVGaUxFTkJRWEJDTEVWQlEwY3NTVUZFU0N4RFFVTlJMR1ZCUVU4N1FVRkRXQ3haUVVGSkxFbEJRVW9zUTBGQlV5eEpRVUZVTEVOQlFXTXNTMEZCWkN4RFFVRnZRaXhQUVVGd1FpeERRVUUwUWl4blFrRkJVVHRCUVVOc1F5eHBRa0ZCU3l4VFFVRk1MRU5CUVdVc2EwSkJRV1lzUTBGQmEwTXNWMEZCYkVNc1JVRkJLME1zUzBGQlN5eFBRVUZ3UkR0QlFVTkVMRk5CUmtRN1FVRkhRU3hsUVVGTExFdEJRVXdzUjBGQllTeFBRVUZMTEZOQlFVd3NRMEZCWlN4blFrRkJaaXhEUVVGblF5eHJRa0ZCYUVNc1EwRkJZanRCUVVOQkxHVkJRVXNzU1VGQlRDeEpRVUZoTEVOQlFXSTdRVUZEUVN4bFFVRkxMRWxCUVV3c1IwRkJXU3hMUVVGYU8wRkJRMFFzVDBGU1NDeEZRVk5ITEV0QlZFZ3NRMEZUVXl4bFFVRlBPMEZCUTFvc1owSkJRVkVzUjBGQlVpeERRVUZaTEVkQlFWbzdRVUZEUkN4UFFWaElPMEZCV1VRN096dG5RMEZGVnp0QlFVTldMRlZCUVVrc1UwRkJVeXhGUVVGaU8wRkJRMEVzVjBGQlN5eExRVUZNTEVOQlFWY3NUMEZCV0N4RFFVRnRRaXhuUWtGQlVUdEJRVUZCTEc5RFFVTlVMRXRCUVVzc2NVSkJRVXdzUlVGRVV6dEJRVUZCTEZsQlEycENMRWRCUkdsQ0xIbENRVU5xUWl4SFFVUnBRanM3UVVGRmVrSXNXVUZCU1N4TlFVRk5MRTlCUVU4c1YwRkJVQ3hIUVVGeFFpeERRVUV6UWl4SlFVRm5ReXhOUVVGTkxFTkJRVEZETEVWQlFUWkRPMEZCUXpORExHMUNRVUZUTzBGQlExQXNiVUpCUVU4c1MwRkJTeXhQUVVGTUxFTkJRV0VzUzBGRVlqdEJRVVZRTEd0Q1FVRk5MRXRCUVVzc1QwRkJUQ3hEUVVGaE8wRkJSbG9zVjBGQlZEdEJRVWxFTzBGQlEwWXNUMEZTUkRzN1FVRlZRU3hWUVVGSkxFdEJRVXNzVFVGQlRDeERRVUZaTEV0QlFWb3NTMEZCYzBJc1QwRkJUeXhMUVVFM1FpeEpRVUZ6UXl4UFFVRlBMRXRCUVZBc1MwRkJhVUlzVTBGQk0wUXNSVUZCYzBVN1FVRkRjRVVzWVVGQlN5eE5RVUZNTEVkQlFXTXNUVUZCWkR0QlFVTkJMR0ZCUVVzc1ZVRkJURHRCUVVORU8wRkJRMFk3T3p0cFEwRkZXVHRCUVVOWUxHVkJRVk1zUzBGQlZDeEhRVUZ2UWl4TFFVRkxMRTFCUVV3c1EwRkJXU3hMUVVGb1F6dEJRVU5CTEdGQlFVOHNUMEZCVUN4RFFVRmxMRk5CUVdZc1EwRkJlVUlzUlVGQmVrSXNSVUZCTmtJc1JVRkJOMElzUlVGQmFVTXNTMEZCU3l4TlFVRk1MRU5CUVZrc1NVRkJOME03UVVGRFFTeGhRVUZQTEU5QlFWQXNRMEZCWlN4cFFrRkJaaXhIUVVGdFF5eFJRVUZ1UXp0QlFVTkVPenM3T3pzN2EwSkJOVVZyUWl4Uk96czdPenM3TzBsRFNHWXNUeXhIUVVOS0xHbENRVUZaTEZOQlFWb3NSVUZCZFVNN1FVRkJRVHM3UVVGQlFTeE5RVUZvUWl4UFFVRm5RaXgxUlVGQlRpeEpRVUZOT3p0QlFVRkJPenRCUVVOeVF5eFBRVUZMTEZOQlFVd3NSMEZCYVVJc1UwRkJha0k3UVVGRFFTeFBRVUZMTEU5QlFVd3NSMEZCWlN4VlFVRlZMR2RDUVVGV0xFTkJRVEpDTEdWQlFUTkNMRU5CUVdZN1FVRkRRU3hQUVVGTExGRkJRVXdzUjBGQlowSXNWVUZCVlN4blFrRkJWaXhEUVVFeVFpeG5Ra0ZCTTBJc1EwRkJhRUk3UVVGRFFTeFBRVUZMTEZWQlFVd3NSMEZCYTBJc1NVRkJiRUk3UVVGRFFTeFBRVUZMTEU5QlFVd3NSMEZCWlN4UFFVRm1PenRCUVVWQkxFOUJRVXNzVDBGQlRDeERRVUZoTEU5QlFXSXNRMEZCY1VJc2EwSkJRVlU3UVVGRE4wSXNWMEZCVHl4blFrRkJVQ3hEUVVGM1FpeFBRVUY0UWl4RlFVRnBReXhoUVVGTE8wRkJRM0JETEZGQlFVVXNZMEZCUmp0QlFVTkJMRlZCUVUwc1VVRkJVU3hOUVVGTkxGTkJRVTRzUTBGQlowSXNUMEZCYUVJc1EwRkJkMElzU1VGQmVFSXNRMEZCTmtJc1RVRkJTeXhQUVVGc1F5eEZRVUV5UXl4TlFVRXpReXhEUVVGa096dEJRVVZCTEZWQlFVa3NUMEZCVHl4VlFVRlFMRWRCUVc5Q0xFZEJRWGhDTEVWQlFUWkNPMEZCUXpOQ0xHVkJRVThzVTBGQlVDeERRVUZwUWl4SFFVRnFRaXhEUVVGeFFpeGxRVUZ5UWp0QlFVTkJMR05CUVVzc1VVRkJUQ3hEUVVGakxFdEJRV1FzUlVGQmNVSXNTMEZCY2tJc1EwRkJNa0lzVFVGQk0wSXNSMEZCZFVNc1RVRkJTeXhSUVVGTUxFTkJRV01zUzBGQlpDeEZRVUZ4UWl4cFFrRkJja0lzUjBGQmVVTXNSVUZCYUVZN1FVRkRRU3hqUVVGTExGTkJRVXdzUTBGQlpTeGpRVUZtTEVOQlFUaENMRVZCUVVVc1ZVRkJWU3hSUVVGYUxFVkJRWE5DTEU5QlFVOHNUMEZCTjBJc1JVRkJjME1zVVVGQlVTeFRRVUU1UXl4RlFVRTVRanM3UVVGRlFTeGpRVUZMTEZGQlFVd3NRMEZCWXl4UFFVRmtMRU5CUVhOQ0xGVkJRVU1zVDBGQlJDeEZRVUZWTEVOQlFWWXNSVUZCWjBJN1FVRkRjRU1zWTBGQlNTeE5RVUZOTEV0QlFVNHNTVUZCWlN4VlFVRlZMRTFCUVVzc1ZVRkJiRU1zUlVGQk9FTTdRVUZETlVNc2IwSkJRVkVzUzBGQlVpeERRVUZqTEdOQlFXUXNRMEZCTmtJc1VVRkJOMEk3UVVGRFFTeHJRa0ZCU3l4UFFVRk1MRU5CUVdFc1EwRkJZaXhGUVVGblFpeFRRVUZvUWl4RFFVRXdRaXhOUVVFeFFpeERRVUZwUXl4bFFVRnFRenRCUVVORU8wRkJRMFlzVTBGTVJEdEJRVTlFTEU5QldrUXNUVUZaVHl4SlFVRkpMRTlCUVVvc1JVRkJZVHRCUVVOc1FpeGxRVUZQTEZOQlFWQXNRMEZCYVVJc1IwRkJha0lzUTBGQmNVSXNaMEpCUVhKQ08wRkJRMEVzWTBGQlN5eFJRVUZNTEVOQlFXTXNTMEZCWkN4RlFVRnhRaXhUUVVGeVFpeERRVUVyUWl4SFFVRXZRaXhEUVVGdFF5eG5Ra0ZCYmtNN08wRkJSVUVzWTBGQlN5eFJRVUZNTEVOQlFXTXNUMEZCWkN4RFFVRnpRaXhWUVVGRExFOUJRVVFzUlVGQlZTeERRVUZXTEVWQlFXZENPMEZCUTNCRExHZENRVUZMTEZGQlFVd3NRMEZCWXl4RFFVRmtMRVZCUVdsQ0xGTkJRV3BDTEVOQlFUSkNMRTFCUVROQ0xFTkJRV3RETEdWQlFXeERPMEZCUTBFc1owSkJRVXNzVDBGQlRDeERRVUZoTEVOQlFXSXNSVUZCWjBJc1UwRkJhRUlzUTBGQk1FSXNUVUZCTVVJc1EwRkJhVU1zWlVGQmFrTTdRVUZEUVN4clFrRkJVU3hMUVVGU0xFTkJRV01zWTBGQlpDeERRVUUyUWl4UlFVRTNRanRCUVVOQkxHTkJRVWtzVFVGQlRTeExRVUZXTEVWQlFXbENPMEZCUTJZc2EwSkJRVXNzVVVGQlRDeERRVUZqTEVOQlFXUXNSVUZCYVVJc1UwRkJha0lzUTBGQk1rSXNUVUZCTTBJc1EwRkJhME1zWjBKQlFXeERPMEZCUTBFc2EwSkJRVXNzVDBGQlRDeERRVUZoTEVOQlFXSXNSVUZCWjBJc1UwRkJhRUlzUTBGQk1FSXNUVUZCTVVJc1EwRkJhVU1zWjBKQlFXcERPMEZCUTBRN1FVRkRSaXhUUVZKRU8wRkJVMFE3TzBGQlJVUXNXVUZCU3l4VlFVRk1MRWRCUVd0Q0xFMUJRVXNzVlVGQlRDeExRVUZ2UWl4TFFVRndRaXhIUVVFMFFpeEpRVUUxUWl4SFFVRnRReXhMUVVGeVJEdEJRVU5FTEV0QmFFTkVPMEZCYVVORUxFZEJiRU5FTzBGQmJVTkVMRU03TzBGQlIwZ3NUMEZCVHl4UFFVRlFMRWRCUVdsQ0xFOUJRV3BDT3pzN096czdPMGxET1VOTkxGa3NSMEZEU2l4elFrRkJXU3hUUVVGYUxFVkJRWFZDTzBGQlFVRTdPMEZCUVVFN08wRkJRM0pDTEU5QlFVc3NVMEZCVEN4SFFVRnBRaXhUUVVGcVFqdEJRVU5CTEU5QlFVc3NTVUZCVEN4SFFVRlpMRlZCUVZVc1owSkJRVllzUTBGQk1rSXNNRUpCUVROQ0xFTkJRVm83UVVGRFFTeFBRVUZMTEU5QlFVd3NSMEZCWlN4VlFVRlZMR2RDUVVGV0xFTkJRVEpDTEhWQ1FVRXpRaXhEUVVGbU8wRkJRMEVzVDBGQlN5eFBRVUZNTEVkQlFXVXNWVUZCVlN4aFFVRldMRU5CUVhkQ0xIRkNRVUY0UWl4RFFVRm1PMEZCUTBFc1QwRkJTeXhOUVVGTUxFZEJRV01zVlVGQlZTeGhRVUZXTEVOQlFYZENMR3RDUVVGNFFpeERRVUZrTzBGQlEwRXNUMEZCU3l4WFFVRk1MRWRCUVcxQ0xGVkJRVlVzWVVGQlZpeERRVUYzUWl4dFFrRkJlRUlzUTBGQmJrSTdRVUZEUVN4UFFVRkxMRlZCUVV3c1IwRkJhMElzUTBGQmJFSTdPMEZCUlVFc1QwRkJTeXhQUVVGTUxFTkJRV0VzVDBGQllpeERRVUZ4UWl4clFrRkJWVHRCUVVNM1FpeFhRVUZQTEdkQ1FVRlFMRU5CUVhkQ0xFOUJRWGhDTEVWQlFXbERMR0ZCUVVzN1FVRkJRU3hWUVVNMVFpeExRVVEwUWl4SFFVTnNRaXhGUVVGRkxHRkJRVVlzUTBGQlowSXNUMEZFUlN4RFFVTTFRaXhMUVVRMFFqczdPMEZCUjNCRExGVkJRVWtzVlVGQlZTeE5RVUZMTEZWQlFXNUNMRVZCUVN0Q08wRkJRemRDTEdOQlFVc3NUMEZCVEN4RFFVRmhMRTFCUVVzc1ZVRkJiRUlzUlVGQk9FSXNVMEZCT1VJc1EwRkJkME1zVFVGQmVFTXNRMEZCSzBNc1VVRkJMME03UVVGRFFTeGpRVUZMTEVsQlFVd3NRMEZCVlN4TlFVRkxMRlZCUVdZc1JVRkJNa0lzVTBGQk0wSXNRMEZCY1VNc1RVRkJja01zUTBGQk5FTXNVVUZCTlVNN08wRkJSVUVzWTBGQlN5eFBRVUZNTEVOQlFXRXNTMEZCWWl4RlFVRnZRaXhUUVVGd1FpeERRVUU0UWl4SFFVRTVRaXhEUVVGclF5eFJRVUZzUXp0QlFVTkJMR05CUVVzc1NVRkJUQ3hEUVVGVkxFdEJRVllzUlVGQmFVSXNVMEZCYWtJc1EwRkJNa0lzUjBGQk0wSXNRMEZCSzBJc1VVRkJMMEk3TzBGQlJVRXNZMEZCU3l4VlFVRk1MRWRCUVd0Q0xFdEJRV3hDTzBGQlEwUTdPMEZCUlVRc1ZVRkJTU3hQUVVGUExGVkJRVkFzU1VGQmNVSXNSMEZCZWtJc1JVRkJPRUk3UVVGRE5VSXNZMEZCU3l4UFFVRk1MRU5CUVdFc1UwRkJZaXhEUVVGMVFpeEhRVUYyUWl4RFFVRXlRaXhyUWtGQk0wSTdRVUZEUVN4alFVRkxMRmRCUVV3c1EwRkJhVUlzVTBGQmFrSXNRMEZCTWtJc1RVRkJNMElzUTBGQmEwTXNaVUZCYkVNN1FVRkRSRHRCUVVOR0xFdEJha0pFTzBGQmEwSkVMRWRCYmtKRU96dEJRWEZDUVN4UFFVRkxMRTFCUVV3c1EwRkJXU3huUWtGQldpeERRVUUyUWl4UFFVRTNRaXhGUVVGelF5eFpRVUZOTzBGQlF6RkRMRkZCUVVrc1QwRkJUeXhWUVVGUUxFbEJRWEZDTEVkQlFYcENMRVZCUVRoQ08wRkJRelZDTEZsQlFVc3NUMEZCVEN4RFFVRmhMRk5CUVdJc1EwRkJkVUlzVFVGQmRrSXNRMEZCT0VJc2EwSkJRVGxDTzBGQlEwRXNXVUZCU3l4WFFVRk1MRU5CUVdsQ0xGTkJRV3BDTEVOQlFUSkNMRWRCUVROQ0xFTkJRU3RDTEdWQlFTOUNPMEZCUTBRN1FVRkRSaXhIUVV4RU8wRkJUVVFzUXpzN1FVRkhTQ3hQUVVGUExFOUJRVkFzUjBGQmFVSXNXVUZCYWtJN096czdPMEZEZUVOQk96czdPMEZCUTBFN096czdRVUZEUVRzN096dEJRVU5CT3pzN096czdRVUZIUVN4SlFVRk5MRk5CUVZNc2NVSkJRVmNzVTBGQlV5eGhRVUZVTEVOQlFYVkNMR05CUVhaQ0xFTkJRVmdzUTBGQlpqczdRVUZGUVN4SlFVRkpMRk5CUVZNc1lVRkJWQ3hEUVVGMVFpeDFRa0ZCZGtJc1EwRkJTaXhGUVVGeFJEdEJRVU51UkN4TlFVRk5MR05CUVdNc2MwSkJRVmtzVTBGQlV5eGhRVUZVTEVOQlFYVkNMSFZDUVVGMlFpeERRVUZhTEVWQlFUWkVMRWxCUVRkRUxFTkJRWEJDTzBGQlEwUTdPMEZCUlVRc1NVRkJTU3hUUVVGVExHRkJRVlFzUTBGQmRVSXNiMEpCUVhaQ0xFTkJRVW9zUlVGQmEwUTdRVUZEYUVRc1RVRkJUU3hQUVVGUExESkNRVUZwUWl4VFFVRlRMR0ZCUVZRc1EwRkJkVUlzYjBKQlFYWkNMRU5CUVdwQ0xFTkJRV0k3UVVGRFJEczdRVUZGUkN4SlFVRkpMRk5CUVZNc1lVRkJWQ3hEUVVGMVFpeGxRVUYyUWl4RFFVRktMRVZCUVRaRE8wRkJRek5ETEUxQlFVMHNZMEZCWXl4elFrRkJXU3hUUVVGVExHRkJRVlFzUTBGQmRVSXNaVUZCZGtJc1EwRkJXaXhGUVVGeFJDeExRVUZ5UkN4RFFVRndRanRCUVVORU96dEJRVVZFTEVsQlFVa3NVMEZCVXl4aFFVRlVMRU5CUVhWQ0xIbENRVUYyUWl4RFFVRktMRVZCUVhWRU8wRkJRM0pFTEUxQlFVMHNWMEZCVnl4MVFrRkJZU3hUUVVGVExHRkJRVlFzUTBGQmRVSXNlVUpCUVhaQ0xFTkJRV0lzUTBGQmFrSTdRVUZEUkRzN08wRkRkRUpFT3pzN1FVTkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0QlEzQk1RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTNCRVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEyNUNRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU42UkVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEweEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZETDBWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRjRVJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEyeENRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEZEVaQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEzSkNRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRNVUpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN08wRkRjRUpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMEZEYUVkQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5ZUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTndRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEYkVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTmtRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRja1JCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOa1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRjRVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFwQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOeVJFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZETTBKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUXk5VFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTnlRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTjRURUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGJFSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOWVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTTVTMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEYkU1Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWlobWRXNWpkR2x2YmlCbEtIUXNiaXh5S1h0bWRXNWpkR2x2YmlCektHOHNkU2w3YVdZb0lXNWJiMTBwZTJsbUtDRjBXMjlkS1h0MllYSWdZVDEwZVhCbGIyWWdjbVZ4ZFdseVpUMDlYQ0ptZFc1amRHbHZibHdpSmlaeVpYRjFhWEpsTzJsbUtDRjFKaVpoS1hKbGRIVnliaUJoS0c4c0lUQXBPMmxtS0drcGNtVjBkWEp1SUdrb2J5d2hNQ2s3ZG1GeUlHWTlibVYzSUVWeWNtOXlLRndpUTJGdWJtOTBJR1pwYm1RZ2JXOWtkV3hsSUNkY0lpdHZLMXdpSjF3aUtUdDBhSEp2ZHlCbUxtTnZaR1U5WENKTlQwUlZURVZmVGs5VVgwWlBWVTVFWENJc1puMTJZWElnYkQxdVcyOWRQWHRsZUhCdmNuUnpPbnQ5ZlR0MFcyOWRXekJkTG1OaGJHd29iQzVsZUhCdmNuUnpMR1oxYm1OMGFXOXVLR1VwZTNaaGNpQnVQWFJiYjExYk1WMWJaVjA3Y21WMGRYSnVJSE1vYmo5dU9tVXBmU3hzTEd3dVpYaHdiM0owY3l4bExIUXNiaXh5S1gxeVpYUjFjbTRnYmx0dlhTNWxlSEJ2Y25SemZYWmhjaUJwUFhSNWNHVnZaaUJ5WlhGMWFYSmxQVDFjSW1aMWJtTjBhVzl1WENJbUpuSmxjWFZwY21VN1ptOXlLSFpoY2lCdlBUQTdienh5TG14bGJtZDBhRHR2S3lzcGN5aHlXMjlkS1R0eVpYUjFjbTRnYzMwcElpd2lZMnhoYzNNZ1NHVmhaR1Z5SUh0Y2JpQWdZMjl1YzNSeWRXTjBiM0lvWTI5dWRHRnBibVZ5S1NCN1hHNGdJQ0FnZEdocGN5NW9aV0ZrWlhJZ1BTQmpiMjUwWVdsdVpYSmNiaUFnSUNCMGFHbHpMblJ5YVdkblpYSWdQU0JqYjI1MFlXbHVaWEl1Y1hWbGNubFRaV3hsWTNSdmNpZ25Mbk5wZEdVdGFHVmhaR1Z5WDE5dVlYWXRkSEpwWjJkbGNpY3BYRzRnSUNBZ2RHaHBjeTUzY21Gd2NHVnlJRDBnWTI5dWRHRnBibVZ5TG5GMVpYSjVVMlZzWldOMGIzSW9KeTV6YVhSbExXaGxZV1JsY2w5ZmQzSmhjSEJsY2ljcFhHNGdJQ0FnZEdocGN5NWtjbTl3Ukc5M2JpQTlJR052Ym5SaGFXNWxjaTV4ZFdWeWVWTmxiR1ZqZEc5eUtDY3VaSEp2Y0Y5ZmRISnBaMmRsY2ljcFhHNWNiaUFnSUNCMGFHbHpMblJ5YVdkblpYSXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25ZMnhwWTJzbkxDQW9aU2tnUFQ0Z2UxeHVJQ0FnSUNBZ2RHaHBjeTUwYjJkbmJHVldhWE5wWW1sc2FYUjVLQ2xjYmlBZ0lDQjlLVnh1WEc0Z0lDQWdkR2hwY3k1a2NtOXdSRzkzYmk1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkamJHbGpheWNzSUNobEtTQTlQaUI3WEc0Z0lDQWdJQ0JsTG5CeVpYWmxiblJFWldaaGRXeDBLQ2xjYmlBZ0lDQjlLVnh1SUNCOVhHNWNiaUFnZEc5bloyeGxWbWx6YVdKcGJHbDBlU2dwSUh0Y2JpQWdJQ0IwYUdsekxuZHlZWEJ3WlhJdVkyeGhjM05NYVhOMExuUnZaMmRzWlNnbmMybDBaUzFvWldGa1pYSmZYM2R5WVhCd1pYSXRMV2hwWkdVbktWeHVJQ0I5WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdTR1ZoWkdWeVhHNGlMQ0pwYlhCdmNuUWdZWGhwYjNNZ1puSnZiU0FuWVhocGIzTW5YRzVwYlhCdmNuUWdjWE1nWm5KdmJTQW5jWE1uWEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRXh2WVdSTmIzSmxJSHRjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9ZMjl1ZEdGcGJtVnlLU0I3WEc0Z0lDQWdkR2hwY3k1amIyNTBZV2x1WlhJZ1BTQmpiMjUwWVdsdVpYSmNiaUFnSUNCMGFHbHpMbVp2YjNSbGNpQTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb0oyWnZiM1JsY2k1emFYUmxMV1p2YjNSbGNpY3BYRzRnSUNBZ2RHaHBjeTUzWVdsMElEMGdabUZzYzJWY2JpQWdJQ0IwYUdsekxuQmhaMlVnUFNBeFhHNGdJQ0FnZEdocGN5NWtZWFJsSUQwZ2RtRnljeTV3YjNOMFJHRjBaVnh1SUNBZ0lIUm9hWE11YVdRZ1BTQjJZWEp6TG5CdmMzUkpSRnh1SUNBZ0lIUm9hWE11Y0c5emRITWdQU0IwYUdsekxtTnZiblJoYVc1bGNpNXhkV1Z5ZVZObGJHVmpkRzl5UVd4c0tDY3VjSFZpYkdsallYUnBiMjR0ZDNKaGNIQmxjaWNwWEc1Y2JpQWdJQ0IwYUdsekxuTmxiR1ZqZENBOUlIdDlYRzVjYmlBZ0lDQjNhVzVrYjNjdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnbmIyNXNiMkZrSnl3Z0tDa2dQVDRnZTF4dUlDQWdJQ0FnZDJsdVpHOTNMbk5qY205c2JGUnZLREFzSURBcFhHNGdJQ0FnZlNsY2JseHVJQ0FnSUhkcGJtUnZkeTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2R3YjNCemRHRjBaU2NzSUdVZ1BUNGdlMXh1SUNBZ0lDQWdiRzlqWVhScGIyNHVjbVZzYjJGa0tDbGNiaUFnSUNCOUtWeHVYRzRnSUNBZ2QybHVaRzkzTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjNOamNtOXNiQ2NzSUNncElEMCtJSHRjYmlBZ0lDQWdJR052Ym5OMElITmpjbTlzYkVKdmRIUnZiU0E5SUdSdlkzVnRaVzUwTG1KdlpIa3VjMk55YjJ4c1NHVnBaMmgwSUMwZ1pHOWpkVzFsYm5RdVpHOWpkVzFsYm5SRmJHVnRaVzUwTG5OamNtOXNiRlJ2Y0NBdElDaDNhVzVrYjNjdWFXNXVaWEpJWldsbmFIUWdLeUIwYUdsekxtWnZiM1JsY2k1dlptWnpaWFJJWldsbmFIUXBYRzVjYmlBZ0lDQWdJR2xtSUNoelkzSnZiR3hDYjNSMGIyMGdQRDBnS0hkcGJtUnZkeTVwYm01bGNraGxhV2RvZENBcUlESXBJQ1ltSUNGMGFHbHpMbmRoYVhRcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1aFpHUlFiM04wS0NsY2JpQWdJQ0FnSUNBZ2RHaHBjeTUzWVdsMElEMGdkSEoxWlZ4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCMGFHbHpMbWRsZEVGamRHbDJaU2dwWEc0Z0lDQWdmU2xjYmlBZ2ZWeHVYRzRnSUdGa1pGQnZjM1FvS1NCN1hHNGdJQ0FnWTI5dWMzUWdaR0YwWVNBOUlIdGNiaUFnSUNBZ0lHRmpkR2x2YmpvZ0ozQjFZbXhwWTJGMGFXOXVYMnh2WVdSZmJXOXlaU2NzWEc0Z0lDQWdJQ0J3YjNOMFgyUmhkR1U2SUhSb2FYTXVaR0YwWlN4Y2JpQWdJQ0FnSUhCdmMzUmZhV1E2SUhSb2FYTXVhV1FzWEc0Z0lDQWdJQ0J3WVdkbE9pQjBhR2x6TG5CaFoyVmNiaUFnSUNCOVhHNWNiaUFnSUNCaGVHbHZjeTV3YjNOMEtHRnFZWGgxY213c0lIRnpMbk4wY21sdVoybG1lU2hrWVhSaEtTbGNiaUFnSUNBZ0lDNTBhR1Z1S0hKbGN5QTlQaUI3WEc0Z0lDQWdJQ0FnSUhKbGN5NWtZWFJoTG1SaGRHRXVjRzl6ZEhNdVptOXlSV0ZqYUNod2IzTjBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJuUmhhVzVsY2k1cGJuTmxjblJCWkdwaFkyVnVkRWhVVFV3b0oySmxabTl5WldWdVpDY3NJSEJ2YzNRdVkyOXVkR1Z1ZENsY2JpQWdJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lDQWdkR2hwY3k1d2IzTjBjeUE5SUhSb2FYTXVZMjl1ZEdGcGJtVnlMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29KeTV6YVc1bmJHVmZYM2R5WVhCd1pYSW5LVnh1SUNBZ0lDQWdJQ0IwYUdsekxuQmhaMlVnS3owZ01WeHVJQ0FnSUNBZ0lDQjBhR2x6TG5kaGFYUWdQU0JtWVd4elpWeHVJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lDNWpZWFJqYUNobGNuSWdQVDRnZTF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5aGxjbklwWEc0Z0lDQWdJQ0I5S1Z4dUlDQjlYRzVjYmlBZ1oyVjBRV04wYVhabEtDa2dlMXh1SUNBZ0lHeGxkQ0J6Wld4bFkzUWdQU0I3ZlZ4dUlDQWdJSFJvYVhNdWNHOXpkSE11Wm05eVJXRmphQ2h3YjNOMElEMCtJSHRjYmlBZ0lDQWdJR052Ym5OMElIc2dkRzl3SUgwZ1BTQndiM04wTG1kbGRFSnZkVzVrYVc1blEyeHBaVzUwVW1WamRDZ3BYRzRnSUNBZ0lDQnBaaUFvZEc5d0lEd2dkMmx1Wkc5M0xtbHVibVZ5U0dWcFoyaDBJQzhnTWlBbUppQjBiM0FnUGlBd0tTQjdYRzRnSUNBZ0lDQWdJSE5sYkdWamRDQTlJSHRjYmlBZ0lDQWdJQ0FnSUNCMGFYUnNaVG9nY0c5emRDNWtZWFJoYzJWMExuUnBkR3hsTEZ4dUlDQWdJQ0FnSUNBZ0lIQmhkR2c2SUhCdmMzUXVaR0YwWVhObGRDNXdZWFJvWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1Z4dVhHNGdJQ0FnYVdZZ0tIUm9hWE11YzJWc1pXTjBMblJwZEd4bElDRTlQU0J6Wld4bFkzUXVkR2wwYkdVZ0ppWWdjMlZzWldOMExuUnBkR3hsSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJSFJvYVhNdWMyVnNaV04wSUQwZ2MyVnNaV04wWEc0Z0lDQWdJQ0IwYUdsekxuVndaR0YwWlZCaFoyVW9LVnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSFZ3WkdGMFpWQmhaMlVvS1NCN1hHNGdJQ0FnWkc5amRXMWxiblF1ZEdsMGJHVWdQU0JnSkh0MGFHbHpMbk5sYkdWamRDNTBhWFJzWlgwZ0xTQkZZM0pwZEhWeVpYTWdUblZ0WlhKcGNYVmxjMkJjYmlBZ0lDQjNhVzVrYjNjdWFHbHpkRzl5ZVM1d2RYTm9VM1JoZEdVb2UzMHNJQ2NuTENCMGFHbHpMbk5sYkdWamRDNXdZWFJvS1Z4dUlDQWdJSGRwYm1SdmR5NW9hWE4wYjNKNUxuTmpjbTlzYkZKbGMzUnZjbUYwYVc5dUlEMGdKMjFoYm5WaGJDZGNiaUFnZlZ4dWZWeHVJaXdpWTJ4aGMzTWdVblZpY21samN5QjdYRzRnSUdOdmJuTjBjblZqZEc5eUtHTnZiblJoYVc1bGNpd2daR1Z6YTNSdmNDQTlJSFJ5ZFdVcElIdGNiaUFnSUNCMGFHbHpMbU52Ym5SaGFXNWxjaUE5SUdOdmJuUmhhVzVsY2x4dUlDQWdJSFJvYVhNdVluVjBkRzl1Y3lBOUlHTnZiblJoYVc1bGNpNXhkV1Z5ZVZObGJHVmpkRzl5UVd4c0tDY3VhWFJsYlY5ZlluVjBkRzl1SnlsY2JpQWdJQ0IwYUdsekxuZHlZWEJ3WlhKeklEMGdZMjl1ZEdGcGJtVnlMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29KeTVwZEdWdFgxOTNjbUZ3Y0dWeUp5bGNiaUFnSUNCMGFHbHpMbXhoYzNSZmFXNWtaWGdnUFNCdWRXeHNYRzRnSUNBZ2RHaHBjeTVrWlhOcmRHOXdJRDBnWkdWemEzUnZjRnh1WEc0Z0lDQWdkR2hwY3k1aWRYUjBiMjV6TG1admNrVmhZMmdvWW5WMGRHOXVJRDArSUh0Y2JpQWdJQ0FnSUdKMWRIUnZiaTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RqYkdsamF5Y3NJR1VnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQmxMbkJ5WlhabGJuUkVaV1poZFd4MEtDbGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2FXNWtaWGdnUFNCQmNuSmhlUzV3Y205MGIzUjVjR1V1YVc1a1pYaFBaaTVqWVd4c0tIUm9hWE11WW5WMGRHOXVjeXdnWW5WMGRHOXVLVnh1WEc0Z0lDQWdJQ0FnSUdsbUlDaDNhVzVrYjNjdWFXNXVaWEpYYVdSMGFDQThJRGN3TUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR0oxZEhSdmJpNWpiR0Z6YzB4cGMzUXVZV1JrS0NkdGIySnBiR1V0WVdOMGFYWmxKeWxjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbmR5WVhCd1pYSnpXMmx1WkdWNFhTNXpkSGxzWlM1b1pXbG5hSFFnUFNCZ0pIdDBhR2x6TG5keVlYQndaWEp6VzJsdVpHVjRYUzVqYUdsc1pFVnNaVzFsYm5SRGIzVnVkQ0FxSURZd2ZYQjRZRnh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVZMjl1ZEdGcGJtVnlMbk5qY205c2JFbHVkRzlXYVdWM0tIc2dZbVZvWVhacGIzSTZJQ2R6Ylc5dmRHZ25MQ0JpYkc5amF6b2dKM04wWVhKMEp5d2dhVzVzYVc1bE9pQW5ibVZoY21WemRDY2dmU2xjYmx4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11ZDNKaGNIQmxjbk11Wm05eVJXRmphQ2dvZDNKaGNIQmxjaXdnYVNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2tnSVQwOUlHbHVaR1Y0SUh4OElHbHVaR1Y0SUQwOVBTQjBhR2x6TG14aGMzUmZhVzVrWlhncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2QzSmhjSEJsY2k1emRIbHNaUzV5WlcxdmRtVlFjbTl3WlhKMGVTZ25hR1ZwWjJoMEp5bGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVpZFhSMGIyNXpXMmxkTG1Oc1lYTnpUR2x6ZEM1eVpXMXZkbVVvSjIxdlltbHNaUzFoWTNScGRtVW5LVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJSDBwWEc1Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaGtaWE5yZEc5d0tTQjdYRzRnSUNBZ0lDQWdJQ0FnWW5WMGRHOXVMbU5zWVhOelRHbHpkQzVoWkdRb0oyUmxjMnQwYjNBdFlXTjBhWFpsSnlsY2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG5keVlYQndaWEp6VzJsdVpHVjRYUzVqYkdGemMweHBjM1F1WVdSa0tDZGtaWE5yZEc5d0xXRmpkR2wyWlNjcFhHNWNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxuZHlZWEJ3WlhKekxtWnZja1ZoWTJnb0tIZHlZWEJ3WlhJc0lHa3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWQzSmhjSEJsY25OYmFWMHVZMnhoYzNOTWFYTjBMbkpsYlc5MlpTZ25iVzlpYVd4bExXRmpkR2wyWlNjcFhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtSjFkSFJ2Ym5OYmFWMHVZMnhoYzNOTWFYTjBMbkpsYlc5MlpTZ25iVzlpYVd4bExXRmpkR2wyWlNjcFhHNGdJQ0FnSUNBZ0lDQWdJQ0IzY21Gd2NHVnlMbk4wZVd4bExuSmxiVzkyWlZCeWIzQmxjblI1S0Nkb1pXbG5hSFFuS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0drZ0lUMDlJR2x1WkdWNEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZDNKaGNIQmxjbk5iYVYwdVkyeGhjM05NYVhOMExuSmxiVzkyWlNnblpHVnphM1J2Y0MxaFkzUnBkbVVuS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtSjFkSFJ2Ym5OYmFWMHVZMnhoYzNOTWFYTjBMbkpsYlc5MlpTZ25aR1Z6YTNSdmNDMWhZM1JwZG1VbktWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbXhoYzNSZmFXNWtaWGdnUFNCMGFHbHpMbXhoYzNSZmFXNWtaWGdnUFQwOUlHbHVaR1Y0SUQ4Z2JuVnNiQ0E2SUdsdVpHVjRYRzRnSUNBZ0lDQjlLVnh1SUNBZ0lIMHBYRzRnSUgxY2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JTZFdKeWFXTnpYRzRpTENKamJHRnpjeUJVWVhodmJtOXRlVlJoWW5NZ2UxeHVJQ0JqYjI1emRISjFZM1J2Y2loamIyNTBZV2x1WlhJcElIdGNiaUFnSUNCMGFHbHpMbU52Ym5SaGFXNWxjaUE5SUdOdmJuUmhhVzVsY2x4dUlDQWdJSFJvYVhNdWRHRmljeUE5SUdOdmJuUmhhVzVsY2k1eGRXVnllVk5sYkdWamRHOXlRV3hzS0NkelpXTjBhVzl1TG5KbGJHRjBaV1JmWDNObFkzUnBiMjRuS1Z4dUlDQWdJSFJvYVhNdVluVjBkRzl1Y3lBOUlHTnZiblJoYVc1bGNpNXhkV1Z5ZVZObGJHVmpkRzl5UVd4c0tDZGlkWFIwYjI0dWFHVmhaR1Z5WDE5aWRYUjBiMjRuS1Z4dUlDQWdJSFJvYVhNdWQzSmhjSEJsY2lBOUlHTnZiblJoYVc1bGNpNXhkV1Z5ZVZObGJHVmpkRzl5S0NjdWNtVnNZWFJsWkY5ZlkyOXVkR0ZwYm1WeUp5bGNiaUFnSUNCMGFHbHpMbkpsZEhWeWJpQTlJR052Ym5SaGFXNWxjaTV4ZFdWeWVWTmxiR1ZqZEc5eUtDY3VjbVZzWVhSbFpGOWZjbVYwZFhKdUp5bGNiaUFnSUNCMGFHbHpMblJoWW5OWGNtRndjR1Z5SUQwZ1kyOXVkR0ZwYm1WeUxuRjFaWEo1VTJWc1pXTjBiM0lvSnk1eVpXeGhkR1ZrWDE5M2NtRndjR1Z5SnlsY2JpQWdJQ0IwYUdsekxteGhjM1JmYVc1a1pYZ2dQU0F3WEc1Y2JpQWdJQ0IwYUdsekxtSjFkSFJ2Ym5NdVptOXlSV0ZqYUNoaWRYUjBiMjRnUFQ0Z2UxeHVJQ0FnSUNBZ1luVjBkRzl1TG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjJOc2FXTnJKeXdnWlNBOVBpQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElIc2dhVzVrWlhnZ2ZTQTlJR1V1WTNWeWNtVnVkRlJoY21kbGRDNWtZWFJoYzJWMFhHNWNiaUFnSUNBZ0lDQWdhV1lnS0dsdVpHVjRJQ0U5UFNCMGFHbHpMbXhoYzNSZmFXNWtaWGdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG1KMWRIUnZibk5iZEdocGN5NXNZWE4wWDJsdVpHVjRYUzVqYkdGemMweHBjM1F1Y21WdGIzWmxLQ2RoWTNScGRtVW5LVnh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVkR0ZpYzF0MGFHbHpMbXhoYzNSZmFXNWtaWGhkTG1Oc1lYTnpUR2x6ZEM1eVpXMXZkbVVvSjJGamRHbDJaU2NwWEc1Y2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG1KMWRIUnZibk5iYVc1a1pYaGRMbU5zWVhOelRHbHpkQzVoWkdRb0oyRmpkR2wyWlNjcFhHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1MFlXSnpXMmx1WkdWNFhTNWpiR0Z6YzB4cGMzUXVZV1JrS0NkaFkzUnBkbVVuS1Z4dVhHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1c1lYTjBYMmx1WkdWNElEMGdhVzVrWlhoY2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtSUNoM2FXNWtiM2N1YVc1dVpYSlhhV1IwYUNBOFBTQTNNREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG5keVlYQndaWEl1WTJ4aGMzTk1hWE4wTG1Ga1pDZ25ZMjl1ZEdGcGJtVnlMUzF6Ykdsa1pTY3BYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NTBZV0p6VjNKaGNIQmxjaTVqYkdGemMweHBjM1F1Y21WdGIzWmxLQ2QzY21Gd2NHVnlMUzFvYVdSbEp5bGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU2xjYmlBZ0lDQjlLVnh1WEc0Z0lDQWdkR2hwY3k1eVpYUjFjbTR1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduWTJ4cFkyc25MQ0FvS1NBOVBpQjdYRzRnSUNBZ0lDQnBaaUFvZDJsdVpHOTNMbWx1Ym1WeVYybGtkR2dnUEQwZ056QXdLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkM0poY0hCbGNpNWpiR0Z6YzB4cGMzUXVjbVZ0YjNabEtDZGpiMjUwWVdsdVpYSXRMWE5zYVdSbEp5bGNiaUFnSUNBZ0lDQWdkR2hwY3k1MFlXSnpWM0poY0hCbGNpNWpiR0Z6YzB4cGMzUXVZV1JrS0NkM2NtRndjR1Z5TFMxb2FXUmxKeWxjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVnh1SUNCOVhHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnVkdGNGIyNXZiWGxVWVdKelhHNGlMQ0pwYlhCdmNuUWdTR1ZoWkdWeUlHWnliMjBnSnk0dlEyeGhjM05sY3k5SVpXRmtaWEluWEc1cGJYQnZjblFnVW5WaWNtbGpjeUJtY205dElDY3VMME5zWVhOelpYTXZVblZpY21samN5ZGNibWx0Y0c5eWRDQlVZWGh2Ym05dGVWUmhZbk1nWm5KdmJTQW5MaTlEYkdGemMyVnpMMVJoZUc5dWIyMTVWR0ZpY3lkY2JtbHRjRzl5ZENCTWIyRmtUVzl5WlNCbWNtOXRJQ2N1TDBOc1lYTnpaWE12VEc5aFpFMXZjbVVuWEc1Y2JseHVZMjl1YzNRZ2FHVmhaR1Z5SUQwZ2JtVjNJRWhsWVdSbGNpaGtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0NjdWMybDBaUzFvWldGa1pYSW5LU2xjYmx4dWFXWWdLR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb0p5NW9iMjFsTFhObFkzUnBiMjR1Y25WaWNtbGpjeWNwS1NCN1hHNGdJR052Ym5OMElHaHZiV1ZTZFdKeWFXTnpJRDBnYm1WM0lGSjFZbkpwWTNNb1pHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZjaWduTG1odmJXVXRjMlZqZEdsdmJpNXlkV0p5YVdOekp5a3NJSFJ5ZFdVcFhHNTlYRzVjYm1sbUlDaGtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0NjdWRHRjRiMjV2YlhsZlgzSmxiR0YwWldRbktTa2dlMXh1SUNCamIyNXpkQ0IwWVdKeklEMGdibVYzSUZSaGVHOXViMjE1VkdGaWN5aGtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0NjdWRHRjRiMjV2YlhsZlgzSmxiR0YwWldRbktTbGNibjFjYmx4dWFXWWdLR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb0p5NXdZV2RsTFhKMVluSnBZM01uS1NrZ2UxeHVJQ0JqYjI1emRDQndZV2RsVW5WaWNtbGpjeUE5SUc1bGR5QlNkV0p5YVdOektHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvSnk1d1lXZGxMWEoxWW5KcFkzTW5LU3dnWm1Gc2MyVXBYRzU5WEc1Y2JtbG1JQ2hrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtDY3VjSFZpYkdsallYUnBiMjVmWDJOdmJuUmhhVzVsY2ljcEtTQjdYRzRnSUdOdmJuTjBJR3h2WVdSTmIzSmxJRDBnYm1WM0lFeHZZV1JOYjNKbEtHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvSnk1d2RXSnNhV05oZEdsdmJsOWZZMjl1ZEdGcGJtVnlKeWtwWEc1OUlpd2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnlaWEYxYVhKbEtDY3VMMnhwWWk5aGVHbHZjeWNwT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWRtRnlJSFYwYVd4eklEMGdjbVZ4ZFdseVpTZ25MaTh1TGk5MWRHbHNjeWNwTzF4dWRtRnlJSE5sZEhSc1pTQTlJSEpsY1hWcGNtVW9KeTR2TGk0dlkyOXlaUzl6WlhSMGJHVW5LVHRjYm5aaGNpQmlkV2xzWkZWU1RDQTlJSEpsY1hWcGNtVW9KeTR2TGk0dmFHVnNjR1Z5Y3k5aWRXbHNaRlZTVENjcE8xeHVkbUZ5SUhCaGNuTmxTR1ZoWkdWeWN5QTlJSEpsY1hWcGNtVW9KeTR2TGk0dmFHVnNjR1Z5Y3k5d1lYSnpaVWhsWVdSbGNuTW5LVHRjYm5aaGNpQnBjMVZTVEZOaGJXVlBjbWxuYVc0Z1BTQnlaWEYxYVhKbEtDY3VMeTR1TDJobGJIQmxjbk12YVhOVlVreFRZVzFsVDNKcFoybHVKeWs3WEc1MllYSWdZM0psWVhSbFJYSnliM0lnUFNCeVpYRjFhWEpsS0NjdUxpOWpiM0psTDJOeVpXRjBaVVZ5Y205eUp5azdYRzUyWVhJZ1luUnZZU0E5SUNoMGVYQmxiMllnZDJsdVpHOTNJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QW1KaUIzYVc1a2IzY3VZblJ2WVNBbUppQjNhVzVrYjNjdVluUnZZUzVpYVc1a0tIZHBibVJ2ZHlrcElIeDhJSEpsY1hWcGNtVW9KeTR2TGk0dmFHVnNjR1Z5Y3k5aWRHOWhKeWs3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0Z2VHaHlRV1JoY0hSbGNpaGpiMjVtYVdjcElIdGNiaUFnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1SUdScGMzQmhkR05vV0doeVVtVnhkV1Z6ZENoeVpYTnZiSFpsTENCeVpXcGxZM1FwSUh0Y2JpQWdJQ0IyWVhJZ2NtVnhkV1Z6ZEVSaGRHRWdQU0JqYjI1bWFXY3VaR0YwWVR0Y2JpQWdJQ0IyWVhJZ2NtVnhkV1Z6ZEVobFlXUmxjbk1nUFNCamIyNW1hV2N1YUdWaFpHVnljenRjYmx4dUlDQWdJR2xtSUNoMWRHbHNjeTVwYzBadmNtMUVZWFJoS0hKbGNYVmxjM1JFWVhSaEtTa2dlMXh1SUNBZ0lDQWdaR1ZzWlhSbElISmxjWFZsYzNSSVpXRmtaWEp6V3lkRGIyNTBaVzUwTFZSNWNHVW5YVHNnTHk4Z1RHVjBJSFJvWlNCaWNtOTNjMlZ5SUhObGRDQnBkRnh1SUNBZ0lIMWNibHh1SUNBZ0lIWmhjaUJ5WlhGMVpYTjBJRDBnYm1WM0lGaE5URWgwZEhCU1pYRjFaWE4wS0NrN1hHNGdJQ0FnZG1GeUlHeHZZV1JGZG1WdWRDQTlJQ2R2Ym5KbFlXUjVjM1JoZEdWamFHRnVaMlVuTzF4dUlDQWdJSFpoY2lCNFJHOXRZV2x1SUQwZ1ptRnNjMlU3WEc1Y2JpQWdJQ0F2THlCR2IzSWdTVVVnT0M4NUlFTlBVbE1nYzNWd2NHOXlkRnh1SUNBZ0lDOHZJRTl1YkhrZ2MzVndjRzl5ZEhNZ1VFOVRWQ0JoYm1RZ1IwVlVJR05oYkd4eklHRnVaQ0JrYjJWemJpZDBJSEpsZEhWeWJuTWdkR2hsSUhKbGMzQnZibk5sSUdobFlXUmxjbk11WEc0Z0lDQWdMeThnUkU5T0oxUWdaRzhnZEdocGN5Qm1iM0lnZEdWemRHbHVaeUJpTDJNZ1dFMU1TSFIwY0ZKbGNYVmxjM1FnYVhNZ2JXOWphMlZrTENCdWIzUWdXRVJ2YldGcGJsSmxjWFZsYzNRdVhHNGdJQ0FnYVdZZ0tIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmRHVnpkQ2NnSmlaY2JpQWdJQ0FnSUNBZ2RIbHdaVzltSUhkcGJtUnZkeUFoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVpjYmlBZ0lDQWdJQ0FnZDJsdVpHOTNMbGhFYjIxaGFXNVNaWEYxWlhOMElDWW1JQ0VvSjNkcGRHaERjbVZrWlc1MGFXRnNjeWNnYVc0Z2NtVnhkV1Z6ZENrZ0ppWmNiaUFnSUNBZ0lDQWdJV2x6VlZKTVUyRnRaVTl5YVdkcGJpaGpiMjVtYVdjdWRYSnNLU2tnZTF4dUlDQWdJQ0FnY21WeGRXVnpkQ0E5SUc1bGR5QjNhVzVrYjNjdVdFUnZiV0ZwYmxKbGNYVmxjM1FvS1R0Y2JpQWdJQ0FnSUd4dllXUkZkbVZ1ZENBOUlDZHZibXh2WVdRbk8xeHVJQ0FnSUNBZ2VFUnZiV0ZwYmlBOUlIUnlkV1U3WEc0Z0lDQWdJQ0J5WlhGMVpYTjBMbTl1Y0hKdlozSmxjM01nUFNCbWRXNWpkR2x2YmlCb1lXNWtiR1ZRY205bmNtVnpjeWdwSUh0OU8xeHVJQ0FnSUNBZ2NtVnhkV1Z6ZEM1dmJuUnBiV1Z2ZFhRZ1BTQm1kVzVqZEdsdmJpQm9ZVzVrYkdWVWFXMWxiM1YwS0NrZ2UzMDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdTRlJVVUNCaVlYTnBZeUJoZFhSb1pXNTBhV05oZEdsdmJseHVJQ0FnSUdsbUlDaGpiMjVtYVdjdVlYVjBhQ2tnZTF4dUlDQWdJQ0FnZG1GeUlIVnpaWEp1WVcxbElEMGdZMjl1Wm1sbkxtRjFkR2d1ZFhObGNtNWhiV1VnZkh3Z0p5YzdYRzRnSUNBZ0lDQjJZWElnY0dGemMzZHZjbVFnUFNCamIyNW1hV2N1WVhWMGFDNXdZWE56ZDI5eVpDQjhmQ0FuSnp0Y2JpQWdJQ0FnSUhKbGNYVmxjM1JJWldGa1pYSnpMa0YxZEdodmNtbDZZWFJwYjI0Z1BTQW5RbUZ6YVdNZ0p5QXJJR0owYjJFb2RYTmxjbTVoYldVZ0t5QW5PaWNnS3lCd1lYTnpkMjl5WkNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WeGRXVnpkQzV2Y0dWdUtHTnZibVpwWnk1dFpYUm9iMlF1ZEc5VmNIQmxja05oYzJVb0tTd2dZblZwYkdSVlVrd29ZMjl1Wm1sbkxuVnliQ3dnWTI5dVptbG5MbkJoY21GdGN5d2dZMjl1Wm1sbkxuQmhjbUZ0YzFObGNtbGhiR2w2WlhJcExDQjBjblZsS1R0Y2JseHVJQ0FnSUM4dklGTmxkQ0IwYUdVZ2NtVnhkV1Z6ZENCMGFXMWxiM1YwSUdsdUlFMVRYRzRnSUNBZ2NtVnhkV1Z6ZEM1MGFXMWxiM1YwSUQwZ1kyOXVabWxuTG5ScGJXVnZkWFE3WEc1Y2JpQWdJQ0F2THlCTWFYTjBaVzRnWm05eUlISmxZV1I1SUhOMFlYUmxYRzRnSUNBZ2NtVnhkV1Z6ZEZ0c2IyRmtSWFpsYm5SZElEMGdablZ1WTNScGIyNGdhR0Z1Wkd4bFRHOWhaQ2dwSUh0Y2JpQWdJQ0FnSUdsbUlDZ2hjbVZ4ZFdWemRDQjhmQ0FvY21WeGRXVnpkQzV5WldGa2VWTjBZWFJsSUNFOVBTQTBJQ1ltSUNGNFJHOXRZV2x1S1NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDOHZJRlJvWlNCeVpYRjFaWE4wSUdWeWNtOXlaV1FnYjNWMElHRnVaQ0IzWlNCa2FXUnVKM1FnWjJWMElHRWdjbVZ6Y0c5dWMyVXNJSFJvYVhNZ2QybHNiQ0JpWlZ4dUlDQWdJQ0FnTHk4Z2FHRnVaR3hsWkNCaWVTQnZibVZ5Y205eUlHbHVjM1JsWVdSY2JpQWdJQ0FnSUM4dklGZHBkR2dnYjI1bElHVjRZMlZ3ZEdsdmJqb2djbVZ4ZFdWemRDQjBhR0YwSUhWemFXNW5JR1pwYkdVNklIQnliM1J2WTI5c0xDQnRiM04wSUdKeWIzZHpaWEp6WEc0Z0lDQWdJQ0F2THlCM2FXeHNJSEpsZEhWeWJpQnpkR0YwZFhNZ1lYTWdNQ0JsZG1WdUlIUm9iM1ZuYUNCcGRDZHpJR0VnYzNWalkyVnpjMloxYkNCeVpYRjFaWE4wWEc0Z0lDQWdJQ0JwWmlBb2NtVnhkV1Z6ZEM1emRHRjBkWE1nUFQwOUlEQWdKaVlnSVNoeVpYRjFaWE4wTG5KbGMzQnZibk5sVlZKTUlDWW1JSEpsY1hWbGMzUXVjbVZ6Y0c5dWMyVlZVa3d1YVc1a1pYaFBaaWduWm1sc1pUb25LU0E5UFQwZ01Da3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0F2THlCUWNtVndZWEpsSUhSb1pTQnlaWE53YjI1elpWeHVJQ0FnSUNBZ2RtRnlJSEpsYzNCdmJuTmxTR1ZoWkdWeWN5QTlJQ2RuWlhSQmJHeFNaWE53YjI1elpVaGxZV1JsY25NbklHbHVJSEpsY1hWbGMzUWdQeUJ3WVhKelpVaGxZV1JsY25Nb2NtVnhkV1Z6ZEM1blpYUkJiR3hTWlhOd2IyNXpaVWhsWVdSbGNuTW9LU2tnT2lCdWRXeHNPMXh1SUNBZ0lDQWdkbUZ5SUhKbGMzQnZibk5sUkdGMFlTQTlJQ0ZqYjI1bWFXY3VjbVZ6Y0c5dWMyVlVlWEJsSUh4OElHTnZibVpwWnk1eVpYTndiMjV6WlZSNWNHVWdQVDA5SUNkMFpYaDBKeUEvSUhKbGNYVmxjM1F1Y21WemNHOXVjMlZVWlhoMElEb2djbVZ4ZFdWemRDNXlaWE53YjI1elpUdGNiaUFnSUNBZ0lIWmhjaUJ5WlhOd2IyNXpaU0E5SUh0Y2JpQWdJQ0FnSUNBZ1pHRjBZVG9nY21WemNHOXVjMlZFWVhSaExGeHVJQ0FnSUNBZ0lDQXZMeUJKUlNCelpXNWtjeUF4TWpJeklHbHVjM1JsWVdRZ2IyWWdNakEwSUNob2RIUndjem92TDJkcGRHaDFZaTVqYjIwdllYaHBiM012WVhocGIzTXZhWE56ZFdWekx6SXdNU2xjYmlBZ0lDQWdJQ0FnYzNSaGRIVnpPaUJ5WlhGMVpYTjBMbk4wWVhSMWN5QTlQVDBnTVRJeU15QS9JREl3TkNBNklISmxjWFZsYzNRdWMzUmhkSFZ6TEZ4dUlDQWdJQ0FnSUNCemRHRjBkWE5VWlhoME9pQnlaWEYxWlhOMExuTjBZWFIxY3lBOVBUMGdNVEl5TXlBL0lDZE9ieUJEYjI1MFpXNTBKeUE2SUhKbGNYVmxjM1F1YzNSaGRIVnpWR1Y0ZEN4Y2JpQWdJQ0FnSUNBZ2FHVmhaR1Z5Y3pvZ2NtVnpjRzl1YzJWSVpXRmtaWEp6TEZ4dUlDQWdJQ0FnSUNCamIyNW1hV2M2SUdOdmJtWnBaeXhjYmlBZ0lDQWdJQ0FnY21WeGRXVnpkRG9nY21WeGRXVnpkRnh1SUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnYzJWMGRHeGxLSEpsYzI5c2RtVXNJSEpsYW1WamRDd2djbVZ6Y0c5dWMyVXBPMXh1WEc0Z0lDQWdJQ0F2THlCRGJHVmhiaUIxY0NCeVpYRjFaWE4wWEc0Z0lDQWdJQ0J5WlhGMVpYTjBJRDBnYm5Wc2JEdGNiaUFnSUNCOU8xeHVYRzRnSUNBZ0x5OGdTR0Z1Wkd4bElHeHZkeUJzWlhabGJDQnVaWFIzYjNKcklHVnljbTl5YzF4dUlDQWdJSEpsY1hWbGMzUXViMjVsY25KdmNpQTlJR1oxYm1OMGFXOXVJR2hoYm1Sc1pVVnljbTl5S0NrZ2UxeHVJQ0FnSUNBZ0x5OGdVbVZoYkNCbGNuSnZjbk1nWVhKbElHaHBaR1JsYmlCbWNtOXRJSFZ6SUdKNUlIUm9aU0JpY205M2MyVnlYRzRnSUNBZ0lDQXZMeUJ2Ym1WeWNtOXlJSE5vYjNWc1pDQnZibXg1SUdacGNtVWdhV1lnYVhRbmN5QmhJRzVsZEhkdmNtc2daWEp5YjNKY2JpQWdJQ0FnSUhKbGFtVmpkQ2hqY21WaGRHVkZjbkp2Y2lnblRtVjBkMjl5YXlCRmNuSnZjaWNzSUdOdmJtWnBaeXdnYm5Wc2JDd2djbVZ4ZFdWemRDa3BPMXh1WEc0Z0lDQWdJQ0F2THlCRGJHVmhiaUIxY0NCeVpYRjFaWE4wWEc0Z0lDQWdJQ0J5WlhGMVpYTjBJRDBnYm5Wc2JEdGNiaUFnSUNCOU8xeHVYRzRnSUNBZ0x5OGdTR0Z1Wkd4bElIUnBiV1Z2ZFhSY2JpQWdJQ0J5WlhGMVpYTjBMbTl1ZEdsdFpXOTFkQ0E5SUdaMWJtTjBhVzl1SUdoaGJtUnNaVlJwYldWdmRYUW9LU0I3WEc0Z0lDQWdJQ0J5WldwbFkzUW9ZM0psWVhSbFJYSnliM0lvSjNScGJXVnZkWFFnYjJZZ0p5QXJJR052Ym1acFp5NTBhVzFsYjNWMElDc2dKMjF6SUdWNFkyVmxaR1ZrSnl3Z1kyOXVabWxuTENBblJVTlBUazVCUWs5U1ZFVkVKeXhjYmlBZ0lDQWdJQ0FnY21WeGRXVnpkQ2twTzF4dVhHNGdJQ0FnSUNBdkx5QkRiR1ZoYmlCMWNDQnlaWEYxWlhOMFhHNGdJQ0FnSUNCeVpYRjFaWE4wSUQwZ2JuVnNiRHRjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdMeThnUVdSa0lIaHpjbVlnYUdWaFpHVnlYRzRnSUNBZ0x5OGdWR2hwY3lCcGN5QnZibXg1SUdSdmJtVWdhV1lnY25WdWJtbHVaeUJwYmlCaElITjBZVzVrWVhKa0lHSnliM2R6WlhJZ1pXNTJhWEp2Ym0xbGJuUXVYRzRnSUNBZ0x5OGdVM0JsWTJsbWFXTmhiR3g1SUc1dmRDQnBaaUIzWlNkeVpTQnBiaUJoSUhkbFlpQjNiM0pyWlhJc0lHOXlJSEpsWVdOMExXNWhkR2wyWlM1Y2JpQWdJQ0JwWmlBb2RYUnBiSE11YVhOVGRHRnVaR0Z5WkVKeWIzZHpaWEpGYm5Zb0tTa2dlMXh1SUNBZ0lDQWdkbUZ5SUdOdmIydHBaWE1nUFNCeVpYRjFhWEpsS0NjdUx5NHVMMmhsYkhCbGNuTXZZMjl2YTJsbGN5Y3BPMXh1WEc0Z0lDQWdJQ0F2THlCQlpHUWdlSE55WmlCb1pXRmtaWEpjYmlBZ0lDQWdJSFpoY2lCNGMzSm1WbUZzZFdVZ1BTQW9ZMjl1Wm1sbkxuZHBkR2hEY21Wa1pXNTBhV0ZzY3lCOGZDQnBjMVZTVEZOaGJXVlBjbWxuYVc0b1kyOXVabWxuTG5WeWJDa3BJQ1ltSUdOdmJtWnBaeTU0YzNKbVEyOXZhMmxsVG1GdFpTQS9YRzRnSUNBZ0lDQWdJQ0FnWTI5dmEybGxjeTV5WldGa0tHTnZibVpwWnk1NGMzSm1RMjl2YTJsbFRtRnRaU2tnT2x4dUlDQWdJQ0FnSUNBZ0lIVnVaR1ZtYVc1bFpEdGNibHh1SUNBZ0lDQWdhV1lnS0hoemNtWldZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWEYxWlhOMFNHVmhaR1Z5YzF0amIyNW1hV2N1ZUhOeVpraGxZV1JsY2s1aGJXVmRJRDBnZUhOeVpsWmhiSFZsTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUVGa1pDQm9aV0ZrWlhKeklIUnZJSFJvWlNCeVpYRjFaWE4wWEc0Z0lDQWdhV1lnS0NkelpYUlNaWEYxWlhOMFNHVmhaR1Z5SnlCcGJpQnlaWEYxWlhOMEtTQjdYRzRnSUNBZ0lDQjFkR2xzY3k1bWIzSkZZV05vS0hKbGNYVmxjM1JJWldGa1pYSnpMQ0JtZFc1amRHbHZiaUJ6WlhSU1pYRjFaWE4wU0dWaFpHVnlLSFpoYkN3Z2EyVjVLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2NtVnhkV1Z6ZEVSaGRHRWdQVDA5SUNkMWJtUmxabWx1WldRbklDWW1JR3RsZVM1MGIweHZkMlZ5UTJGelpTZ3BJRDA5UFNBblkyOXVkR1Z1ZEMxMGVYQmxKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZJRkpsYlc5MlpTQkRiMjUwWlc1MExWUjVjR1VnYVdZZ1pHRjBZU0JwY3lCMWJtUmxabWx1WldSY2JpQWdJQ0FnSUNBZ0lDQmtaV3hsZEdVZ2NtVnhkV1Z6ZEVobFlXUmxjbk5iYTJWNVhUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0F2THlCUGRHaGxjbmRwYzJVZ1lXUmtJR2hsWVdSbGNpQjBieUIwYUdVZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ0FnSUNBZ0lISmxjWFZsYzNRdWMyVjBVbVZ4ZFdWemRFaGxZV1JsY2loclpYa3NJSFpoYkNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRUZrWkNCM2FYUm9RM0psWkdWdWRHbGhiSE1nZEc4Z2NtVnhkV1Z6ZENCcFppQnVaV1ZrWldSY2JpQWdJQ0JwWmlBb1kyOXVabWxuTG5kcGRHaERjbVZrWlc1MGFXRnNjeWtnZTF4dUlDQWdJQ0FnY21WeGRXVnpkQzUzYVhSb1EzSmxaR1Z1ZEdsaGJITWdQU0IwY25WbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklFRmtaQ0J5WlhOd2IyNXpaVlI1Y0dVZ2RHOGdjbVZ4ZFdWemRDQnBaaUJ1WldWa1pXUmNiaUFnSUNCcFppQW9ZMjl1Wm1sbkxuSmxjM0J2Ym5ObFZIbHdaU2tnZTF4dUlDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdjbVZ4ZFdWemRDNXlaWE53YjI1elpWUjVjR1VnUFNCamIyNW1hV2N1Y21WemNHOXVjMlZVZVhCbE8xeHVJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pTa2dlMXh1SUNBZ0lDQWdJQ0F2THlCRmVIQmxZM1JsWkNCRVQwMUZlR05sY0hScGIyNGdkR2h5YjNkdUlHSjVJR0p5YjNkelpYSnpJRzV2ZENCamIyMXdZWFJwWW14bElGaE5URWgwZEhCU1pYRjFaWE4wSUV4bGRtVnNJREl1WEc0Z0lDQWdJQ0FnSUM4dklFSjFkQ3dnZEdocGN5QmpZVzRnWW1VZ2MzVndjSEpsYzNObFpDQm1iM0lnSjJwemIyNG5JSFI1Y0dVZ1lYTWdhWFFnWTJGdUlHSmxJSEJoY25ObFpDQmllU0JrWldaaGRXeDBJQ2QwY21GdWMyWnZjbTFTWlhOd2IyNXpaU2NnWm5WdVkzUnBiMjR1WEc0Z0lDQWdJQ0FnSUdsbUlDaGpiMjVtYVdjdWNtVnpjRzl1YzJWVWVYQmxJQ0U5UFNBbmFuTnZiaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCbE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdTR0Z1Wkd4bElIQnliMmR5WlhOeklHbG1JRzVsWldSbFpGeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ1kyOXVabWxuTG05dVJHOTNibXh2WVdSUWNtOW5jbVZ6Y3lBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJQ0FnY21WeGRXVnpkQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2R3Y205bmNtVnpjeWNzSUdOdmJtWnBaeTV2YmtSdmQyNXNiMkZrVUhKdlozSmxjM01wTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUU1dmRDQmhiR3dnWW5KdmQzTmxjbk1nYzNWd2NHOXlkQ0IxY0d4dllXUWdaWFpsYm5SelhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCamIyNW1hV2N1YjI1VmNHeHZZV1JRY205bmNtVnpjeUE5UFQwZ0oyWjFibU4wYVc5dUp5QW1KaUJ5WlhGMVpYTjBMblZ3Ykc5aFpDa2dlMXh1SUNBZ0lDQWdjbVZ4ZFdWemRDNTFjR3h2WVdRdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnbmNISnZaM0psYzNNbkxDQmpiMjVtYVdjdWIyNVZjR3h2WVdSUWNtOW5jbVZ6Y3lrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHTnZibVpwWnk1allXNWpaV3hVYjJ0bGJpa2dlMXh1SUNBZ0lDQWdMeThnU0dGdVpHeGxJR05oYm1ObGJHeGhkR2x2Ymx4dUlDQWdJQ0FnWTI5dVptbG5MbU5oYm1ObGJGUnZhMlZ1TG5CeWIyMXBjMlV1ZEdobGJpaG1kVzVqZEdsdmJpQnZia05oYm1ObGJHVmtLR05oYm1ObGJDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYSmxjWFZsYzNRcElIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCeVpYRjFaWE4wTG1GaWIzSjBLQ2s3WEc0Z0lDQWdJQ0FnSUhKbGFtVmpkQ2hqWVc1alpXd3BPMXh1SUNBZ0lDQWdJQ0F2THlCRGJHVmhiaUIxY0NCeVpYRjFaWE4wWEc0Z0lDQWdJQ0FnSUhKbGNYVmxjM1FnUFNCdWRXeHNPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0hKbGNYVmxjM1JFWVhSaElEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUhKbGNYVmxjM1JFWVhSaElEMGdiblZzYkR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCVFpXNWtJSFJvWlNCeVpYRjFaWE4wWEc0Z0lDQWdjbVZ4ZFdWemRDNXpaVzVrS0hKbGNYVmxjM1JFWVhSaEtUdGNiaUFnZlNrN1hHNTlPMXh1SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdkWFJwYkhNZ1BTQnlaWEYxYVhKbEtDY3VMM1YwYVd4ekp5azdYRzUyWVhJZ1ltbHVaQ0E5SUhKbGNYVnBjbVVvSnk0dmFHVnNjR1Z5Y3k5aWFXNWtKeWs3WEc1MllYSWdRWGhwYjNNZ1BTQnlaWEYxYVhKbEtDY3VMMk52Y21VdlFYaHBiM01uS1R0Y2JuWmhjaUJrWldaaGRXeDBjeUE5SUhKbGNYVnBjbVVvSnk0dlpHVm1ZWFZzZEhNbktUdGNibHh1THlvcVhHNGdLaUJEY21WaGRHVWdZVzRnYVc1emRHRnVZMlVnYjJZZ1FYaHBiM05jYmlBcVhHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdaR1ZtWVhWc2RFTnZibVpwWnlCVWFHVWdaR1ZtWVhWc2RDQmpiMjVtYVdjZ1ptOXlJSFJvWlNCcGJuTjBZVzVqWlZ4dUlDb2dRSEpsZEhWeWJpQjdRWGhwYjNOOUlFRWdibVYzSUdsdWMzUmhibU5sSUc5bUlFRjRhVzl6WEc0Z0tpOWNibVoxYm1OMGFXOXVJR055WldGMFpVbHVjM1JoYm1ObEtHUmxabUYxYkhSRGIyNW1hV2NwSUh0Y2JpQWdkbUZ5SUdOdmJuUmxlSFFnUFNCdVpYY2dRWGhwYjNNb1pHVm1ZWFZzZEVOdmJtWnBaeWs3WEc0Z0lIWmhjaUJwYm5OMFlXNWpaU0E5SUdKcGJtUW9RWGhwYjNNdWNISnZkRzkwZVhCbExuSmxjWFZsYzNRc0lHTnZiblJsZUhRcE8xeHVYRzRnSUM4dklFTnZjSGtnWVhocGIzTXVjSEp2ZEc5MGVYQmxJSFJ2SUdsdWMzUmhibU5sWEc0Z0lIVjBhV3h6TG1WNGRHVnVaQ2hwYm5OMFlXNWpaU3dnUVhocGIzTXVjSEp2ZEc5MGVYQmxMQ0JqYjI1MFpYaDBLVHRjYmx4dUlDQXZMeUJEYjNCNUlHTnZiblJsZUhRZ2RHOGdhVzV6ZEdGdVkyVmNiaUFnZFhScGJITXVaWGgwWlc1a0tHbHVjM1JoYm1ObExDQmpiMjUwWlhoMEtUdGNibHh1SUNCeVpYUjFjbTRnYVc1emRHRnVZMlU3WEc1OVhHNWNiaTh2SUVOeVpXRjBaU0IwYUdVZ1pHVm1ZWFZzZENCcGJuTjBZVzVqWlNCMGJ5QmlaU0JsZUhCdmNuUmxaRnh1ZG1GeUlHRjRhVzl6SUQwZ1kzSmxZWFJsU1c1emRHRnVZMlVvWkdWbVlYVnNkSE1wTzF4dVhHNHZMeUJGZUhCdmMyVWdRWGhwYjNNZ1kyeGhjM01nZEc4Z1lXeHNiM2NnWTJ4aGMzTWdhVzVvWlhKcGRHRnVZMlZjYm1GNGFXOXpMa0Y0YVc5eklEMGdRWGhwYjNNN1hHNWNiaTh2SUVaaFkzUnZjbmtnWm05eUlHTnlaV0YwYVc1bklHNWxkeUJwYm5OMFlXNWpaWE5jYm1GNGFXOXpMbU55WldGMFpTQTlJR1oxYm1OMGFXOXVJR055WldGMFpTaHBibk4wWVc1alpVTnZibVpwWnlrZ2UxeHVJQ0J5WlhSMWNtNGdZM0psWVhSbFNXNXpkR0Z1WTJVb2RYUnBiSE11YldWeVoyVW9aR1ZtWVhWc2RITXNJR2x1YzNSaGJtTmxRMjl1Wm1sbktTazdYRzU5TzF4dVhHNHZMeUJGZUhCdmMyVWdRMkZ1WTJWc0lDWWdRMkZ1WTJWc1ZHOXJaVzVjYm1GNGFXOXpMa05oYm1ObGJDQTlJSEpsY1hWcGNtVW9KeTR2WTJGdVkyVnNMME5oYm1ObGJDY3BPMXh1WVhocGIzTXVRMkZ1WTJWc1ZHOXJaVzRnUFNCeVpYRjFhWEpsS0NjdUwyTmhibU5sYkM5RFlXNWpaV3hVYjJ0bGJpY3BPMXh1WVhocGIzTXVhWE5EWVc1alpXd2dQU0J5WlhGMWFYSmxLQ2N1TDJOaGJtTmxiQzlwYzBOaGJtTmxiQ2NwTzF4dVhHNHZMeUJGZUhCdmMyVWdZV3hzTDNOd2NtVmhaRnh1WVhocGIzTXVZV3hzSUQwZ1puVnVZM1JwYjI0Z1lXeHNLSEJ5YjIxcGMyVnpLU0I3WEc0Z0lISmxkSFZ5YmlCUWNtOXRhWE5sTG1Gc2JDaHdjbTl0YVhObGN5azdYRzU5TzF4dVlYaHBiM011YzNCeVpXRmtJRDBnY21WeGRXbHlaU2duTGk5b1pXeHdaWEp6TDNOd2NtVmhaQ2NwTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHRjRhVzl6TzF4dVhHNHZMeUJCYkd4dmR5QjFjMlVnYjJZZ1pHVm1ZWFZzZENCcGJYQnZjblFnYzNsdWRHRjRJR2x1SUZSNWNHVlRZM0pwY0hSY2JtMXZaSFZzWlM1bGVIQnZjblJ6TG1SbFptRjFiSFFnUFNCaGVHbHZjenRjYmlJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmx4dUx5b3FYRzRnS2lCQklHQkRZVzVqWld4Z0lHbHpJR0Z1SUc5aWFtVmpkQ0IwYUdGMElHbHpJSFJvY205M2JpQjNhR1Z1SUdGdUlHOXdaWEpoZEdsdmJpQnBjeUJqWVc1alpXeGxaQzVjYmlBcVhHNGdLaUJBWTJ4aGMzTmNiaUFxSUVCd1lYSmhiU0I3YzNSeWFXNW5QWDBnYldWemMyRm5aU0JVYUdVZ2JXVnpjMkZuWlM1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnUTJGdVkyVnNLRzFsYzNOaFoyVXBJSHRjYmlBZ2RHaHBjeTV0WlhOellXZGxJRDBnYldWemMyRm5aVHRjYm4xY2JseHVRMkZ1WTJWc0xuQnliM1J2ZEhsd1pTNTBiMU4wY21sdVp5QTlJR1oxYm1OMGFXOXVJSFJ2VTNSeWFXNW5LQ2tnZTF4dUlDQnlaWFIxY200Z0owTmhibU5sYkNjZ0t5QW9kR2hwY3k1dFpYTnpZV2RsSUQ4Z0p6b2dKeUFySUhSb2FYTXViV1Z6YzJGblpTQTZJQ2NuS1R0Y2JuMDdYRzVjYmtOaGJtTmxiQzV3Y205MGIzUjVjR1V1WDE5RFFVNURSVXhmWHlBOUlIUnlkV1U3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1EyRnVZMlZzTzF4dUlpd2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNTJZWElnUTJGdVkyVnNJRDBnY21WeGRXbHlaU2duTGk5RFlXNWpaV3duS1R0Y2JseHVMeW9xWEc0Z0tpQkJJR0JEWVc1alpXeFViMnRsYm1BZ2FYTWdZVzRnYjJKcVpXTjBJSFJvWVhRZ1kyRnVJR0psSUhWelpXUWdkRzhnY21WeGRXVnpkQ0JqWVc1alpXeHNZWFJwYjI0Z2IyWWdZVzRnYjNCbGNtRjBhVzl1TGx4dUlDcGNiaUFxSUVCamJHRnpjMXh1SUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ1pYaGxZM1YwYjNJZ1ZHaGxJR1Y0WldOMWRHOXlJR1oxYm1OMGFXOXVMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQkRZVzVqWld4VWIydGxiaWhsZUdWamRYUnZjaWtnZTF4dUlDQnBaaUFvZEhsd1pXOW1JR1Y0WldOMWRHOXlJQ0U5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25aWGhsWTNWMGIzSWdiWFZ6ZENCaVpTQmhJR1oxYm1OMGFXOXVMaWNwTzF4dUlDQjlYRzVjYmlBZ2RtRnlJSEpsYzI5c2RtVlFjbTl0YVhObE8xeHVJQ0IwYUdsekxuQnliMjFwYzJVZ1BTQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaUJ3Y205dGFYTmxSWGhsWTNWMGIzSW9jbVZ6YjJ4MlpTa2dlMXh1SUNBZ0lISmxjMjlzZG1WUWNtOXRhWE5sSUQwZ2NtVnpiMngyWlR0Y2JpQWdmU2s3WEc1Y2JpQWdkbUZ5SUhSdmEyVnVJRDBnZEdocGN6dGNiaUFnWlhobFkzVjBiM0lvWm5WdVkzUnBiMjRnWTJGdVkyVnNLRzFsYzNOaFoyVXBJSHRjYmlBZ0lDQnBaaUFvZEc5clpXNHVjbVZoYzI5dUtTQjdYRzRnSUNBZ0lDQXZMeUJEWVc1alpXeHNZWFJwYjI0Z2FHRnpJR0ZzY21WaFpIa2dZbVZsYmlCeVpYRjFaWE4wWldSY2JpQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBiMnRsYmk1eVpXRnpiMjRnUFNCdVpYY2dRMkZ1WTJWc0tHMWxjM05oWjJVcE8xeHVJQ0FnSUhKbGMyOXNkbVZRY205dGFYTmxLSFJ2YTJWdUxuSmxZWE52YmlrN1hHNGdJSDBwTzF4dWZWeHVYRzR2S2lwY2JpQXFJRlJvY205M2N5QmhJR0JEWVc1alpXeGdJR2xtSUdOaGJtTmxiR3hoZEdsdmJpQm9ZWE1nWW1WbGJpQnlaWEYxWlhOMFpXUXVYRzRnS2k5Y2JrTmhibU5sYkZSdmEyVnVMbkJ5YjNSdmRIbHdaUzUwYUhKdmQwbG1VbVZ4ZFdWemRHVmtJRDBnWm5WdVkzUnBiMjRnZEdoeWIzZEpabEpsY1hWbGMzUmxaQ2dwSUh0Y2JpQWdhV1lnS0hSb2FYTXVjbVZoYzI5dUtTQjdYRzRnSUNBZ2RHaHliM2NnZEdocGN5NXlaV0Z6YjI0N1hHNGdJSDFjYm4wN1hHNWNiaThxS2x4dUlDb2dVbVYwZFhKdWN5QmhiaUJ2WW1wbFkzUWdkR2hoZENCamIyNTBZV2x1Y3lCaElHNWxkeUJnUTJGdVkyVnNWRzlyWlc1Z0lHRnVaQ0JoSUdaMWJtTjBhVzl1SUhSb1lYUXNJSGRvWlc0Z1kyRnNiR1ZrTEZ4dUlDb2dZMkZ1WTJWc2N5QjBhR1VnWUVOaGJtTmxiRlJ2YTJWdVlDNWNiaUFxTDF4dVEyRnVZMlZzVkc5clpXNHVjMjkxY21ObElEMGdablZ1WTNScGIyNGdjMjkxY21ObEtDa2dlMXh1SUNCMllYSWdZMkZ1WTJWc08xeHVJQ0IyWVhJZ2RHOXJaVzRnUFNCdVpYY2dRMkZ1WTJWc1ZHOXJaVzRvWm5WdVkzUnBiMjRnWlhobFkzVjBiM0lvWXlrZ2UxeHVJQ0FnSUdOaGJtTmxiQ0E5SUdNN1hHNGdJSDBwTzF4dUlDQnlaWFIxY200Z2UxeHVJQ0FnSUhSdmEyVnVPaUIwYjJ0bGJpeGNiaUFnSUNCallXNWpaV3c2SUdOaGJtTmxiRnh1SUNCOU8xeHVmVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCRFlXNWpaV3hVYjJ0bGJqdGNiaUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaUJwYzBOaGJtTmxiQ2gyWVd4MVpTa2dlMXh1SUNCeVpYUjFjbTRnSVNFb2RtRnNkV1VnSmlZZ2RtRnNkV1V1WDE5RFFVNURSVXhmWHlrN1hHNTlPMXh1SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdaR1ZtWVhWc2RITWdQU0J5WlhGMWFYSmxLQ2N1THk0dUwyUmxabUYxYkhSekp5azdYRzUyWVhJZ2RYUnBiSE1nUFNCeVpYRjFhWEpsS0NjdUx5NHVMM1YwYVd4ekp5azdYRzUyWVhJZ1NXNTBaWEpqWlhCMGIzSk5ZVzVoWjJWeUlEMGdjbVZ4ZFdseVpTZ25MaTlKYm5SbGNtTmxjSFJ2Y2sxaGJtRm5aWEluS1R0Y2JuWmhjaUJrYVhOd1lYUmphRkpsY1hWbGMzUWdQU0J5WlhGMWFYSmxLQ2N1TDJScGMzQmhkR05vVW1WeGRXVnpkQ2NwTzF4dVhHNHZLaXBjYmlBcUlFTnlaV0YwWlNCaElHNWxkeUJwYm5OMFlXNWpaU0J2WmlCQmVHbHZjMXh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnBibk4wWVc1alpVTnZibVpwWnlCVWFHVWdaR1ZtWVhWc2RDQmpiMjVtYVdjZ1ptOXlJSFJvWlNCcGJuTjBZVzVqWlZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJCZUdsdmN5aHBibk4wWVc1alpVTnZibVpwWnlrZ2UxeHVJQ0IwYUdsekxtUmxabUYxYkhSeklEMGdhVzV6ZEdGdVkyVkRiMjVtYVdjN1hHNGdJSFJvYVhNdWFXNTBaWEpqWlhCMGIzSnpJRDBnZTF4dUlDQWdJSEpsY1hWbGMzUTZJRzVsZHlCSmJuUmxjbU5sY0hSdmNrMWhibUZuWlhJb0tTeGNiaUFnSUNCeVpYTndiMjV6WlRvZ2JtVjNJRWx1ZEdWeVkyVndkRzl5VFdGdVlXZGxjaWdwWEc0Z0lIMDdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1JHbHpjR0YwWTJnZ1lTQnlaWEYxWlhOMFhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUdOdmJtWnBaeUJVYUdVZ1kyOXVabWxuSUhOd1pXTnBabWxqSUdadmNpQjBhR2x6SUhKbGNYVmxjM1FnS0cxbGNtZGxaQ0IzYVhSb0lIUm9hWE11WkdWbVlYVnNkSE1wWEc0Z0tpOWNia0Y0YVc5ekxuQnliM1J2ZEhsd1pTNXlaWEYxWlhOMElEMGdablZ1WTNScGIyNGdjbVZ4ZFdWemRDaGpiMjVtYVdjcElIdGNiaUFnTHlwbGMyeHBiblFnYm04dGNHRnlZVzB0Y21WaGMzTnBaMjQ2TUNvdlhHNGdJQzh2SUVGc2JHOTNJR1p2Y2lCaGVHbHZjeWduWlhoaGJYQnNaUzkxY213bld5d2dZMjl1Wm1sblhTa2dZU0JzWVNCbVpYUmphQ0JCVUVsY2JpQWdhV1lnS0hSNWNHVnZaaUJqYjI1bWFXY2dQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnWTI5dVptbG5JRDBnZFhScGJITXViV1Z5WjJVb2UxeHVJQ0FnSUNBZ2RYSnNPaUJoY21kMWJXVnVkSE5iTUYxY2JpQWdJQ0I5TENCaGNtZDFiV1Z1ZEhOYk1WMHBPMXh1SUNCOVhHNWNiaUFnWTI5dVptbG5JRDBnZFhScGJITXViV1Z5WjJVb1pHVm1ZWFZzZEhNc0lIdHRaWFJvYjJRNklDZG5aWFFuZlN3Z2RHaHBjeTVrWldaaGRXeDBjeXdnWTI5dVptbG5LVHRjYmlBZ1kyOXVabWxuTG0xbGRHaHZaQ0E5SUdOdmJtWnBaeTV0WlhSb2IyUXVkRzlNYjNkbGNrTmhjMlVvS1R0Y2JseHVJQ0F2THlCSWIyOXJJSFZ3SUdsdWRHVnlZMlZ3ZEc5eWN5QnRhV1JrYkdWM1lYSmxYRzRnSUhaaGNpQmphR0ZwYmlBOUlGdGthWE53WVhSamFGSmxjWFZsYzNRc0lIVnVaR1ZtYVc1bFpGMDdYRzRnSUhaaGNpQndjbTl0YVhObElEMGdVSEp2YldselpTNXlaWE52YkhabEtHTnZibVpwWnlrN1hHNWNiaUFnZEdocGN5NXBiblJsY21ObGNIUnZjbk11Y21WeGRXVnpkQzVtYjNKRllXTm9LR1oxYm1OMGFXOXVJSFZ1YzJocFpuUlNaWEYxWlhOMFNXNTBaWEpqWlhCMGIzSnpLR2x1ZEdWeVkyVndkRzl5S1NCN1hHNGdJQ0FnWTJoaGFXNHVkVzV6YUdsbWRDaHBiblJsY21ObGNIUnZjaTVtZFd4bWFXeHNaV1FzSUdsdWRHVnlZMlZ3ZEc5eUxuSmxhbVZqZEdWa0tUdGNiaUFnZlNrN1hHNWNiaUFnZEdocGN5NXBiblJsY21ObGNIUnZjbk11Y21WemNHOXVjMlV1Wm05eVJXRmphQ2htZFc1amRHbHZiaUJ3ZFhOb1VtVnpjRzl1YzJWSmJuUmxjbU5sY0hSdmNuTW9hVzUwWlhKalpYQjBiM0lwSUh0Y2JpQWdJQ0JqYUdGcGJpNXdkWE5vS0dsdWRHVnlZMlZ3ZEc5eUxtWjFiR1pwYkd4bFpDd2dhVzUwWlhKalpYQjBiM0l1Y21WcVpXTjBaV1FwTzF4dUlDQjlLVHRjYmx4dUlDQjNhR2xzWlNBb1kyaGhhVzR1YkdWdVozUm9LU0I3WEc0Z0lDQWdjSEp2YldselpTQTlJSEJ5YjIxcGMyVXVkR2hsYmloamFHRnBiaTV6YUdsbWRDZ3BMQ0JqYUdGcGJpNXphR2xtZENncEtUdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQndjbTl0YVhObE8xeHVmVHRjYmx4dUx5OGdVSEp2ZG1sa1pTQmhiR2xoYzJWeklHWnZjaUJ6ZFhCd2IzSjBaV1FnY21WeGRXVnpkQ0J0WlhSb2IyUnpYRzUxZEdsc2N5NW1iM0pGWVdOb0tGc25aR1ZzWlhSbEp5d2dKMmRsZENjc0lDZG9aV0ZrSnl3Z0oyOXdkR2x2Ym5NblhTd2dablZ1WTNScGIyNGdabTl5UldGamFFMWxkR2h2WkU1dlJHRjBZU2h0WlhSb2IyUXBJSHRjYmlBZ0x5cGxjMnhwYm5RZ1puVnVZeTF1WVcxbGN6b3dLaTljYmlBZ1FYaHBiM011Y0hKdmRHOTBlWEJsVzIxbGRHaHZaRjBnUFNCbWRXNWpkR2x2YmloMWNtd3NJR052Ym1acFp5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkpsY1hWbGMzUW9kWFJwYkhNdWJXVnlaMlVvWTI5dVptbG5JSHg4SUh0OUxDQjdYRzRnSUNBZ0lDQnRaWFJvYjJRNklHMWxkR2h2WkN4Y2JpQWdJQ0FnSUhWeWJEb2dkWEpzWEc0Z0lDQWdmU2twTzF4dUlDQjlPMXh1ZlNrN1hHNWNiblYwYVd4ekxtWnZja1ZoWTJnb1d5ZHdiM04wSnl3Z0ozQjFkQ2NzSUNkd1lYUmphQ2RkTENCbWRXNWpkR2x2YmlCbWIzSkZZV05vVFdWMGFHOWtWMmwwYUVSaGRHRW9iV1YwYUc5a0tTQjdYRzRnSUM4cVpYTnNhVzUwSUdaMWJtTXRibUZ0WlhNNk1Db3ZYRzRnSUVGNGFXOXpMbkJ5YjNSdmRIbHdaVnR0WlhSb2IyUmRJRDBnWm5WdVkzUnBiMjRvZFhKc0xDQmtZWFJoTENCamIyNW1hV2NwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eVpYRjFaWE4wS0hWMGFXeHpMbTFsY21kbEtHTnZibVpwWnlCOGZDQjdmU3dnZTF4dUlDQWdJQ0FnYldWMGFHOWtPaUJ0WlhSb2IyUXNYRzRnSUNBZ0lDQjFjbXc2SUhWeWJDeGNiaUFnSUNBZ0lHUmhkR0U2SUdSaGRHRmNiaUFnSUNCOUtTazdYRzRnSUgwN1hHNTlLVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCQmVHbHZjenRjYmlJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWRtRnlJSFYwYVd4eklEMGdjbVZ4ZFdseVpTZ25MaTh1TGk5MWRHbHNjeWNwTzF4dVhHNW1kVzVqZEdsdmJpQkpiblJsY21ObGNIUnZjazFoYm1GblpYSW9LU0I3WEc0Z0lIUm9hWE11YUdGdVpHeGxjbk1nUFNCYlhUdGNibjFjYmx4dUx5b3FYRzRnS2lCQlpHUWdZU0J1WlhjZ2FXNTBaWEpqWlhCMGIzSWdkRzhnZEdobElITjBZV05yWEc0Z0tseHVJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnWm5Wc1ptbHNiR1ZrSUZSb1pTQm1kVzVqZEdsdmJpQjBieUJvWVc1a2JHVWdZSFJvWlc1Z0lHWnZjaUJoSUdCUWNtOXRhWE5sWUZ4dUlDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdjbVZxWldOMFpXUWdWR2hsSUdaMWJtTjBhVzl1SUhSdklHaGhibVJzWlNCZ2NtVnFaV04wWUNCbWIzSWdZU0JnVUhKdmJXbHpaV0JjYmlBcVhHNGdLaUJBY21WMGRYSnVJSHRPZFcxaVpYSjlJRUZ1SUVsRUlIVnpaV1FnZEc4Z2NtVnRiM1psSUdsdWRHVnlZMlZ3ZEc5eUlHeGhkR1Z5WEc0Z0tpOWNia2x1ZEdWeVkyVndkRzl5VFdGdVlXZGxjaTV3Y205MGIzUjVjR1V1ZFhObElEMGdablZ1WTNScGIyNGdkWE5sS0daMWJHWnBiR3hsWkN3Z2NtVnFaV04wWldRcElIdGNiaUFnZEdocGN5NW9ZVzVrYkdWeWN5NXdkWE5vS0h0Y2JpQWdJQ0JtZFd4bWFXeHNaV1E2SUdaMWJHWnBiR3hsWkN4Y2JpQWdJQ0J5WldwbFkzUmxaRG9nY21WcVpXTjBaV1JjYmlBZ2ZTazdYRzRnSUhKbGRIVnliaUIwYUdsekxtaGhibVJzWlhKekxteGxibWQwYUNBdElERTdYRzU5TzF4dVhHNHZLaXBjYmlBcUlGSmxiVzkyWlNCaGJpQnBiblJsY21ObGNIUnZjaUJtY205dElIUm9aU0J6ZEdGamExeHVJQ3BjYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCcFpDQlVhR1VnU1VRZ2RHaGhkQ0IzWVhNZ2NtVjBkWEp1WldRZ1lua2dZSFZ6WldCY2JpQXFMMXh1U1c1MFpYSmpaWEIwYjNKTllXNWhaMlZ5TG5CeWIzUnZkSGx3WlM1bGFtVmpkQ0E5SUdaMWJtTjBhVzl1SUdWcVpXTjBLR2xrS1NCN1hHNGdJR2xtSUNoMGFHbHpMbWhoYm1Sc1pYSnpXMmxrWFNrZ2UxeHVJQ0FnSUhSb2FYTXVhR0Z1Wkd4bGNuTmJhV1JkSUQwZ2JuVnNiRHRjYmlBZ2ZWeHVmVHRjYmx4dUx5b3FYRzRnS2lCSmRHVnlZWFJsSUc5MlpYSWdZV3hzSUhSb1pTQnlaV2RwYzNSbGNtVmtJR2x1ZEdWeVkyVndkRzl5YzF4dUlDcGNiaUFxSUZSb2FYTWdiV1YwYUc5a0lHbHpJSEJoY25ScFkzVnNZWEpzZVNCMWMyVm1kV3dnWm05eUlITnJhWEJ3YVc1bklHOTJaWElnWVc1NVhHNGdLaUJwYm5SbGNtTmxjSFJ2Y25NZ2RHaGhkQ0J0WVhrZ2FHRjJaU0JpWldOdmJXVWdZRzUxYkd4Z0lHTmhiR3hwYm1jZ1lHVnFaV04wWUM1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCbWJpQlVhR1VnWm5WdVkzUnBiMjRnZEc4Z1kyRnNiQ0JtYjNJZ1pXRmphQ0JwYm5SbGNtTmxjSFJ2Y2x4dUlDb3ZYRzVKYm5SbGNtTmxjSFJ2Y2sxaGJtRm5aWEl1Y0hKdmRHOTBlWEJsTG1admNrVmhZMmdnUFNCbWRXNWpkR2x2YmlCbWIzSkZZV05vS0dadUtTQjdYRzRnSUhWMGFXeHpMbVp2Y2tWaFkyZ29kR2hwY3k1b1lXNWtiR1Z5Y3l3Z1puVnVZM1JwYjI0Z1ptOXlSV0ZqYUVoaGJtUnNaWElvYUNrZ2UxeHVJQ0FnSUdsbUlDaG9JQ0U5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0JtYmlob0tUdGNiaUFnSUNCOVhHNGdJSDBwTzF4dWZUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JKYm5SbGNtTmxjSFJ2Y2sxaGJtRm5aWEk3WEc0aUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JuWmhjaUJsYm1oaGJtTmxSWEp5YjNJZ1BTQnlaWEYxYVhKbEtDY3VMMlZ1YUdGdVkyVkZjbkp2Y2ljcE8xeHVYRzR2S2lwY2JpQXFJRU55WldGMFpTQmhiaUJGY25KdmNpQjNhWFJvSUhSb1pTQnpjR1ZqYVdacFpXUWdiV1Z6YzJGblpTd2dZMjl1Wm1sbkxDQmxjbkp2Y2lCamIyUmxMQ0J5WlhGMVpYTjBJR0Z1WkNCeVpYTndiMjV6WlM1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYldWemMyRm5aU0JVYUdVZ1pYSnliM0lnYldWemMyRm5aUzVjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCamIyNW1hV2NnVkdobElHTnZibVpwWnk1Y2JpQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmJZMjlrWlYwZ1ZHaGxJR1Z5Y205eUlHTnZaR1VnS0dadmNpQmxlR0Z0Y0d4bExDQW5SVU5QVGs1QlFrOVNWRVZFSnlrdVhHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdXM0psY1hWbGMzUmRJRlJvWlNCeVpYRjFaWE4wTGx4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlGdHlaWE53YjI1elpWMGdWR2hsSUhKbGMzQnZibk5sTGx4dUlDb2dRSEpsZEhWeWJuTWdlMFZ5Y205eWZTQlVhR1VnWTNKbFlYUmxaQ0JsY25KdmNpNWNiaUFxTDF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlCamNtVmhkR1ZGY25KdmNpaHRaWE56WVdkbExDQmpiMjVtYVdjc0lHTnZaR1VzSUhKbGNYVmxjM1FzSUhKbGMzQnZibk5sS1NCN1hHNGdJSFpoY2lCbGNuSnZjaUE5SUc1bGR5QkZjbkp2Y2lodFpYTnpZV2RsS1R0Y2JpQWdjbVYwZFhKdUlHVnVhR0Z1WTJWRmNuSnZjaWhsY25KdmNpd2dZMjl1Wm1sbkxDQmpiMlJsTENCeVpYRjFaWE4wTENCeVpYTndiMjV6WlNrN1hHNTlPMXh1SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdkWFJwYkhNZ1BTQnlaWEYxYVhKbEtDY3VMeTR1TDNWMGFXeHpKeWs3WEc1MllYSWdkSEpoYm5ObWIzSnRSR0YwWVNBOUlISmxjWFZwY21Vb0p5NHZkSEpoYm5ObWIzSnRSR0YwWVNjcE8xeHVkbUZ5SUdselEyRnVZMlZzSUQwZ2NtVnhkV2x5WlNnbkxpNHZZMkZ1WTJWc0wybHpRMkZ1WTJWc0p5azdYRzUyWVhJZ1pHVm1ZWFZzZEhNZ1BTQnlaWEYxYVhKbEtDY3VMaTlrWldaaGRXeDBjeWNwTzF4dWRtRnlJR2x6UVdKemIyeDFkR1ZWVWt3Z1BTQnlaWEYxYVhKbEtDY3VMeTR1TDJobGJIQmxjbk12YVhOQlluTnZiSFYwWlZWU1RDY3BPMXh1ZG1GeUlHTnZiV0pwYm1WVlVreHpJRDBnY21WeGRXbHlaU2duTGk4dUxpOW9aV3h3WlhKekwyTnZiV0pwYm1WVlVreHpKeWs3WEc1Y2JpOHFLbHh1SUNvZ1ZHaHliM2R6SUdFZ1lFTmhibU5sYkdBZ2FXWWdZMkZ1WTJWc2JHRjBhVzl1SUdoaGN5QmlaV1Z1SUhKbGNYVmxjM1JsWkM1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnZEdoeWIzZEpaa05oYm1ObGJHeGhkR2x2YmxKbGNYVmxjM1JsWkNoamIyNW1hV2NwSUh0Y2JpQWdhV1lnS0dOdmJtWnBaeTVqWVc1alpXeFViMnRsYmlrZ2UxeHVJQ0FnSUdOdmJtWnBaeTVqWVc1alpXeFViMnRsYmk1MGFISnZkMGxtVW1WeGRXVnpkR1ZrS0NrN1hHNGdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQkVhWE53WVhSamFDQmhJSEpsY1hWbGMzUWdkRzhnZEdobElITmxjblpsY2lCMWMybHVaeUIwYUdVZ1kyOXVabWxuZFhKbFpDQmhaR0Z3ZEdWeUxseHVJQ3BjYmlBcUlFQndZWEpoYlNCN2IySnFaV04wZlNCamIyNW1hV2NnVkdobElHTnZibVpwWnlCMGFHRjBJR2x6SUhSdklHSmxJSFZ6WldRZ1ptOXlJSFJvWlNCeVpYRjFaWE4wWEc0Z0tpQkFjbVYwZFhKdWN5QjdVSEp2YldselpYMGdWR2hsSUZCeWIyMXBjMlVnZEc4Z1ltVWdablZzWm1sc2JHVmtYRzRnS2k5Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0Z1pHbHpjR0YwWTJoU1pYRjFaWE4wS0dOdmJtWnBaeWtnZTF4dUlDQjBhSEp2ZDBsbVEyRnVZMlZzYkdGMGFXOXVVbVZ4ZFdWemRHVmtLR052Ym1acFp5azdYRzVjYmlBZ0x5OGdVM1Z3Y0c5eWRDQmlZWE5sVlZKTUlHTnZibVpwWjF4dUlDQnBaaUFvWTI5dVptbG5MbUpoYzJWVlVrd2dKaVlnSVdselFXSnpiMngxZEdWVlVrd29ZMjl1Wm1sbkxuVnliQ2twSUh0Y2JpQWdJQ0JqYjI1bWFXY3VkWEpzSUQwZ1kyOXRZbWx1WlZWU1RITW9ZMjl1Wm1sbkxtSmhjMlZWVWt3c0lHTnZibVpwWnk1MWNtd3BPMXh1SUNCOVhHNWNiaUFnTHk4Z1JXNXpkWEpsSUdobFlXUmxjbk1nWlhocGMzUmNiaUFnWTI5dVptbG5MbWhsWVdSbGNuTWdQU0JqYjI1bWFXY3VhR1ZoWkdWeWN5QjhmQ0I3ZlR0Y2JseHVJQ0F2THlCVWNtRnVjMlp2Y20wZ2NtVnhkV1Z6ZENCa1lYUmhYRzRnSUdOdmJtWnBaeTVrWVhSaElEMGdkSEpoYm5ObWIzSnRSR0YwWVNoY2JpQWdJQ0JqYjI1bWFXY3VaR0YwWVN4Y2JpQWdJQ0JqYjI1bWFXY3VhR1ZoWkdWeWN5eGNiaUFnSUNCamIyNW1hV2N1ZEhKaGJuTm1iM0p0VW1WeGRXVnpkRnh1SUNBcE8xeHVYRzRnSUM4dklFWnNZWFIwWlc0Z2FHVmhaR1Z5YzF4dUlDQmpiMjVtYVdjdWFHVmhaR1Z5Y3lBOUlIVjBhV3h6TG0xbGNtZGxLRnh1SUNBZ0lHTnZibVpwWnk1b1pXRmtaWEp6TG1OdmJXMXZiaUI4ZkNCN2ZTeGNiaUFnSUNCamIyNW1hV2N1YUdWaFpHVnljMXRqYjI1bWFXY3ViV1YwYUc5a1hTQjhmQ0I3ZlN4Y2JpQWdJQ0JqYjI1bWFXY3VhR1ZoWkdWeWN5QjhmQ0I3ZlZ4dUlDQXBPMXh1WEc0Z0lIVjBhV3h6TG1admNrVmhZMmdvWEc0Z0lDQWdXeWRrWld4bGRHVW5MQ0FuWjJWMEp5d2dKMmhsWVdRbkxDQW5jRzl6ZENjc0lDZHdkWFFuTENBbmNHRjBZMmduTENBblkyOXRiVzl1SjEwc1hHNGdJQ0FnWm5WdVkzUnBiMjRnWTJ4bFlXNUlaV0ZrWlhKRGIyNW1hV2NvYldWMGFHOWtLU0I3WEc0Z0lDQWdJQ0JrWld4bGRHVWdZMjl1Wm1sbkxtaGxZV1JsY25OYmJXVjBhRzlrWFR0Y2JpQWdJQ0I5WEc0Z0lDazdYRzVjYmlBZ2RtRnlJR0ZrWVhCMFpYSWdQU0JqYjI1bWFXY3VZV1JoY0hSbGNpQjhmQ0JrWldaaGRXeDBjeTVoWkdGd2RHVnlPMXh1WEc0Z0lISmxkSFZ5YmlCaFpHRndkR1Z5S0dOdmJtWnBaeWt1ZEdobGJpaG1kVzVqZEdsdmJpQnZia0ZrWVhCMFpYSlNaWE52YkhWMGFXOXVLSEpsYzNCdmJuTmxLU0I3WEc0Z0lDQWdkR2h5YjNkSlprTmhibU5sYkd4aGRHbHZibEpsY1hWbGMzUmxaQ2hqYjI1bWFXY3BPMXh1WEc0Z0lDQWdMeThnVkhKaGJuTm1iM0p0SUhKbGMzQnZibk5sSUdSaGRHRmNiaUFnSUNCeVpYTndiMjV6WlM1a1lYUmhJRDBnZEhKaGJuTm1iM0p0UkdGMFlTaGNiaUFnSUNBZ0lISmxjM0J2Ym5ObExtUmhkR0VzWEc0Z0lDQWdJQ0J5WlhOd2IyNXpaUzVvWldGa1pYSnpMRnh1SUNBZ0lDQWdZMjl1Wm1sbkxuUnlZVzV6Wm05eWJWSmxjM0J2Ym5ObFhHNGdJQ0FnS1R0Y2JseHVJQ0FnSUhKbGRIVnliaUJ5WlhOd2IyNXpaVHRjYmlBZ2ZTd2dablZ1WTNScGIyNGdiMjVCWkdGd2RHVnlVbVZxWldOMGFXOXVLSEpsWVhOdmJpa2dlMXh1SUNBZ0lHbG1JQ2doYVhORFlXNWpaV3dvY21WaGMyOXVLU2tnZTF4dUlDQWdJQ0FnZEdoeWIzZEpaa05oYm1ObGJHeGhkR2x2YmxKbGNYVmxjM1JsWkNoamIyNW1hV2NwTzF4dVhHNGdJQ0FnSUNBdkx5QlVjbUZ1YzJadmNtMGdjbVZ6Y0c5dWMyVWdaR0YwWVZ4dUlDQWdJQ0FnYVdZZ0tISmxZWE52YmlBbUppQnlaV0Z6YjI0dWNtVnpjRzl1YzJVcElIdGNiaUFnSUNBZ0lDQWdjbVZoYzI5dUxuSmxjM0J2Ym5ObExtUmhkR0VnUFNCMGNtRnVjMlp2Y20xRVlYUmhLRnh1SUNBZ0lDQWdJQ0FnSUhKbFlYTnZiaTV5WlhOd2IyNXpaUzVrWVhSaExGeHVJQ0FnSUNBZ0lDQWdJSEpsWVhOdmJpNXlaWE53YjI1elpTNW9aV0ZrWlhKekxGeHVJQ0FnSUNBZ0lDQWdJR052Ym1acFp5NTBjbUZ1YzJadmNtMVNaWE53YjI1elpWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCUWNtOXRhWE5sTG5KbGFtVmpkQ2h5WldGemIyNHBPMXh1SUNCOUtUdGNibjA3WEc0aUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JpOHFLbHh1SUNvZ1ZYQmtZWFJsSUdGdUlFVnljbTl5SUhkcGRHZ2dkR2hsSUhOd1pXTnBabWxsWkNCamIyNW1hV2NzSUdWeWNtOXlJR052WkdVc0lHRnVaQ0J5WlhOd2IyNXpaUzVjYmlBcVhHNGdLaUJBY0dGeVlXMGdlMFZ5Y205eWZTQmxjbkp2Y2lCVWFHVWdaWEp5YjNJZ2RHOGdkWEJrWVhSbExseHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJR052Ym1acFp5QlVhR1VnWTI5dVptbG5MbHh1SUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUZ0amIyUmxYU0JVYUdVZ1pYSnliM0lnWTI5a1pTQW9abTl5SUdWNFlXMXdiR1VzSUNkRlEwOU9Ua0ZDVDFKVVJVUW5LUzVjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCYmNtVnhkV1Z6ZEYwZ1ZHaGxJSEpsY1hWbGMzUXVYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnVzNKbGMzQnZibk5sWFNCVWFHVWdjbVZ6Y0c5dWMyVXVYRzRnS2lCQWNtVjBkWEp1Y3lCN1JYSnliM0o5SUZSb1pTQmxjbkp2Y2k1Y2JpQXFMMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaUJsYm1oaGJtTmxSWEp5YjNJb1pYSnliM0lzSUdOdmJtWnBaeXdnWTI5a1pTd2djbVZ4ZFdWemRDd2djbVZ6Y0c5dWMyVXBJSHRjYmlBZ1pYSnliM0l1WTI5dVptbG5JRDBnWTI5dVptbG5PMXh1SUNCcFppQW9ZMjlrWlNrZ2UxeHVJQ0FnSUdWeWNtOXlMbU52WkdVZ1BTQmpiMlJsTzF4dUlDQjlYRzRnSUdWeWNtOXlMbkpsY1hWbGMzUWdQU0J5WlhGMVpYTjBPMXh1SUNCbGNuSnZjaTV5WlhOd2IyNXpaU0E5SUhKbGMzQnZibk5sTzF4dUlDQnlaWFIxY200Z1pYSnliM0k3WEc1OU8xeHVJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzUyWVhJZ1kzSmxZWFJsUlhKeWIzSWdQU0J5WlhGMWFYSmxLQ2N1TDJOeVpXRjBaVVZ5Y205eUp5azdYRzVjYmk4cUtseHVJQ29nVW1WemIyeDJaU0J2Y2lCeVpXcGxZM1FnWVNCUWNtOXRhWE5sSUdKaGMyVmtJRzl1SUhKbGMzQnZibk5sSUhOMFlYUjFjeTVjYmlBcVhHNGdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0J5WlhOdmJIWmxJRUVnWm5WdVkzUnBiMjRnZEdoaGRDQnlaWE52YkhabGN5QjBhR1VnY0hKdmJXbHpaUzVjYmlBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlISmxhbVZqZENCQklHWjFibU4wYVc5dUlIUm9ZWFFnY21WcVpXTjBjeUIwYUdVZ2NISnZiV2x6WlM1Y2JpQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQnlaWE53YjI1elpTQlVhR1VnY21WemNHOXVjMlV1WEc0Z0tpOWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdjMlYwZEd4bEtISmxjMjlzZG1Vc0lISmxhbVZqZEN3Z2NtVnpjRzl1YzJVcElIdGNiaUFnZG1GeUlIWmhiR2xrWVhSbFUzUmhkSFZ6SUQwZ2NtVnpjRzl1YzJVdVkyOXVabWxuTG5aaGJHbGtZWFJsVTNSaGRIVnpPMXh1SUNBdkx5Qk9iM1JsT2lCemRHRjBkWE1nYVhNZ2JtOTBJR1Y0Y0c5elpXUWdZbmtnV0VSdmJXRnBibEpsY1hWbGMzUmNiaUFnYVdZZ0tDRnlaWE53YjI1elpTNXpkR0YwZFhNZ2ZId2dJWFpoYkdsa1lYUmxVM1JoZEhWeklIeDhJSFpoYkdsa1lYUmxVM1JoZEhWektISmxjM0J2Ym5ObExuTjBZWFIxY3lrcElIdGNiaUFnSUNCeVpYTnZiSFpsS0hKbGMzQnZibk5sS1R0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNCeVpXcGxZM1FvWTNKbFlYUmxSWEp5YjNJb1hHNGdJQ0FnSUNBblVtVnhkV1Z6ZENCbVlXbHNaV1FnZDJsMGFDQnpkR0YwZFhNZ1kyOWtaU0FuSUNzZ2NtVnpjRzl1YzJVdWMzUmhkSFZ6TEZ4dUlDQWdJQ0FnY21WemNHOXVjMlV1WTI5dVptbG5MRnh1SUNBZ0lDQWdiblZzYkN4Y2JpQWdJQ0FnSUhKbGMzQnZibk5sTG5KbGNYVmxjM1FzWEc0Z0lDQWdJQ0J5WlhOd2IyNXpaVnh1SUNBZ0lDa3BPMXh1SUNCOVhHNTlPMXh1SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdkWFJwYkhNZ1BTQnlaWEYxYVhKbEtDY3VMeTR1TDNWMGFXeHpKeWs3WEc1Y2JpOHFLbHh1SUNvZ1ZISmhibk5tYjNKdElIUm9aU0JrWVhSaElHWnZjaUJoSUhKbGNYVmxjM1FnYjNJZ1lTQnlaWE53YjI1elpWeHVJQ3BjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZkZOMGNtbHVaMzBnWkdGMFlTQlVhR1VnWkdGMFlTQjBieUJpWlNCMGNtRnVjMlp2Y20xbFpGeHVJQ29nUUhCaGNtRnRJSHRCY25KaGVYMGdhR1ZoWkdWeWN5QlVhR1VnYUdWaFpHVnljeUJtYjNJZ2RHaGxJSEpsY1hWbGMzUWdiM0lnY21WemNHOXVjMlZjYmlBcUlFQndZWEpoYlNCN1FYSnlZWGw4Um5WdVkzUnBiMjU5SUdadWN5QkJJSE5wYm1kc1pTQm1kVzVqZEdsdmJpQnZjaUJCY25KaGVTQnZaaUJtZFc1amRHbHZibk5jYmlBcUlFQnlaWFIxY201eklIc3FmU0JVYUdVZ2NtVnpkV3gwYVc1bklIUnlZVzV6Wm05eWJXVmtJR1JoZEdGY2JpQXFMMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaUIwY21GdWMyWnZjbTFFWVhSaEtHUmhkR0VzSUdobFlXUmxjbk1zSUdadWN5a2dlMXh1SUNBdkttVnpiR2x1ZENCdWJ5MXdZWEpoYlMxeVpXRnpjMmxuYmpvd0tpOWNiaUFnZFhScGJITXVabTl5UldGamFDaG1ibk1zSUdaMWJtTjBhVzl1SUhSeVlXNXpabTl5YlNobWJpa2dlMXh1SUNBZ0lHUmhkR0VnUFNCbWJpaGtZWFJoTENCb1pXRmtaWEp6S1R0Y2JpQWdmU2s3WEc1Y2JpQWdjbVYwZFhKdUlHUmhkR0U3WEc1OU8xeHVJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzUyWVhJZ2RYUnBiSE1nUFNCeVpYRjFhWEpsS0NjdUwzVjBhV3h6SnlrN1hHNTJZWElnYm05eWJXRnNhWHBsU0dWaFpHVnlUbUZ0WlNBOUlISmxjWFZwY21Vb0p5NHZhR1ZzY0dWeWN5OXViM0p0WVd4cGVtVklaV0ZrWlhKT1lXMWxKeWs3WEc1Y2JuWmhjaUJFUlVaQlZVeFVYME5QVGxSRlRsUmZWRmxRUlNBOUlIdGNiaUFnSjBOdmJuUmxiblF0Vkhsd1pTYzZJQ2RoY0hCc2FXTmhkR2x2Ymk5NExYZDNkeTFtYjNKdExYVnliR1Z1WTI5a1pXUW5YRzU5TzF4dVhHNW1kVzVqZEdsdmJpQnpaWFJEYjI1MFpXNTBWSGx3WlVsbVZXNXpaWFFvYUdWaFpHVnljeXdnZG1Gc2RXVXBJSHRjYmlBZ2FXWWdLQ0YxZEdsc2N5NXBjMVZ1WkdWbWFXNWxaQ2hvWldGa1pYSnpLU0FtSmlCMWRHbHNjeTVwYzFWdVpHVm1hVzVsWkNob1pXRmtaWEp6V3lkRGIyNTBaVzUwTFZSNWNHVW5YU2twSUh0Y2JpQWdJQ0JvWldGa1pYSnpXeWREYjI1MFpXNTBMVlI1Y0dVblhTQTlJSFpoYkhWbE8xeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJR2RsZEVSbFptRjFiSFJCWkdGd2RHVnlLQ2tnZTF4dUlDQjJZWElnWVdSaGNIUmxjanRjYmlBZ2FXWWdLSFI1Y0dWdlppQllUVXhJZEhSd1VtVnhkV1Z6ZENBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0F2THlCR2IzSWdZbkp2ZDNObGNuTWdkWE5sSUZoSVVpQmhaR0Z3ZEdWeVhHNGdJQ0FnWVdSaGNIUmxjaUE5SUhKbGNYVnBjbVVvSnk0dllXUmhjSFJsY25NdmVHaHlKeWs3WEc0Z0lIMGdaV3h6WlNCcFppQW9kSGx3Wlc5bUlIQnliMk5sYzNNZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnTHk4Z1JtOXlJRzV2WkdVZ2RYTmxJRWhVVkZBZ1lXUmhjSFJsY2x4dUlDQWdJR0ZrWVhCMFpYSWdQU0J5WlhGMWFYSmxLQ2N1TDJGa1lYQjBaWEp6TDJoMGRIQW5LVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdZV1JoY0hSbGNqdGNibjFjYmx4dWRtRnlJR1JsWm1GMWJIUnpJRDBnZTF4dUlDQmhaR0Z3ZEdWeU9pQm5aWFJFWldaaGRXeDBRV1JoY0hSbGNpZ3BMRnh1WEc0Z0lIUnlZVzV6Wm05eWJWSmxjWFZsYzNRNklGdG1kVzVqZEdsdmJpQjBjbUZ1YzJadmNtMVNaWEYxWlhOMEtHUmhkR0VzSUdobFlXUmxjbk1wSUh0Y2JpQWdJQ0J1YjNKdFlXeHBlbVZJWldGa1pYSk9ZVzFsS0dobFlXUmxjbk1zSUNkRGIyNTBaVzUwTFZSNWNHVW5LVHRjYmlBZ0lDQnBaaUFvZFhScGJITXVhWE5HYjNKdFJHRjBZU2hrWVhSaEtTQjhmRnh1SUNBZ0lDQWdkWFJwYkhNdWFYTkJjbkpoZVVKMVptWmxjaWhrWVhSaEtTQjhmRnh1SUNBZ0lDQWdkWFJwYkhNdWFYTkNkV1ptWlhJb1pHRjBZU2tnZkh4Y2JpQWdJQ0FnSUhWMGFXeHpMbWx6VTNSeVpXRnRLR1JoZEdFcElIeDhYRzRnSUNBZ0lDQjFkR2xzY3k1cGMwWnBiR1VvWkdGMFlTa2dmSHhjYmlBZ0lDQWdJSFYwYVd4ekxtbHpRbXh2WWloa1lYUmhLVnh1SUNBZ0lDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHUmhkR0U3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2gxZEdsc2N5NXBjMEZ5Y21GNVFuVm1abVZ5Vm1sbGR5aGtZWFJoS1NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdSaGRHRXVZblZtWm1WeU8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2RYUnBiSE11YVhOVlVreFRaV0Z5WTJoUVlYSmhiWE1vWkdGMFlTa3BJSHRjYmlBZ0lDQWdJSE5sZEVOdmJuUmxiblJVZVhCbFNXWlZibk5sZENob1pXRmtaWEp6TENBbllYQndiR2xqWVhScGIyNHZlQzEzZDNjdFptOXliUzExY214bGJtTnZaR1ZrTzJOb1lYSnpaWFE5ZFhSbUxUZ25LVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmtZWFJoTG5SdlUzUnlhVzVuS0NrN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoMWRHbHNjeTVwYzA5aWFtVmpkQ2hrWVhSaEtTa2dlMXh1SUNBZ0lDQWdjMlYwUTI5dWRHVnVkRlI1Y0dWSlpsVnVjMlYwS0dobFlXUmxjbk1zSUNkaGNIQnNhV05oZEdsdmJpOXFjMjl1TzJOb1lYSnpaWFE5ZFhSbUxUZ25LVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQktVMDlPTG5OMGNtbHVaMmxtZVNoa1lYUmhLVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUdSaGRHRTdYRzRnSUgxZExGeHVYRzRnSUhSeVlXNXpabTl5YlZKbGMzQnZibk5sT2lCYlpuVnVZM1JwYjI0Z2RISmhibk5tYjNKdFVtVnpjRzl1YzJVb1pHRjBZU2tnZTF4dUlDQWdJQzhxWlhOc2FXNTBJRzV2TFhCaGNtRnRMWEpsWVhOemFXZHVPakFxTDF4dUlDQWdJR2xtSUNoMGVYQmxiMllnWkdGMFlTQTlQVDBnSjNOMGNtbHVaeWNwSUh0Y2JpQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJR1JoZEdFZ1BTQktVMDlPTG5CaGNuTmxLR1JoZEdFcE8xeHVJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pTa2dleUF2S2lCSloyNXZjbVVnS2k4Z2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdaR0YwWVR0Y2JpQWdmVjBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUVnZEdsdFpXOTFkQ0JwYmlCdGFXeHNhWE5sWTI5dVpITWdkRzhnWVdKdmNuUWdZU0J5WlhGMVpYTjBMaUJKWmlCelpYUWdkRzhnTUNBb1pHVm1ZWFZzZENrZ1lWeHVJQ0FnS2lCMGFXMWxiM1YwSUdseklHNXZkQ0JqY21WaGRHVmtMbHh1SUNBZ0tpOWNiaUFnZEdsdFpXOTFkRG9nTUN4Y2JseHVJQ0I0YzNKbVEyOXZhMmxsVG1GdFpUb2dKMWhUVWtZdFZFOUxSVTRuTEZ4dUlDQjRjM0ptU0dWaFpHVnlUbUZ0WlRvZ0oxZ3RXRk5TUmkxVVQwdEZUaWNzWEc1Y2JpQWdiV0Y0UTI5dWRHVnVkRXhsYm1kMGFEb2dMVEVzWEc1Y2JpQWdkbUZzYVdSaGRHVlRkR0YwZFhNNklHWjFibU4wYVc5dUlIWmhiR2xrWVhSbFUzUmhkSFZ6S0hOMFlYUjFjeWtnZTF4dUlDQWdJSEpsZEhWeWJpQnpkR0YwZFhNZ1BqMGdNakF3SUNZbUlITjBZWFIxY3lBOElETXdNRHRjYmlBZ2ZWeHVmVHRjYmx4dVpHVm1ZWFZzZEhNdWFHVmhaR1Z5Y3lBOUlIdGNiaUFnWTI5dGJXOXVPaUI3WEc0Z0lDQWdKMEZqWTJWd2RDYzZJQ2RoY0hCc2FXTmhkR2x2Ymk5cWMyOXVMQ0IwWlhoMEwzQnNZV2x1TENBcUx5b25YRzRnSUgxY2JuMDdYRzVjYm5WMGFXeHpMbVp2Y2tWaFkyZ29XeWRrWld4bGRHVW5MQ0FuWjJWMEp5d2dKMmhsWVdRblhTd2dablZ1WTNScGIyNGdabTl5UldGamFFMWxkR2h2WkU1dlJHRjBZU2h0WlhSb2IyUXBJSHRjYmlBZ1pHVm1ZWFZzZEhNdWFHVmhaR1Z5YzF0dFpYUm9iMlJkSUQwZ2UzMDdYRzU5S1R0Y2JseHVkWFJwYkhNdVptOXlSV0ZqYUNoYkozQnZjM1FuTENBbmNIVjBKeXdnSjNCaGRHTm9KMTBzSUdaMWJtTjBhVzl1SUdadmNrVmhZMmhOWlhSb2IyUlhhWFJvUkdGMFlTaHRaWFJvYjJRcElIdGNiaUFnWkdWbVlYVnNkSE11YUdWaFpHVnljMXR0WlhSb2IyUmRJRDBnZFhScGJITXViV1Z5WjJVb1JFVkdRVlZNVkY5RFQwNVVSVTVVWDFSWlVFVXBPMXh1ZlNrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdaR1ZtWVhWc2RITTdYRzRpTENJbmRYTmxJSE4wY21samRDYzdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnWW1sdVpDaG1iaXdnZEdocGMwRnlaeWtnZTF4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0Z2QzSmhjQ2dwSUh0Y2JpQWdJQ0IyWVhJZ1lYSm5jeUE5SUc1bGR5QkJjbkpoZVNoaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvS1R0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUdGeVozTXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUdGeVozTmJhVjBnUFNCaGNtZDFiV1Z1ZEhOYmFWMDdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJtYmk1aGNIQnNlU2gwYUdselFYSm5MQ0JoY21kektUdGNiaUFnZlR0Y2JuMDdYRzRpTENJbmRYTmxJSE4wY21samRDYzdYRzVjYmk4dklHSjBiMkVnY0c5c2VXWnBiR3dnWm05eUlFbEZQREV3SUdOdmRYSjBaWE41SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5a1lYWnBaR05vWVcxaVpYSnpMMEpoYzJVMk5DNXFjMXh1WEc1MllYSWdZMmhoY25NZ1BTQW5RVUpEUkVWR1IwaEpTa3RNVFU1UFVGRlNVMVJWVmxkWVdWcGhZbU5rWldabmFHbHFhMnh0Ym05d2NYSnpkSFYyZDNoNWVqQXhNak0wTlRZM09Ea3JMejBuTzF4dVhHNW1kVzVqZEdsdmJpQkZLQ2tnZTF4dUlDQjBhR2x6TG0xbGMzTmhaMlVnUFNBblUzUnlhVzVuSUdOdmJuUmhhVzV6SUdGdUlHbHVkbUZzYVdRZ1kyaGhjbUZqZEdWeUp6dGNibjFjYmtVdWNISnZkRzkwZVhCbElEMGdibVYzSUVWeWNtOXlPMXh1UlM1d2NtOTBiM1I1Y0dVdVkyOWtaU0E5SURVN1hHNUZMbkJ5YjNSdmRIbHdaUzV1WVcxbElEMGdKMGx1ZG1Gc2FXUkRhR0Z5WVdOMFpYSkZjbkp2Y2ljN1hHNWNibVoxYm1OMGFXOXVJR0owYjJFb2FXNXdkWFFwSUh0Y2JpQWdkbUZ5SUhOMGNpQTlJRk4wY21sdVp5aHBibkIxZENrN1hHNGdJSFpoY2lCdmRYUndkWFFnUFNBbkp6dGNiaUFnWm05eUlDaGNiaUFnSUNBdkx5QnBibWwwYVdGc2FYcGxJSEpsYzNWc2RDQmhibVFnWTI5MWJuUmxjbHh1SUNBZ0lIWmhjaUJpYkc5amF5d2dZMmhoY2tOdlpHVXNJR2xrZUNBOUlEQXNJRzFoY0NBOUlHTm9ZWEp6TzF4dUlDQWdJQzh2SUdsbUlIUm9aU0J1WlhoMElITjBjaUJwYm1SbGVDQmtiMlZ6SUc1dmRDQmxlR2x6ZERwY2JpQWdJQ0F2THlBZ0lHTm9ZVzVuWlNCMGFHVWdiV0Z3Y0dsdVp5QjBZV0pzWlNCMGJ5QmNJajFjSWx4dUlDQWdJQzh2SUNBZ1kyaGxZMnNnYVdZZ1pDQm9ZWE1nYm04Z1puSmhZM1JwYjI1aGJDQmthV2RwZEhOY2JpQWdJQ0J6ZEhJdVkyaGhja0YwS0dsa2VDQjhJREFwSUh4OElDaHRZWEFnUFNBblBTY3NJR2xrZUNBbElERXBPMXh1SUNBZ0lDOHZJRndpT0NBdElHbGtlQ0FsSURFZ0tpQTRYQ0lnWjJWdVpYSmhkR1Z6SUhSb1pTQnpaWEYxWlc1alpTQXlMQ0EwTENBMkxDQTRYRzRnSUNBZ2IzVjBjSFYwSUNzOUlHMWhjQzVqYUdGeVFYUW9Oak1nSmlCaWJHOWpheUErUGlBNElDMGdhV1I0SUNVZ01TQXFJRGdwWEc0Z0lDa2dlMXh1SUNBZ0lHTm9ZWEpEYjJSbElEMGdjM1J5TG1Ob1lYSkRiMlJsUVhRb2FXUjRJQ3M5SURNZ0x5QTBLVHRjYmlBZ0lDQnBaaUFvWTJoaGNrTnZaR1VnUGlBd2VFWkdLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlNncE8xeHVJQ0FnSUgxY2JpQWdJQ0JpYkc5amF5QTlJR0pzYjJOcklEdzhJRGdnZkNCamFHRnlRMjlrWlR0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnYjNWMGNIVjBPMXh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHSjBiMkU3WEc0aUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JuWmhjaUIxZEdsc2N5QTlJSEpsY1hWcGNtVW9KeTR2TGk0dmRYUnBiSE1uS1R0Y2JseHVablZ1WTNScGIyNGdaVzVqYjJSbEtIWmhiQ2tnZTF4dUlDQnlaWFIxY200Z1pXNWpiMlJsVlZKSlEyOXRjRzl1Wlc1MEtIWmhiQ2t1WEc0Z0lDQWdjbVZ3YkdGalpTZ3ZKVFF3TDJkcExDQW5RQ2NwTGx4dUlDQWdJSEpsY0d4aFkyVW9MeVV6UVM5bmFTd2dKem9uS1M1Y2JpQWdJQ0J5WlhCc1lXTmxLQzhsTWpRdlp5d2dKeVFuS1M1Y2JpQWdJQ0J5WlhCc1lXTmxLQzhsTWtNdloya3NJQ2NzSnlrdVhHNGdJQ0FnY21Wd2JHRmpaU2d2SlRJd0wyY3NJQ2NySnlrdVhHNGdJQ0FnY21Wd2JHRmpaU2d2SlRWQ0wyZHBMQ0FuV3ljcExseHVJQ0FnSUhKbGNHeGhZMlVvTHlVMVJDOW5hU3dnSjEwbktUdGNibjFjYmx4dUx5b3FYRzRnS2lCQ2RXbHNaQ0JoSUZWU1RDQmllU0JoY0hCbGJtUnBibWNnY0dGeVlXMXpJSFJ2SUhSb1pTQmxibVJjYmlBcVhHNGdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdkWEpzSUZSb1pTQmlZWE5sSUc5bUlIUm9aU0IxY213Z0tHVXVaeTRzSUdoMGRIQTZMeTkzZDNjdVoyOXZaMnhsTG1OdmJTbGNiaUFxSUVCd1lYSmhiU0I3YjJKcVpXTjBmU0JiY0dGeVlXMXpYU0JVYUdVZ2NHRnlZVzF6SUhSdklHSmxJR0Z3Y0dWdVpHVmtYRzRnS2lCQWNtVjBkWEp1Y3lCN2MzUnlhVzVuZlNCVWFHVWdabTl5YldGMGRHVmtJSFZ5YkZ4dUlDb3ZYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVJR0oxYVd4a1ZWSk1LSFZ5YkN3Z2NHRnlZVzF6TENCd1lYSmhiWE5UWlhKcFlXeHBlbVZ5S1NCN1hHNGdJQzhxWlhOc2FXNTBJRzV2TFhCaGNtRnRMWEpsWVhOemFXZHVPakFxTDF4dUlDQnBaaUFvSVhCaGNtRnRjeWtnZTF4dUlDQWdJSEpsZEhWeWJpQjFjbXc3WEc0Z0lIMWNibHh1SUNCMllYSWdjMlZ5YVdGc2FYcGxaRkJoY21GdGN6dGNiaUFnYVdZZ0tIQmhjbUZ0YzFObGNtbGhiR2w2WlhJcElIdGNiaUFnSUNCelpYSnBZV3hwZW1Wa1VHRnlZVzF6SUQwZ2NHRnlZVzF6VTJWeWFXRnNhWHBsY2lod1lYSmhiWE1wTzF4dUlDQjlJR1ZzYzJVZ2FXWWdLSFYwYVd4ekxtbHpWVkpNVTJWaGNtTm9VR0Z5WVcxektIQmhjbUZ0Y3lrcElIdGNiaUFnSUNCelpYSnBZV3hwZW1Wa1VHRnlZVzF6SUQwZ2NHRnlZVzF6TG5SdlUzUnlhVzVuS0NrN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2RtRnlJSEJoY25SeklEMGdXMTA3WEc1Y2JpQWdJQ0IxZEdsc2N5NW1iM0pGWVdOb0tIQmhjbUZ0Y3l3Z1puVnVZM1JwYjI0Z2MyVnlhV0ZzYVhwbEtIWmhiQ3dnYTJWNUtTQjdYRzRnSUNBZ0lDQnBaaUFvZG1Gc0lEMDlQU0J1ZFd4c0lIeDhJSFI1Y0dWdlppQjJZV3dnUFQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYVdZZ0tIVjBhV3h6TG1selFYSnlZWGtvZG1Gc0tTa2dlMXh1SUNBZ0lDQWdJQ0JyWlhrZ1BTQnJaWGtnS3lBblcxMG5PMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdkbUZzSUQwZ1czWmhiRjA3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhWMGFXeHpMbVp2Y2tWaFkyZ29kbUZzTENCbWRXNWpkR2x2YmlCd1lYSnpaVlpoYkhWbEtIWXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIVjBhV3h6TG1selJHRjBaU2gyS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJSFlnUFNCMkxuUnZTVk5QVTNSeWFXNW5LQ2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RYUnBiSE11YVhOUFltcGxZM1FvZGlrcElIdGNiaUFnSUNBZ0lDQWdJQ0IySUQwZ1NsTlBUaTV6ZEhKcGJtZHBabmtvZGlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjR0Z5ZEhNdWNIVnphQ2hsYm1OdlpHVW9hMlY1S1NBcklDYzlKeUFySUdWdVkyOWtaU2gyS1NrN1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUtUdGNibHh1SUNBZ0lITmxjbWxoYkdsNlpXUlFZWEpoYlhNZ1BTQndZWEowY3k1cWIybHVLQ2NtSnlrN1hHNGdJSDFjYmx4dUlDQnBaaUFvYzJWeWFXRnNhWHBsWkZCaGNtRnRjeWtnZTF4dUlDQWdJSFZ5YkNBclBTQW9kWEpzTG1sdVpHVjRUMllvSno4bktTQTlQVDBnTFRFZ1B5QW5QeWNnT2lBbkppY3BJQ3NnYzJWeWFXRnNhWHBsWkZCaGNtRnRjenRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUIxY213N1hHNTlPMXh1SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc0dktpcGNiaUFxSUVOeVpXRjBaWE1nWVNCdVpYY2dWVkpNSUdKNUlHTnZiV0pwYm1sdVp5QjBhR1VnYzNCbFkybG1hV1ZrSUZWU1RITmNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1ltRnpaVlZTVENCVWFHVWdZbUZ6WlNCVlVreGNiaUFxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0J5Wld4aGRHbDJaVlZTVENCVWFHVWdjbVZzWVhScGRtVWdWVkpNWEc0Z0tpQkFjbVYwZFhKdWN5QjdjM1J5YVc1bmZTQlVhR1VnWTI5dFltbHVaV1FnVlZKTVhHNGdLaTljYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnWTI5dFltbHVaVlZTVEhNb1ltRnpaVlZTVEN3Z2NtVnNZWFJwZG1WVlVrd3BJSHRjYmlBZ2NtVjBkWEp1SUhKbGJHRjBhWFpsVlZKTVhHNGdJQ0FnUHlCaVlYTmxWVkpNTG5KbGNHeGhZMlVvTDF4Y0x5c2tMeXdnSnljcElDc2dKeThuSUNzZ2NtVnNZWFJwZG1WVlVrd3VjbVZ3YkdGalpTZ3ZYbHhjTHlzdkxDQW5KeWxjYmlBZ0lDQTZJR0poYzJWVlVrdzdYRzU5TzF4dUlpd2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNTJZWElnZFhScGJITWdQU0J5WlhGMWFYSmxLQ2N1THk0dUwzVjBhV3h6SnlrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdLRnh1SUNCMWRHbHNjeTVwYzFOMFlXNWtZWEprUW5KdmQzTmxja1Z1ZGlncElEOWNibHh1SUNBdkx5QlRkR0Z1WkdGeVpDQmljbTkzYzJWeUlHVnVkbk1nYzNWd2NHOXlkQ0JrYjJOMWJXVnVkQzVqYjI5cmFXVmNiaUFnS0daMWJtTjBhVzl1SUhOMFlXNWtZWEprUW5KdmQzTmxja1Z1ZGlncElIdGNiaUFnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnZDNKcGRHVTZJR1oxYm1OMGFXOXVJSGR5YVhSbEtHNWhiV1VzSUhaaGJIVmxMQ0JsZUhCcGNtVnpMQ0J3WVhSb0xDQmtiMjFoYVc0c0lITmxZM1Z5WlNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWTI5dmEybGxJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lHTnZiMnRwWlM1d2RYTm9LRzVoYldVZ0t5QW5QU2NnS3lCbGJtTnZaR1ZWVWtsRGIyMXdiMjVsYm5Rb2RtRnNkV1VwS1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvZFhScGJITXVhWE5PZFcxaVpYSW9aWGh3YVhKbGN5a3BJSHRjYmlBZ0lDQWdJQ0FnSUNCamIyOXJhV1V1Y0hWemFDZ25aWGh3YVhKbGN6MG5JQ3NnYm1WM0lFUmhkR1VvWlhod2FYSmxjeWt1ZEc5SFRWUlRkSEpwYm1jb0tTazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCcFppQW9kWFJwYkhNdWFYTlRkSEpwYm1jb2NHRjBhQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjlyYVdVdWNIVnphQ2duY0dGMGFEMG5JQ3NnY0dGMGFDazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCcFppQW9kWFJwYkhNdWFYTlRkSEpwYm1jb1pHOXRZV2x1S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJR052YjJ0cFpTNXdkWE5vS0Nka2IyMWhhVzQ5SnlBcklHUnZiV0ZwYmlrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JwWmlBb2MyVmpkWEpsSUQwOVBTQjBjblZsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdZMjl2YTJsbExuQjFjMmdvSjNObFkzVnlaU2NwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdaRzlqZFcxbGJuUXVZMjl2YTJsbElEMGdZMjl2YTJsbExtcHZhVzRvSnpzZ0p5azdYRzRnSUNBZ0lDQjlMRnh1WEc0Z0lDQWdJQ0J5WldGa09pQm1kVzVqZEdsdmJpQnlaV0ZrS0c1aGJXVXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHMWhkR05vSUQwZ1pHOWpkVzFsYm5RdVkyOXZhMmxsTG0xaGRHTm9LRzVsZHlCU1pXZEZlSEFvSnloZWZEdGNYRnhjY3lvcEtDY2dLeUJ1WVcxbElDc2dKeWs5S0Z0ZU8xMHFLU2NwS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNodFlYUmphQ0EvSUdSbFkyOWtaVlZTU1VOdmJYQnZibVZ1ZENodFlYUmphRnN6WFNrZ09pQnVkV3hzS1R0Y2JpQWdJQ0FnSUgwc1hHNWNiaUFnSUNBZ0lISmxiVzkyWlRvZ1puVnVZM1JwYjI0Z2NtVnRiM1psS0c1aGJXVXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTNjbWwwWlNodVlXMWxMQ0FuSnl3Z1JHRjBaUzV1YjNjb0tTQXRJRGcyTkRBd01EQXdLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1SUNCOUtTZ3BJRHBjYmx4dUlDQXZMeUJPYjI0Z2MzUmhibVJoY21RZ1luSnZkM05sY2lCbGJuWWdLSGRsWWlCM2IzSnJaWEp6TENCeVpXRmpkQzF1WVhScGRtVXBJR3hoWTJzZ2JtVmxaR1ZrSUhOMWNIQnZjblF1WEc0Z0lDaG1kVzVqZEdsdmJpQnViMjVUZEdGdVpHRnlaRUp5YjNkelpYSkZibllvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJSGR5YVhSbE9pQm1kVzVqZEdsdmJpQjNjbWwwWlNncElIdDlMRnh1SUNBZ0lDQWdjbVZoWkRvZ1puVnVZM1JwYjI0Z2NtVmhaQ2dwSUhzZ2NtVjBkWEp1SUc1MWJHdzdJSDBzWEc0Z0lDQWdJQ0J5WlcxdmRtVTZJR1oxYm1OMGFXOXVJSEpsYlc5MlpTZ3BJSHQ5WEc0Z0lDQWdmVHRjYmlBZ2ZTa29LVnh1S1R0Y2JpSXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVMeW9xWEc0Z0tpQkVaWFJsY20xcGJtVnpJSGRvWlhSb1pYSWdkR2hsSUhOd1pXTnBabWxsWkNCVlVrd2dhWE1nWVdKemIyeDFkR1ZjYmlBcVhHNGdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdkWEpzSUZSb1pTQlZVa3dnZEc4Z2RHVnpkRnh1SUNvZ1FISmxkSFZ5Ym5NZ2UySnZiMnhsWVc1OUlGUnlkV1VnYVdZZ2RHaGxJSE53WldOcFptbGxaQ0JWVWt3Z2FYTWdZV0p6YjJ4MWRHVXNJRzkwYUdWeWQybHpaU0JtWVd4elpWeHVJQ292WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUdselFXSnpiMngxZEdWVlVrd29kWEpzS1NCN1hHNGdJQzh2SUVFZ1ZWSk1JR2x6SUdOdmJuTnBaR1Z5WldRZ1lXSnpiMngxZEdVZ2FXWWdhWFFnWW1WbmFXNXpJSGRwZEdnZ1hDSThjMk5vWlcxbFBqb3ZMMXdpSUc5eUlGd2lMeTljSWlBb2NISnZkRzlqYjJ3dGNtVnNZWFJwZG1VZ1ZWSk1LUzVjYmlBZ0x5OGdVa1pESURNNU9EWWdaR1ZtYVc1bGN5QnpZMmhsYldVZ2JtRnRaU0JoY3lCaElITmxjWFZsYm1ObElHOW1JR05vWVhKaFkzUmxjbk1nWW1WbmFXNXVhVzVuSUhkcGRHZ2dZU0JzWlhSMFpYSWdZVzVrSUdadmJHeHZkMlZrWEc0Z0lDOHZJR0o1SUdGdWVTQmpiMjFpYVc1aGRHbHZiaUJ2WmlCc1pYUjBaWEp6TENCa2FXZHBkSE1zSUhCc2RYTXNJSEJsY21sdlpDd2diM0lnYUhsd2FHVnVMbHh1SUNCeVpYUjFjbTRnTDE0b1cyRXRlbDFiWVMxNlhGeGtYRndyWEZ3dFhGd3VYU282S1Q5Y1hDOWNYQzh2YVM1MFpYTjBLSFZ5YkNrN1hHNTlPMXh1SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdkWFJwYkhNZ1BTQnlaWEYxYVhKbEtDY3VMeTR1TDNWMGFXeHpKeWs3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ0tGeHVJQ0IxZEdsc2N5NXBjMU4wWVc1a1lYSmtRbkp2ZDNObGNrVnVkaWdwSUQ5Y2JseHVJQ0F2THlCVGRHRnVaR0Z5WkNCaWNtOTNjMlZ5SUdWdWRuTWdhR0YyWlNCbWRXeHNJSE4xY0hCdmNuUWdiMllnZEdobElFRlFTWE1nYm1WbFpHVmtJSFJ2SUhSbGMzUmNiaUFnTHk4Z2QyaGxkR2hsY2lCMGFHVWdjbVZ4ZFdWemRDQlZVa3dnYVhNZ2IyWWdkR2hsSUhOaGJXVWdiM0pwWjJsdUlHRnpJR04xY25KbGJuUWdiRzlqWVhScGIyNHVYRzRnSUNobWRXNWpkR2x2YmlCemRHRnVaR0Z5WkVKeWIzZHpaWEpGYm5Zb0tTQjdYRzRnSUNBZ2RtRnlJRzF6YVdVZ1BTQXZLRzF6YVdWOGRISnBaR1Z1ZENrdmFTNTBaWE4wS0c1aGRtbG5ZWFJ2Y2k1MWMyVnlRV2RsYm5RcE8xeHVJQ0FnSUhaaGNpQjFjbXhRWVhKemFXNW5UbTlrWlNBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvSjJFbktUdGNiaUFnSUNCMllYSWdiM0pwWjJsdVZWSk1PMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdLaUJRWVhKelpTQmhJRlZTVENCMGJ5QmthWE5qYjNabGNpQnBkQ2R6SUdOdmJYQnZibVZ1ZEhOY2JpQWdJQ0FxWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdkWEpzSUZSb1pTQlZVa3dnZEc4Z1ltVWdjR0Z5YzJWa1hHNGdJQ0FnS2lCQWNtVjBkWEp1Y3lCN1QySnFaV04wZlZ4dUlDQWdJQ292WEc0Z0lDQWdablZ1WTNScGIyNGdjbVZ6YjJ4MlpWVlNUQ2gxY213cElIdGNiaUFnSUNBZ0lIWmhjaUJvY21WbUlEMGdkWEpzTzF4dVhHNGdJQ0FnSUNCcFppQW9iWE5wWlNrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJKUlNCdVpXVmtjeUJoZEhSeWFXSjFkR1VnYzJWMElIUjNhV05sSUhSdklHNXZjbTFoYkdsNlpTQndjbTl3WlhKMGFXVnpYRzRnSUNBZ0lDQWdJSFZ5YkZCaGNuTnBibWRPYjJSbExuTmxkRUYwZEhKcFluVjBaU2duYUhKbFppY3NJR2h5WldZcE8xeHVJQ0FnSUNBZ0lDQm9jbVZtSUQwZ2RYSnNVR0Z5YzJsdVowNXZaR1V1YUhKbFpqdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdkWEpzVUdGeWMybHVaMDV2WkdVdWMyVjBRWFIwY21saWRYUmxLQ2RvY21WbUp5d2dhSEpsWmlrN1hHNWNiaUFnSUNBZ0lDOHZJSFZ5YkZCaGNuTnBibWRPYjJSbElIQnliM1pwWkdWeklIUm9aU0JWY214VmRHbHNjeUJwYm5SbGNtWmhZMlVnTFNCb2RIUndPaTh2ZFhKc0xuTndaV011ZDJoaGRIZG5MbTl5Wnk4amRYSnNkWFJwYkhOY2JpQWdJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0FnSUdoeVpXWTZJSFZ5YkZCaGNuTnBibWRPYjJSbExtaHlaV1lzWEc0Z0lDQWdJQ0FnSUhCeWIzUnZZMjlzT2lCMWNteFFZWEp6YVc1blRtOWtaUzV3Y205MGIyTnZiQ0EvSUhWeWJGQmhjbk5wYm1kT2IyUmxMbkJ5YjNSdlkyOXNMbkpsY0d4aFkyVW9Mem9rTHl3Z0p5Y3BJRG9nSnljc1hHNGdJQ0FnSUNBZ0lHaHZjM1E2SUhWeWJGQmhjbk5wYm1kT2IyUmxMbWh2YzNRc1hHNGdJQ0FnSUNBZ0lITmxZWEpqYURvZ2RYSnNVR0Z5YzJsdVowNXZaR1V1YzJWaGNtTm9JRDhnZFhKc1VHRnljMmx1WjA1dlpHVXVjMlZoY21Ob0xuSmxjR3hoWTJVb0wxNWNYRDh2TENBbkp5a2dPaUFuSnl4Y2JpQWdJQ0FnSUNBZ2FHRnphRG9nZFhKc1VHRnljMmx1WjA1dlpHVXVhR0Z6YUNBL0lIVnliRkJoY25OcGJtZE9iMlJsTG1oaGMyZ3VjbVZ3YkdGalpTZ3ZYaU12TENBbkp5a2dPaUFuSnl4Y2JpQWdJQ0FnSUNBZ2FHOXpkRzVoYldVNklIVnliRkJoY25OcGJtZE9iMlJsTG1odmMzUnVZVzFsTEZ4dUlDQWdJQ0FnSUNCd2IzSjBPaUIxY214UVlYSnphVzVuVG05a1pTNXdiM0owTEZ4dUlDQWdJQ0FnSUNCd1lYUm9ibUZ0WlRvZ0tIVnliRkJoY25OcGJtZE9iMlJsTG5CaGRHaHVZVzFsTG1Ob1lYSkJkQ2d3S1NBOVBUMGdKeThuS1NBL1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFjbXhRWVhKemFXNW5UbTlrWlM1d1lYUm9ibUZ0WlNBNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5MeWNnS3lCMWNteFFZWEp6YVc1blRtOWtaUzV3WVhSb2JtRnRaVnh1SUNBZ0lDQWdmVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnZjbWxuYVc1VlVrd2dQU0J5WlhOdmJIWmxWVkpNS0hkcGJtUnZkeTVzYjJOaGRHbHZiaTVvY21WbUtUdGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDb2dSR1YwWlhKdGFXNWxJR2xtSUdFZ1ZWSk1JSE5vWVhKbGN5QjBhR1VnYzJGdFpTQnZjbWxuYVc0Z1lYTWdkR2hsSUdOMWNuSmxiblFnYkc5allYUnBiMjVjYmlBZ0lDQXFYRzRnSUNBZ0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ2NtVnhkV1Z6ZEZWU1RDQlVhR1VnVlZKTUlIUnZJSFJsYzNSY2JpQWdJQ0FxSUVCeVpYUjFjbTV6SUh0aWIyOXNaV0Z1ZlNCVWNuVmxJR2xtSUZWU1RDQnphR0Z5WlhNZ2RHaGxJSE5oYldVZ2IzSnBaMmx1TENCdmRHaGxjbmRwYzJVZ1ptRnNjMlZjYmlBZ0lDQXFMMXh1SUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCcGMxVlNURk5oYldWUGNtbG5hVzRvY21WeGRXVnpkRlZTVENrZ2UxeHVJQ0FnSUNBZ2RtRnlJSEJoY25ObFpDQTlJQ2gxZEdsc2N5NXBjMU4wY21sdVp5aHlaWEYxWlhOMFZWSk1LU2tnUHlCeVpYTnZiSFpsVlZKTUtISmxjWFZsYzNSVlVrd3BJRG9nY21WeGRXVnpkRlZTVER0Y2JpQWdJQ0FnSUhKbGRIVnliaUFvY0dGeWMyVmtMbkJ5YjNSdlkyOXNJRDA5UFNCdmNtbG5hVzVWVWt3dWNISnZkRzlqYjJ3Z0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUhCaGNuTmxaQzVvYjNOMElEMDlQU0J2Y21sbmFXNVZVa3d1YUc5emRDazdYRzRnSUNBZ2ZUdGNiaUFnZlNrb0tTQTZYRzVjYmlBZ0x5OGdUbTl1SUhOMFlXNWtZWEprSUdKeWIzZHpaWElnWlc1MmN5QW9kMlZpSUhkdmNtdGxjbk1zSUhKbFlXTjBMVzVoZEdsMlpTa2diR0ZqYXlCdVpXVmtaV1FnYzNWd2NHOXlkQzVjYmlBZ0tHWjFibU4wYVc5dUlHNXZibE4wWVc1a1lYSmtRbkp2ZDNObGNrVnVkaWdwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdhWE5WVWt4VFlXMWxUM0pwWjJsdUtDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdmVHRjYmlBZ2ZTa29LVnh1S1R0Y2JpSXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVkbUZ5SUhWMGFXeHpJRDBnY21WeGRXbHlaU2duTGk0dmRYUnBiSE1uS1R0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpQnViM0p0WVd4cGVtVklaV0ZrWlhKT1lXMWxLR2hsWVdSbGNuTXNJRzV2Y20xaGJHbDZaV1JPWVcxbEtTQjdYRzRnSUhWMGFXeHpMbVp2Y2tWaFkyZ29hR1ZoWkdWeWN5d2dablZ1WTNScGIyNGdjSEp2WTJWemMwaGxZV1JsY2loMllXeDFaU3dnYm1GdFpTa2dlMXh1SUNBZ0lHbG1JQ2h1WVcxbElDRTlQU0J1YjNKdFlXeHBlbVZrVG1GdFpTQW1KaUJ1WVcxbExuUnZWWEJ3WlhKRFlYTmxLQ2tnUFQwOUlHNXZjbTFoYkdsNlpXUk9ZVzFsTG5SdlZYQndaWEpEWVhObEtDa3BJSHRjYmlBZ0lDQWdJR2hsWVdSbGNuTmJibTl5YldGc2FYcGxaRTVoYldWZElEMGdkbUZzZFdVN1hHNGdJQ0FnSUNCa1pXeGxkR1VnYUdWaFpHVnljMXR1WVcxbFhUdGNiaUFnSUNCOVhHNGdJSDBwTzF4dWZUdGNiaUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNibHh1ZG1GeUlIVjBhV3h6SUQwZ2NtVnhkV2x5WlNnbkxpOHVMaTkxZEdsc2N5Y3BPMXh1WEc0dkx5QklaV0ZrWlhKeklIZG9iM05sSUdSMWNHeHBZMkYwWlhNZ1lYSmxJR2xuYm05eVpXUWdZbmtnYm05a1pWeHVMeThnWXk1bUxpQm9kSFJ3Y3pvdkwyNXZaR1ZxY3k1dmNtY3ZZWEJwTDJoMGRIQXVhSFJ0YkNOb2RIUndYMjFsYzNOaFoyVmZhR1ZoWkdWeWMxeHVkbUZ5SUdsbmJtOXlaVVIxY0d4cFkyRjBaVTltSUQwZ1cxeHVJQ0FuWVdkbEp5d2dKMkYxZEdodmNtbDZZWFJwYjI0bkxDQW5ZMjl1ZEdWdWRDMXNaVzVuZEdnbkxDQW5ZMjl1ZEdWdWRDMTBlWEJsSnl3Z0oyVjBZV2NuTEZ4dUlDQW5aWGh3YVhKbGN5Y3NJQ2RtY205dEp5d2dKMmh2YzNRbkxDQW5hV1l0Ylc5a2FXWnBaV1F0YzJsdVkyVW5MQ0FuYVdZdGRXNXRiMlJwWm1sbFpDMXphVzVqWlNjc1hHNGdJQ2RzWVhOMExXMXZaR2xtYVdWa0p5d2dKMnh2WTJGMGFXOXVKeXdnSjIxaGVDMW1iM0ozWVhKa2N5Y3NJQ2R3Y205NGVTMWhkWFJvYjNKcGVtRjBhVzl1Snl4Y2JpQWdKM0psWm1WeVpYSW5MQ0FuY21WMGNua3RZV1owWlhJbkxDQW5kWE5sY2kxaFoyVnVkQ2RjYmwwN1hHNWNiaThxS2x4dUlDb2dVR0Z5YzJVZ2FHVmhaR1Z5Y3lCcGJuUnZJR0Z1SUc5aWFtVmpkRnh1SUNwY2JpQXFJR0JnWUZ4dUlDb2dSR0YwWlRvZ1YyVmtMQ0F5TnlCQmRXY2dNakF4TkNBd09EbzFPRG8wT1NCSFRWUmNiaUFxSUVOdmJuUmxiblF0Vkhsd1pUb2dZWEJ3YkdsallYUnBiMjR2YW5OdmJseHVJQ29nUTI5dWJtVmpkR2x2YmpvZ2EyVmxjQzFoYkdsMlpWeHVJQ29nVkhKaGJuTm1aWEl0Ulc1amIyUnBibWM2SUdOb2RXNXJaV1JjYmlBcUlHQmdZRnh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdVM1J5YVc1bmZTQm9aV0ZrWlhKeklFaGxZV1JsY25NZ2JtVmxaR2x1WnlCMGJ5QmlaU0J3WVhKelpXUmNiaUFxSUVCeVpYUjFjbTV6SUh0UFltcGxZM1I5SUVobFlXUmxjbk1nY0dGeWMyVmtJR2x1ZEc4Z1lXNGdiMkpxWldOMFhHNGdLaTljYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnY0dGeWMyVklaV0ZrWlhKektHaGxZV1JsY25NcElIdGNiaUFnZG1GeUlIQmhjbk5sWkNBOUlIdDlPMXh1SUNCMllYSWdhMlY1TzF4dUlDQjJZWElnZG1Gc08xeHVJQ0IyWVhJZ2FUdGNibHh1SUNCcFppQW9JV2hsWVdSbGNuTXBJSHNnY21WMGRYSnVJSEJoY25ObFpEc2dmVnh1WEc0Z0lIVjBhV3h6TG1admNrVmhZMmdvYUdWaFpHVnljeTV6Y0d4cGRDZ25YRnh1Snlrc0lHWjFibU4wYVc5dUlIQmhjbk5sY2loc2FXNWxLU0I3WEc0Z0lDQWdhU0E5SUd4cGJtVXVhVzVrWlhoUFppZ25PaWNwTzF4dUlDQWdJR3RsZVNBOUlIVjBhV3h6TG5SeWFXMG9iR2x1WlM1emRXSnpkSElvTUN3Z2FTa3BMblJ2VEc5M1pYSkRZWE5sS0NrN1hHNGdJQ0FnZG1Gc0lEMGdkWFJwYkhNdWRISnBiU2hzYVc1bExuTjFZbk4wY2locElDc2dNU2twTzF4dVhHNGdJQ0FnYVdZZ0tHdGxlU2tnZTF4dUlDQWdJQ0FnYVdZZ0tIQmhjbk5sWkZ0clpYbGRJQ1ltSUdsbmJtOXlaVVIxY0d4cFkyRjBaVTltTG1sdVpHVjRUMllvYTJWNUtTQStQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdsbUlDaHJaWGtnUFQwOUlDZHpaWFF0WTI5dmEybGxKeWtnZTF4dUlDQWdJQ0FnSUNCd1lYSnpaV1JiYTJWNVhTQTlJQ2h3WVhKelpXUmJhMlY1WFNBL0lIQmhjbk5sWkZ0clpYbGRJRG9nVzEwcExtTnZibU5oZENoYmRtRnNYU2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J3WVhKelpXUmJhMlY1WFNBOUlIQmhjbk5sWkZ0clpYbGRJRDhnY0dGeWMyVmtXMnRsZVYwZ0t5QW5MQ0FuSUNzZ2RtRnNJRG9nZG1Gc08xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmU2s3WEc1Y2JpQWdjbVYwZFhKdUlIQmhjbk5sWkR0Y2JuMDdYRzRpTENJbmRYTmxJSE4wY21samRDYzdYRzVjYmk4cUtseHVJQ29nVTNsdWRHRmpkR2xqSUhOMVoyRnlJR1p2Y2lCcGJuWnZhMmx1WnlCaElHWjFibU4wYVc5dUlHRnVaQ0JsZUhCaGJtUnBibWNnWVc0Z1lYSnlZWGtnWm05eUlHRnlaM1Z0Wlc1MGN5NWNiaUFxWEc0Z0tpQkRiMjF0YjI0Z2RYTmxJR05oYzJVZ2QyOTFiR1FnWW1VZ2RHOGdkWE5sSUdCR2RXNWpkR2x2Ymk1d2NtOTBiM1I1Y0dVdVlYQndiSGxnTGx4dUlDcGNiaUFxSUNCZ1lHQnFjMXh1SUNvZ0lHWjFibU4wYVc5dUlHWW9lQ3dnZVN3Z2Vpa2dlMzFjYmlBcUlDQjJZWElnWVhKbmN5QTlJRnN4TENBeUxDQXpYVHRjYmlBcUlDQm1MbUZ3Y0d4NUtHNTFiR3dzSUdGeVozTXBPMXh1SUNvZ0lHQmdZRnh1SUNwY2JpQXFJRmRwZEdnZ1lITndjbVZoWkdBZ2RHaHBjeUJsZUdGdGNHeGxJR05oYmlCaVpTQnlaUzEzY21sMGRHVnVMbHh1SUNwY2JpQXFJQ0JnWUdCcWMxeHVJQ29nSUhOd2NtVmhaQ2htZFc1amRHbHZiaWg0TENCNUxDQjZLU0I3ZlNrb1d6RXNJRElzSUROZEtUdGNiaUFxSUNCZ1lHQmNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQmpZV3hzWW1GamExeHVJQ29nUUhKbGRIVnlibk1nZTBaMWJtTjBhVzl1ZlZ4dUlDb3ZYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVJSE53Y21WaFpDaGpZV3hzWW1GamF5a2dlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnZDNKaGNDaGhjbklwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdZMkZzYkdKaFkyc3VZWEJ3Ykhrb2JuVnNiQ3dnWVhKeUtUdGNiaUFnZlR0Y2JuMDdYRzRpTENJbmRYTmxJSE4wY21samRDYzdYRzVjYm5aaGNpQmlhVzVrSUQwZ2NtVnhkV2x5WlNnbkxpOW9aV3h3WlhKekwySnBibVFuS1R0Y2JuWmhjaUJwYzBKMVptWmxjaUE5SUhKbGNYVnBjbVVvSjJsekxXSjFabVpsY2ljcE8xeHVYRzR2S21kc2IySmhiQ0IwYjFOMGNtbHVaenAwY25WbEtpOWNibHh1THk4Z2RYUnBiSE1nYVhNZ1lTQnNhV0p5WVhKNUlHOW1JR2RsYm1WeWFXTWdhR1ZzY0dWeUlHWjFibU4wYVc5dWN5QnViMjR0YzNCbFkybG1hV01nZEc4Z1lYaHBiM05jYmx4dWRtRnlJSFJ2VTNSeWFXNW5JRDBnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaenRjYmx4dUx5b3FYRzRnS2lCRVpYUmxjbTFwYm1VZ2FXWWdZU0IyWVd4MVpTQnBjeUJoYmlCQmNuSmhlVnh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQjJZV3dnVkdobElIWmhiSFZsSUhSdklIUmxjM1JjYmlBcUlFQnlaWFIxY201eklIdGliMjlzWldGdWZTQlVjblZsSUdsbUlIWmhiSFZsSUdseklHRnVJRUZ5Y21GNUxDQnZkR2hsY25kcGMyVWdabUZzYzJWY2JpQXFMMXh1Wm5WdVkzUnBiMjRnYVhOQmNuSmhlU2gyWVd3cElIdGNiaUFnY21WMGRYSnVJSFJ2VTNSeWFXNW5MbU5oYkd3b2RtRnNLU0E5UFQwZ0oxdHZZbXBsWTNRZ1FYSnlZWGxkSnp0Y2JuMWNibHh1THlvcVhHNGdLaUJFWlhSbGNtMXBibVVnYVdZZ1lTQjJZV3gxWlNCcGN5QmhiaUJCY25KaGVVSjFabVpsY2x4dUlDcGNiaUFxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0IyWVd3Z1ZHaGxJSFpoYkhWbElIUnZJSFJsYzNSY2JpQXFJRUJ5WlhSMWNtNXpJSHRpYjI5c1pXRnVmU0JVY25WbElHbG1JSFpoYkhWbElHbHpJR0Z1SUVGeWNtRjVRblZtWm1WeUxDQnZkR2hsY25kcGMyVWdabUZzYzJWY2JpQXFMMXh1Wm5WdVkzUnBiMjRnYVhOQmNuSmhlVUoxWm1abGNpaDJZV3dwSUh0Y2JpQWdjbVYwZFhKdUlIUnZVM1J5YVc1bkxtTmhiR3dvZG1Gc0tTQTlQVDBnSjF0dlltcGxZM1FnUVhKeVlYbENkV1ptWlhKZEp6dGNibjFjYmx4dUx5b3FYRzRnS2lCRVpYUmxjbTFwYm1VZ2FXWWdZU0IyWVd4MVpTQnBjeUJoSUVadmNtMUVZWFJoWEc0Z0tseHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJSFpoYkNCVWFHVWdkbUZzZFdVZ2RHOGdkR1Z6ZEZ4dUlDb2dRSEpsZEhWeWJuTWdlMkp2YjJ4bFlXNTlJRlJ5ZFdVZ2FXWWdkbUZzZFdVZ2FYTWdZVzRnUm05eWJVUmhkR0VzSUc5MGFHVnlkMmx6WlNCbVlXeHpaVnh1SUNvdlhHNW1kVzVqZEdsdmJpQnBjMFp2Y20xRVlYUmhLSFpoYkNrZ2UxeHVJQ0J5WlhSMWNtNGdLSFI1Y0dWdlppQkdiM0p0UkdGMFlTQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElDWW1JQ2gyWVd3Z2FXNXpkR0Z1WTJWdlppQkdiM0p0UkdGMFlTazdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1JHVjBaWEp0YVc1bElHbG1JR0VnZG1Gc2RXVWdhWE1nWVNCMmFXVjNJRzl1SUdGdUlFRnljbUY1UW5WbVptVnlYRzRnS2x4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlIWmhiQ0JVYUdVZ2RtRnNkV1VnZEc4Z2RHVnpkRnh1SUNvZ1FISmxkSFZ5Ym5NZ2UySnZiMnhsWVc1OUlGUnlkV1VnYVdZZ2RtRnNkV1VnYVhNZ1lTQjJhV1YzSUc5dUlHRnVJRUZ5Y21GNVFuVm1abVZ5TENCdmRHaGxjbmRwYzJVZ1ptRnNjMlZjYmlBcUwxeHVablZ1WTNScGIyNGdhWE5CY25KaGVVSjFabVpsY2xacFpYY29kbUZzS1NCN1hHNGdJSFpoY2lCeVpYTjFiSFE3WEc0Z0lHbG1JQ2dvZEhsd1pXOW1JRUZ5Y21GNVFuVm1abVZ5SUNFOVBTQW5kVzVrWldacGJtVmtKeWtnSmlZZ0tFRnljbUY1UW5WbVptVnlMbWx6Vm1sbGR5a3BJSHRjYmlBZ0lDQnlaWE4xYkhRZ1BTQkJjbkpoZVVKMVptWmxjaTVwYzFacFpYY29kbUZzS1R0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNCeVpYTjFiSFFnUFNBb2RtRnNLU0FtSmlBb2RtRnNMbUoxWm1abGNpa2dKaVlnS0haaGJDNWlkV1ptWlhJZ2FXNXpkR0Z1WTJWdlppQkJjbkpoZVVKMVptWmxjaWs3WEc0Z0lIMWNiaUFnY21WMGRYSnVJSEpsYzNWc2REdGNibjFjYmx4dUx5b3FYRzRnS2lCRVpYUmxjbTFwYm1VZ2FXWWdZU0IyWVd4MVpTQnBjeUJoSUZOMGNtbHVaMXh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQjJZV3dnVkdobElIWmhiSFZsSUhSdklIUmxjM1JjYmlBcUlFQnlaWFIxY201eklIdGliMjlzWldGdWZTQlVjblZsSUdsbUlIWmhiSFZsSUdseklHRWdVM1J5YVc1bkxDQnZkR2hsY25kcGMyVWdabUZzYzJWY2JpQXFMMXh1Wm5WdVkzUnBiMjRnYVhOVGRISnBibWNvZG1Gc0tTQjdYRzRnSUhKbGRIVnliaUIwZVhCbGIyWWdkbUZzSUQwOVBTQW5jM1J5YVc1bkp6dGNibjFjYmx4dUx5b3FYRzRnS2lCRVpYUmxjbTFwYm1VZ2FXWWdZU0IyWVd4MVpTQnBjeUJoSUU1MWJXSmxjbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQjJZV3dnVkdobElIWmhiSFZsSUhSdklIUmxjM1JjYmlBcUlFQnlaWFIxY201eklIdGliMjlzWldGdWZTQlVjblZsSUdsbUlIWmhiSFZsSUdseklHRWdUblZ0WW1WeUxDQnZkR2hsY25kcGMyVWdabUZzYzJWY2JpQXFMMXh1Wm5WdVkzUnBiMjRnYVhOT2RXMWlaWElvZG1Gc0tTQjdYRzRnSUhKbGRIVnliaUIwZVhCbGIyWWdkbUZzSUQwOVBTQW5iblZ0WW1WeUp6dGNibjFjYmx4dUx5b3FYRzRnS2lCRVpYUmxjbTFwYm1VZ2FXWWdZU0IyWVd4MVpTQnBjeUIxYm1SbFptbHVaV1JjYmlBcVhHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdkbUZzSUZSb1pTQjJZV3gxWlNCMGJ5QjBaWE4wWEc0Z0tpQkFjbVYwZFhKdWN5QjdZbTl2YkdWaGJuMGdWSEoxWlNCcFppQjBhR1VnZG1Gc2RXVWdhWE1nZFc1a1pXWnBibVZrTENCdmRHaGxjbmRwYzJVZ1ptRnNjMlZjYmlBcUwxeHVablZ1WTNScGIyNGdhWE5WYm1SbFptbHVaV1FvZG1Gc0tTQjdYRzRnSUhKbGRIVnliaUIwZVhCbGIyWWdkbUZzSUQwOVBTQW5kVzVrWldacGJtVmtKenRjYm4xY2JseHVMeW9xWEc0Z0tpQkVaWFJsY20xcGJtVWdhV1lnWVNCMllXeDFaU0JwY3lCaGJpQlBZbXBsWTNSY2JpQXFYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnZG1Gc0lGUm9aU0IyWVd4MVpTQjBieUIwWlhOMFhHNGdLaUJBY21WMGRYSnVjeUI3WW05dmJHVmhibjBnVkhKMVpTQnBaaUIyWVd4MVpTQnBjeUJoYmlCUFltcGxZM1FzSUc5MGFHVnlkMmx6WlNCbVlXeHpaVnh1SUNvdlhHNW1kVzVqZEdsdmJpQnBjMDlpYW1WamRDaDJZV3dwSUh0Y2JpQWdjbVYwZFhKdUlIWmhiQ0FoUFQwZ2JuVnNiQ0FtSmlCMGVYQmxiMllnZG1Gc0lEMDlQU0FuYjJKcVpXTjBKenRjYm4xY2JseHVMeW9xWEc0Z0tpQkVaWFJsY20xcGJtVWdhV1lnWVNCMllXeDFaU0JwY3lCaElFUmhkR1ZjYmlBcVhHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdkbUZzSUZSb1pTQjJZV3gxWlNCMGJ5QjBaWE4wWEc0Z0tpQkFjbVYwZFhKdWN5QjdZbTl2YkdWaGJuMGdWSEoxWlNCcFppQjJZV3gxWlNCcGN5QmhJRVJoZEdVc0lHOTBhR1Z5ZDJselpTQm1ZV3h6WlZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJwYzBSaGRHVW9kbUZzS1NCN1hHNGdJSEpsZEhWeWJpQjBiMU4wY21sdVp5NWpZV3hzS0haaGJDa2dQVDA5SUNkYmIySnFaV04wSUVSaGRHVmRKenRjYm4xY2JseHVMeW9xWEc0Z0tpQkVaWFJsY20xcGJtVWdhV1lnWVNCMllXeDFaU0JwY3lCaElFWnBiR1ZjYmlBcVhHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdkbUZzSUZSb1pTQjJZV3gxWlNCMGJ5QjBaWE4wWEc0Z0tpQkFjbVYwZFhKdWN5QjdZbTl2YkdWaGJuMGdWSEoxWlNCcFppQjJZV3gxWlNCcGN5QmhJRVpwYkdVc0lHOTBhR1Z5ZDJselpTQm1ZV3h6WlZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJwYzBacGJHVW9kbUZzS1NCN1hHNGdJSEpsZEhWeWJpQjBiMU4wY21sdVp5NWpZV3hzS0haaGJDa2dQVDA5SUNkYmIySnFaV04wSUVacGJHVmRKenRjYm4xY2JseHVMeW9xWEc0Z0tpQkVaWFJsY20xcGJtVWdhV1lnWVNCMllXeDFaU0JwY3lCaElFSnNiMkpjYmlBcVhHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdkbUZzSUZSb1pTQjJZV3gxWlNCMGJ5QjBaWE4wWEc0Z0tpQkFjbVYwZFhKdWN5QjdZbTl2YkdWaGJuMGdWSEoxWlNCcFppQjJZV3gxWlNCcGN5QmhJRUpzYjJJc0lHOTBhR1Z5ZDJselpTQm1ZV3h6WlZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJwYzBKc2IySW9kbUZzS1NCN1hHNGdJSEpsZEhWeWJpQjBiMU4wY21sdVp5NWpZV3hzS0haaGJDa2dQVDA5SUNkYmIySnFaV04wSUVKc2IySmRKenRjYm4xY2JseHVMeW9xWEc0Z0tpQkVaWFJsY20xcGJtVWdhV1lnWVNCMllXeDFaU0JwY3lCaElFWjFibU4wYVc5dVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUhaaGJDQlVhR1VnZG1Gc2RXVWdkRzhnZEdWemRGeHVJQ29nUUhKbGRIVnlibk1nZTJKdmIyeGxZVzU5SUZSeWRXVWdhV1lnZG1Gc2RXVWdhWE1nWVNCR2RXNWpkR2x2Yml3Z2IzUm9aWEozYVhObElHWmhiSE5sWEc0Z0tpOWNibVoxYm1OMGFXOXVJR2x6Um5WdVkzUnBiMjRvZG1Gc0tTQjdYRzRnSUhKbGRIVnliaUIwYjFOMGNtbHVaeTVqWVd4c0tIWmhiQ2tnUFQwOUlDZGJiMkpxWldOMElFWjFibU4wYVc5dVhTYzdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1JHVjBaWEp0YVc1bElHbG1JR0VnZG1Gc2RXVWdhWE1nWVNCVGRISmxZVzFjYmlBcVhHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdkbUZzSUZSb1pTQjJZV3gxWlNCMGJ5QjBaWE4wWEc0Z0tpQkFjbVYwZFhKdWN5QjdZbTl2YkdWaGJuMGdWSEoxWlNCcFppQjJZV3gxWlNCcGN5QmhJRk4wY21WaGJTd2diM1JvWlhKM2FYTmxJR1poYkhObFhHNGdLaTljYm1aMWJtTjBhVzl1SUdselUzUnlaV0Z0S0haaGJDa2dlMXh1SUNCeVpYUjFjbTRnYVhOUFltcGxZM1FvZG1Gc0tTQW1KaUJwYzBaMWJtTjBhVzl1S0haaGJDNXdhWEJsS1R0Y2JuMWNibHh1THlvcVhHNGdLaUJFWlhSbGNtMXBibVVnYVdZZ1lTQjJZV3gxWlNCcGN5QmhJRlZTVEZObFlYSmphRkJoY21GdGN5QnZZbXBsWTNSY2JpQXFYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnZG1Gc0lGUm9aU0IyWVd4MVpTQjBieUIwWlhOMFhHNGdLaUJBY21WMGRYSnVjeUI3WW05dmJHVmhibjBnVkhKMVpTQnBaaUIyWVd4MVpTQnBjeUJoSUZWU1RGTmxZWEpqYUZCaGNtRnRjeUJ2WW1wbFkzUXNJRzkwYUdWeWQybHpaU0JtWVd4elpWeHVJQ292WEc1bWRXNWpkR2x2YmlCcGMxVlNURk5sWVhKamFGQmhjbUZ0Y3loMllXd3BJSHRjYmlBZ2NtVjBkWEp1SUhSNWNHVnZaaUJWVWt4VFpXRnlZMmhRWVhKaGJYTWdJVDA5SUNkMWJtUmxabWx1WldRbklDWW1JSFpoYkNCcGJuTjBZVzVqWlc5bUlGVlNURk5sWVhKamFGQmhjbUZ0Y3p0Y2JuMWNibHh1THlvcVhHNGdLaUJVY21sdElHVjRZMlZ6Y3lCM2FHbDBaWE53WVdObElHOW1aaUIwYUdVZ1ltVm5hVzV1YVc1bklHRnVaQ0JsYm1RZ2IyWWdZU0J6ZEhKcGJtZGNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ2MzUnlJRlJvWlNCVGRISnBibWNnZEc4Z2RISnBiVnh1SUNvZ1FISmxkSFZ5Ym5NZ2UxTjBjbWx1WjMwZ1ZHaGxJRk4wY21sdVp5Qm1jbVZsWkNCdlppQmxlR05sYzNNZ2QyaHBkR1Z6Y0dGalpWeHVJQ292WEc1bWRXNWpkR2x2YmlCMGNtbHRLSE4wY2lrZ2UxeHVJQ0J5WlhSMWNtNGdjM1J5TG5KbGNHeGhZMlVvTDE1Y1hITXFMeXdnSnljcExuSmxjR3hoWTJVb0wxeGNjeW9rTHl3Z0p5Y3BPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFUmxkR1Z5YldsdVpTQnBaaUIzWlNkeVpTQnlkVzV1YVc1bklHbHVJR0VnYzNSaGJtUmhjbVFnWW5KdmQzTmxjaUJsYm5acGNtOXViV1Z1ZEZ4dUlDcGNiaUFxSUZSb2FYTWdZV3hzYjNkeklHRjRhVzl6SUhSdklISjFiaUJwYmlCaElIZGxZaUIzYjNKclpYSXNJR0Z1WkNCeVpXRmpkQzF1WVhScGRtVXVYRzRnS2lCQ2IzUm9JR1Z1ZG1seWIyNXRaVzUwY3lCemRYQndiM0owSUZoTlRFaDBkSEJTWlhGMVpYTjBMQ0JpZFhRZ2JtOTBJR1oxYkd4NUlITjBZVzVrWVhKa0lHZHNiMkpoYkhNdVhHNGdLbHh1SUNvZ2QyVmlJSGR2Y210bGNuTTZYRzRnS2lBZ2RIbHdaVzltSUhkcGJtUnZkeUF0UGlCMWJtUmxabWx1WldSY2JpQXFJQ0IwZVhCbGIyWWdaRzlqZFcxbGJuUWdMVDRnZFc1a1pXWnBibVZrWEc0Z0tseHVJQ29nY21WaFkzUXRibUYwYVhabE9seHVJQ29nSUc1aGRtbG5ZWFJ2Y2k1d2NtOWtkV04wSUMwK0lDZFNaV0ZqZEU1aGRHbDJaU2RjYmlBcUwxeHVablZ1WTNScGIyNGdhWE5UZEdGdVpHRnlaRUp5YjNkelpYSkZibllvS1NCN1hHNGdJR2xtSUNoMGVYQmxiMllnYm1GMmFXZGhkRzl5SUNFOVBTQW5kVzVrWldacGJtVmtKeUFtSmlCdVlYWnBaMkYwYjNJdWNISnZaSFZqZENBOVBUMGdKMUpsWVdOMFRtRjBhWFpsSnlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z0tGeHVJQ0FnSUhSNWNHVnZaaUIzYVc1a2IzY2dJVDA5SUNkMWJtUmxabWx1WldRbklDWW1YRzRnSUNBZ2RIbHdaVzltSUdSdlkzVnRaVzUwSUNFOVBTQW5kVzVrWldacGJtVmtKMXh1SUNBcE8xeHVmVnh1WEc0dktpcGNiaUFxSUVsMFpYSmhkR1VnYjNabGNpQmhiaUJCY25KaGVTQnZjaUJoYmlCUFltcGxZM1FnYVc1MmIydHBibWNnWVNCbWRXNWpkR2x2YmlCbWIzSWdaV0ZqYUNCcGRHVnRMbHh1SUNwY2JpQXFJRWxtSUdCdlltcGdJR2x6SUdGdUlFRnljbUY1SUdOaGJHeGlZV05ySUhkcGJHd2dZbVVnWTJGc2JHVmtJSEJoYzNOcGJtZGNiaUFxSUhSb1pTQjJZV3gxWlN3Z2FXNWtaWGdzSUdGdVpDQmpiMjF3YkdWMFpTQmhjbkpoZVNCbWIzSWdaV0ZqYUNCcGRHVnRMbHh1SUNwY2JpQXFJRWxtSUNkdlltb25JR2x6SUdGdUlFOWlhbVZqZENCallXeHNZbUZqYXlCM2FXeHNJR0psSUdOaGJHeGxaQ0J3WVhOemFXNW5YRzRnS2lCMGFHVWdkbUZzZFdVc0lHdGxlU3dnWVc1a0lHTnZiWEJzWlhSbElHOWlhbVZqZENCbWIzSWdaV0ZqYUNCd2NtOXdaWEowZVM1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSHhCY25KaGVYMGdiMkpxSUZSb1pTQnZZbXBsWTNRZ2RHOGdhWFJsY21GMFpWeHVJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnWm00Z1ZHaGxJR05oYkd4aVlXTnJJSFJ2SUdsdWRtOXJaU0JtYjNJZ1pXRmphQ0JwZEdWdFhHNGdLaTljYm1aMWJtTjBhVzl1SUdadmNrVmhZMmdvYjJKcUxDQm1iaWtnZTF4dUlDQXZMeUJFYjI0bmRDQmliM1JvWlhJZ2FXWWdibThnZG1Gc2RXVWdjSEp2ZG1sa1pXUmNiaUFnYVdZZ0tHOWlhaUE5UFQwZ2JuVnNiQ0I4ZkNCMGVYQmxiMllnYjJKcUlEMDlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUhKbGRIVnlianRjYmlBZ2ZWeHVYRzRnSUM4dklFWnZjbU5sSUdGdUlHRnljbUY1SUdsbUlHNXZkQ0JoYkhKbFlXUjVJSE52YldWMGFHbHVaeUJwZEdWeVlXSnNaVnh1SUNCcFppQW9kSGx3Wlc5bUlHOWlhaUFoUFQwZ0oyOWlhbVZqZENjcElIdGNiaUFnSUNBdkttVnpiR2x1ZENCdWJ5MXdZWEpoYlMxeVpXRnpjMmxuYmpvd0tpOWNiaUFnSUNCdlltb2dQU0JiYjJKcVhUdGNiaUFnZlZ4dVhHNGdJR2xtSUNocGMwRnljbUY1S0c5aWFpa3BJSHRjYmlBZ0lDQXZMeUJKZEdWeVlYUmxJRzkyWlhJZ1lYSnlZWGtnZG1Gc2RXVnpYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREFzSUd3Z1BTQnZZbW91YkdWdVozUm9PeUJwSUR3Z2JEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCbWJpNWpZV3hzS0c1MWJHd3NJRzlpYWx0cFhTd2dhU3dnYjJKcUtUdGNiaUFnSUNCOVhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ0x5OGdTWFJsY21GMFpTQnZkbVZ5SUc5aWFtVmpkQ0JyWlhselhHNGdJQ0FnWm05eUlDaDJZWElnYTJWNUlHbHVJRzlpYWlrZ2UxeHVJQ0FnSUNBZ2FXWWdLRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2h2WW1vc0lHdGxlU2twSUh0Y2JpQWdJQ0FnSUNBZ1ptNHVZMkZzYkNodWRXeHNMQ0J2WW1wYmEyVjVYU3dnYTJWNUxDQnZZbW9wTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUVGalkyVndkSE1nZG1GeVlYSm5jeUJsZUhCbFkzUnBibWNnWldGamFDQmhjbWQxYldWdWRDQjBieUJpWlNCaGJpQnZZbXBsWTNRc0lIUm9aVzVjYmlBcUlHbHRiWFYwWVdKc2VTQnRaWEpuWlhNZ2RHaGxJSEJ5YjNCbGNuUnBaWE1nYjJZZ1pXRmphQ0J2WW1wbFkzUWdZVzVrSUhKbGRIVnlibk1nY21WemRXeDBMbHh1SUNwY2JpQXFJRmRvWlc0Z2JYVnNkR2x3YkdVZ2IySnFaV04wY3lCamIyNTBZV2x1SUhSb1pTQnpZVzFsSUd0bGVTQjBhR1VnYkdGMFpYSWdiMkpxWldOMElHbHVYRzRnS2lCMGFHVWdZWEpuZFcxbGJuUnpJR3hwYzNRZ2QybHNiQ0IwWVd0bElIQnlaV05sWkdWdVkyVXVYRzRnS2x4dUlDb2dSWGhoYlhCc1pUcGNiaUFxWEc0Z0tpQmdZR0JxYzF4dUlDb2dkbUZ5SUhKbGMzVnNkQ0E5SUcxbGNtZGxLSHRtYjI4NklERXlNMzBzSUh0bWIyODZJRFExTm4wcE8xeHVJQ29nWTI5dWMyOXNaUzVzYjJjb2NtVnpkV3gwTG1admJ5azdJQzh2SUc5MWRIQjFkSE1nTkRVMlhHNGdLaUJnWUdCY2JpQXFYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnYjJKcU1TQlBZbXBsWTNRZ2RHOGdiV1Z5WjJWY2JpQXFJRUJ5WlhSMWNtNXpJSHRQWW1wbFkzUjlJRkpsYzNWc2RDQnZaaUJoYkd3Z2JXVnlaMlVnY0hKdmNHVnlkR2xsYzF4dUlDb3ZYRzVtZFc1amRHbHZiaUJ0WlhKblpTZ3ZLaUJ2WW1veExDQnZZbW95TENCdlltb3pMQ0F1TGk0Z0tpOHBJSHRjYmlBZ2RtRnlJSEpsYzNWc2RDQTlJSHQ5TzF4dUlDQm1kVzVqZEdsdmJpQmhjM05wWjI1V1lXeDFaU2gyWVd3c0lHdGxlU2tnZTF4dUlDQWdJR2xtSUNoMGVYQmxiMllnY21WemRXeDBXMnRsZVYwZ1BUMDlJQ2R2WW1wbFkzUW5JQ1ltSUhSNWNHVnZaaUIyWVd3Z1BUMDlJQ2R2WW1wbFkzUW5LU0I3WEc0Z0lDQWdJQ0J5WlhOMWJIUmJhMlY1WFNBOUlHMWxjbWRsS0hKbGMzVnNkRnRyWlhsZExDQjJZV3dwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnlaWE4xYkhSYmEyVjVYU0E5SUhaaGJEdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2JDQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZzdJR2tnUENCc095QnBLeXNwSUh0Y2JpQWdJQ0JtYjNKRllXTm9LR0Z5WjNWdFpXNTBjMXRwWFN3Z1lYTnphV2R1Vm1Gc2RXVXBPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNTlYRzVjYmk4cUtseHVJQ29nUlhoMFpXNWtjeUJ2WW1wbFkzUWdZU0JpZVNCdGRYUmhZbXg1SUdGa1pHbHVaeUIwYnlCcGRDQjBhR1VnY0hKdmNHVnlkR2xsY3lCdlppQnZZbXBsWTNRZ1lpNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1lTQlVhR1VnYjJKcVpXTjBJSFJ2SUdKbElHVjRkR1Z1WkdWa1hHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdZaUJVYUdVZ2IySnFaV04wSUhSdklHTnZjSGtnY0hKdmNHVnlkR2xsY3lCbWNtOXRYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnZEdocGMwRnlaeUJVYUdVZ2IySnFaV04wSUhSdklHSnBibVFnWm5WdVkzUnBiMjRnZEc5Y2JpQXFJRUJ5WlhSMWNtNGdlMDlpYW1WamRIMGdWR2hsSUhKbGMzVnNkR2x1WnlCMllXeDFaU0J2WmlCdlltcGxZM1FnWVZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJsZUhSbGJtUW9ZU3dnWWl3Z2RHaHBjMEZ5WnlrZ2UxeHVJQ0JtYjNKRllXTm9LR0lzSUdaMWJtTjBhVzl1SUdGemMybG5ibFpoYkhWbEtIWmhiQ3dnYTJWNUtTQjdYRzRnSUNBZ2FXWWdLSFJvYVhOQmNtY2dKaVlnZEhsd1pXOW1JSFpoYkNBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJQ0FnWVZ0clpYbGRJRDBnWW1sdVpDaDJZV3dzSUhSb2FYTkJjbWNwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQmhXMnRsZVYwZ1BTQjJZV3c3WEc0Z0lDQWdmVnh1SUNCOUtUdGNiaUFnY21WMGRYSnVJR0U3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdlMXh1SUNCcGMwRnljbUY1T2lCcGMwRnljbUY1TEZ4dUlDQnBjMEZ5Y21GNVFuVm1abVZ5T2lCcGMwRnljbUY1UW5WbVptVnlMRnh1SUNCcGMwSjFabVpsY2pvZ2FYTkNkV1ptWlhJc1hHNGdJR2x6Um05eWJVUmhkR0U2SUdselJtOXliVVJoZEdFc1hHNGdJR2x6UVhKeVlYbENkV1ptWlhKV2FXVjNPaUJwYzBGeWNtRjVRblZtWm1WeVZtbGxkeXhjYmlBZ2FYTlRkSEpwYm1jNklHbHpVM1J5YVc1bkxGeHVJQ0JwYzA1MWJXSmxjam9nYVhOT2RXMWlaWElzWEc0Z0lHbHpUMkpxWldOME9pQnBjMDlpYW1WamRDeGNiaUFnYVhOVmJtUmxabWx1WldRNklHbHpWVzVrWldacGJtVmtMRnh1SUNCcGMwUmhkR1U2SUdselJHRjBaU3hjYmlBZ2FYTkdhV3hsT2lCcGMwWnBiR1VzWEc0Z0lHbHpRbXh2WWpvZ2FYTkNiRzlpTEZ4dUlDQnBjMFoxYm1OMGFXOXVPaUJwYzBaMWJtTjBhVzl1TEZ4dUlDQnBjMU4wY21WaGJUb2dhWE5UZEhKbFlXMHNYRzRnSUdselZWSk1VMlZoY21Ob1VHRnlZVzF6T2lCcGMxVlNURk5sWVhKamFGQmhjbUZ0Y3l4Y2JpQWdhWE5UZEdGdVpHRnlaRUp5YjNkelpYSkZiblk2SUdselUzUmhibVJoY21SQ2NtOTNjMlZ5Ulc1MkxGeHVJQ0JtYjNKRllXTm9PaUJtYjNKRllXTm9MRnh1SUNCdFpYSm5aVG9nYldWeVoyVXNYRzRnSUdWNGRHVnVaRG9nWlhoMFpXNWtMRnh1SUNCMGNtbHRPaUIwY21sdFhHNTlPMXh1SWl3aUx5b2hYRzRnS2lCRVpYUmxjbTFwYm1VZ2FXWWdZVzRnYjJKcVpXTjBJR2x6SUdFZ1FuVm1abVZ5WEc0Z0tseHVJQ29nUUdGMWRHaHZjaUFnSUVabGNtOXpjeUJCWW05MWEyaGhaR2xxWldnZ1BHaDBkSEJ6T2k4dlptVnliM056TG05eVp6NWNiaUFxSUVCc2FXTmxibk5sSUNCTlNWUmNiaUFxTDF4dVhHNHZMeUJVYUdVZ1gybHpRblZtWm1WeUlHTm9aV05ySUdseklHWnZjaUJUWVdaaGNta2dOUzAzSUhOMWNIQnZjblFzSUdKbFkyRjFjMlVnYVhRbmN5QnRhWE56YVc1blhHNHZMeUJQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbU52Ym5OMGNuVmpkRzl5TGlCU1pXMXZkbVVnZEdocGN5QmxkbVZ1ZEhWaGJHeDVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVJQ2h2WW1vcElIdGNiaUFnY21WMGRYSnVJRzlpYWlBaFBTQnVkV3hzSUNZbUlDaHBjMEoxWm1abGNpaHZZbW9wSUh4OElHbHpVMnh2ZDBKMVptWmxjaWh2WW1vcElIeDhJQ0VoYjJKcUxsOXBjMEoxWm1abGNpbGNibjFjYmx4dVpuVnVZM1JwYjI0Z2FYTkNkV1ptWlhJZ0tHOWlhaWtnZTF4dUlDQnlaWFIxY200Z0lTRnZZbW91WTI5dWMzUnlkV04wYjNJZ0ppWWdkSGx3Wlc5bUlHOWlhaTVqYjI1emRISjFZM1J2Y2k1cGMwSjFabVpsY2lBOVBUMGdKMloxYm1OMGFXOXVKeUFtSmlCdlltb3VZMjl1YzNSeWRXTjBiM0l1YVhOQ2RXWm1aWElvYjJKcUtWeHVmVnh1WEc0dkx5QkdiM0lnVG05a1pTQjJNQzR4TUNCemRYQndiM0owTGlCU1pXMXZkbVVnZEdocGN5QmxkbVZ1ZEhWaGJHeDVMbHh1Wm5WdVkzUnBiMjRnYVhOVGJHOTNRblZtWm1WeUlDaHZZbW9wSUh0Y2JpQWdjbVYwZFhKdUlIUjVjR1Z2WmlCdlltb3VjbVZoWkVac2IyRjBURVVnUFQwOUlDZG1kVzVqZEdsdmJpY2dKaVlnZEhsd1pXOW1JRzlpYWk1emJHbGpaU0E5UFQwZ0oyWjFibU4wYVc5dUp5QW1KaUJwYzBKMVptWmxjaWh2WW1vdWMyeHBZMlVvTUN3Z01Da3BYRzU5WEc0aUxDSXZMeUJ6YUdsdElHWnZjaUIxYzJsdVp5QndjbTlqWlhOeklHbHVJR0p5YjNkelpYSmNiblpoY2lCd2NtOWpaWE56SUQwZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN2ZUdGNibHh1THk4Z1kyRmphR1ZrSUdaeWIyMGdkMmhoZEdWMlpYSWdaMnh2WW1Gc0lHbHpJSEJ5WlhObGJuUWdjMjhnZEdoaGRDQjBaWE4wSUhKMWJtNWxjbk1nZEdoaGRDQnpkSFZpSUdsMFhHNHZMeUJrYjI0bmRDQmljbVZoYXlCMGFHbHVaM011SUNCQ2RYUWdkMlVnYm1WbFpDQjBieUIzY21Gd0lHbDBJR2x1SUdFZ2RISjVJR05oZEdOb0lHbHVJR05oYzJVZ2FYUWdhWE5jYmk4dklIZHlZWEJ3WldRZ2FXNGdjM1J5YVdOMElHMXZaR1VnWTI5a1pTQjNhR2xqYUNCa2IyVnpiaWQwSUdSbFptbHVaU0JoYm5rZ1oyeHZZbUZzY3k0Z0lFbDBKM01nYVc1emFXUmxJR0ZjYmk4dklHWjFibU4wYVc5dUlHSmxZMkYxYzJVZ2RISjVMMk5oZEdOb1pYTWdaR1Z2Y0hScGJXbDZaU0JwYmlCalpYSjBZV2x1SUdWdVoybHVaWE11WEc1Y2JuWmhjaUJqWVdOb1pXUlRaWFJVYVcxbGIzVjBPMXh1ZG1GeUlHTmhZMmhsWkVOc1pXRnlWR2x0Wlc5MWREdGNibHh1Wm5WdVkzUnBiMjRnWkdWbVlYVnNkRk5sZEZScGJXOTFkQ2dwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KM05sZEZScGJXVnZkWFFnYUdGeklHNXZkQ0JpWldWdUlHUmxabWx1WldRbktUdGNibjFjYm1aMWJtTjBhVzl1SUdSbFptRjFiSFJEYkdWaGNsUnBiV1Z2ZFhRZ0tDa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblkyeGxZWEpVYVcxbGIzVjBJR2hoY3lCdWIzUWdZbVZsYmlCa1pXWnBibVZrSnlrN1hHNTlYRzRvWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnYzJWMFZHbHRaVzkxZENBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZqYUdWa1UyVjBWR2x0Wlc5MWRDQTlJSE5sZEZScGJXVnZkWFE3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZV05vWldSVFpYUlVhVzFsYjNWMElEMGdaR1ZtWVhWc2RGTmxkRlJwYlc5MWREdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQWdJQ0FnWTJGamFHVmtVMlYwVkdsdFpXOTFkQ0E5SUdSbFptRjFiSFJUWlhSVWFXMXZkWFE3WEc0Z0lDQWdmVnh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ1kyeGxZWEpVYVcxbGIzVjBJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCallXTm9aV1JEYkdWaGNsUnBiV1Z2ZFhRZ1BTQmpiR1ZoY2xScGJXVnZkWFE3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZV05vWldSRGJHVmhjbFJwYldWdmRYUWdQU0JrWldaaGRXeDBRMnhsWVhKVWFXMWxiM1YwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUNBZ0lDQmpZV05vWldSRGJHVmhjbFJwYldWdmRYUWdQU0JrWldaaGRXeDBRMnhsWVhKVWFXMWxiM1YwTzF4dUlDQWdJSDFjYm4wZ0tDa3BYRzVtZFc1amRHbHZiaUJ5ZFc1VWFXMWxiM1YwS0daMWJpa2dlMXh1SUNBZ0lHbG1JQ2hqWVdOb1pXUlRaWFJVYVcxbGIzVjBJRDA5UFNCelpYUlVhVzFsYjNWMEtTQjdYRzRnSUNBZ0lDQWdJQzh2Ym05eWJXRnNJR1Z1ZG1seWIyMWxiblJ6SUdsdUlITmhibVVnYzJsMGRXRjBhVzl1YzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYzJWMFZHbHRaVzkxZENobWRXNHNJREFwTzF4dUlDQWdJSDFjYmlBZ0lDQXZMeUJwWmlCelpYUlVhVzFsYjNWMElIZGhjMjRuZENCaGRtRnBiR0ZpYkdVZ1luVjBJSGRoY3lCc1lYUjBaWElnWkdWbWFXNWxaRnh1SUNBZ0lHbG1JQ2dvWTJGamFHVmtVMlYwVkdsdFpXOTFkQ0E5UFQwZ1pHVm1ZWFZzZEZObGRGUnBiVzkxZENCOGZDQWhZMkZqYUdWa1UyVjBWR2x0Wlc5MWRDa2dKaVlnYzJWMFZHbHRaVzkxZENrZ2UxeHVJQ0FnSUNBZ0lDQmpZV05vWldSVFpYUlVhVzFsYjNWMElEMGdjMlYwVkdsdFpXOTFkRHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE5sZEZScGJXVnZkWFFvWm5WdUxDQXdLVHRjYmlBZ0lDQjlYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnTHk4Z2QyaGxiaUIzYUdWdUlITnZiV1ZpYjJSNUlHaGhjeUJ6WTNKbGQyVmtJSGRwZEdnZ2MyVjBWR2x0Wlc5MWRDQmlkWFFnYm04Z1NTNUZMaUJ0WVdSa2JtVnpjMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMkZqYUdWa1UyVjBWR2x0Wlc5MWRDaG1kVzRzSURBcE8xeHVJQ0FnSUgwZ1kyRjBZMmdvWlNsN1hHNGdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJYYUdWdUlIZGxJR0Z5WlNCcGJpQkpMa1V1SUdKMWRDQjBhR1VnYzJOeWFYQjBJR2hoY3lCaVpXVnVJR1YyWVd4bFpDQnpieUJKTGtVdUlHUnZaWE51SjNRZ2RISjFjM1FnZEdobElHZHNiMkpoYkNCdlltcGxZM1FnZDJobGJpQmpZV3hzWldRZ2JtOXliV0ZzYkhsY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmpZV05vWldSVFpYUlVhVzFsYjNWMExtTmhiR3dvYm5Wc2JDd2dablZ1TENBd0tUdGNiaUFnSUNBZ0lDQWdmU0JqWVhSamFDaGxLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJSE5oYldVZ1lYTWdZV0p2ZG1VZ1luVjBJSGRvWlc0Z2FYUW5jeUJoSUhabGNuTnBiMjRnYjJZZ1NTNUZMaUIwYUdGMElHMTFjM1FnYUdGMlpTQjBhR1VnWjJ4dlltRnNJRzlpYW1WamRDQm1iM0lnSjNSb2FYTW5MQ0JvYjNCbWRXeHNlU0J2ZFhJZ1kyOXVkR1Y0ZENCamIzSnlaV04wSUc5MGFHVnlkMmx6WlNCcGRDQjNhV3hzSUhSb2NtOTNJR0VnWjJ4dlltRnNJR1Z5Y205eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMkZqYUdWa1UyVjBWR2x0Wlc5MWRDNWpZV3hzS0hSb2FYTXNJR1oxYml3Z01DazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmx4dWZWeHVablZ1WTNScGIyNGdjblZ1UTJ4bFlYSlVhVzFsYjNWMEtHMWhjbXRsY2lrZ2UxeHVJQ0FnSUdsbUlDaGpZV05vWldSRGJHVmhjbFJwYldWdmRYUWdQVDA5SUdOc1pXRnlWR2x0Wlc5MWRDa2dlMXh1SUNBZ0lDQWdJQ0F2TDI1dmNtMWhiQ0JsYm5acGNtOXRaVzUwY3lCcGJpQnpZVzVsSUhOcGRIVmhkR2x2Ym5OY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOc1pXRnlWR2x0Wlc5MWRDaHRZWEpyWlhJcE8xeHVJQ0FnSUgxY2JpQWdJQ0F2THlCcFppQmpiR1ZoY2xScGJXVnZkWFFnZDJGemJpZDBJR0YyWVdsc1lXSnNaU0JpZFhRZ2QyRnpJR3hoZEhSbGNpQmtaV1pwYm1Wa1hHNGdJQ0FnYVdZZ0tDaGpZV05vWldSRGJHVmhjbFJwYldWdmRYUWdQVDA5SUdSbFptRjFiSFJEYkdWaGNsUnBiV1Z2ZFhRZ2ZId2dJV05oWTJobFpFTnNaV0Z5VkdsdFpXOTFkQ2tnSmlZZ1kyeGxZWEpVYVcxbGIzVjBLU0I3WEc0Z0lDQWdJQ0FnSUdOaFkyaGxaRU5zWldGeVZHbHRaVzkxZENBOUlHTnNaV0Z5VkdsdFpXOTFkRHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR05zWldGeVZHbHRaVzkxZENodFlYSnJaWElwTzF4dUlDQWdJSDFjYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBdkx5QjNhR1Z1SUhkb1pXNGdjMjl0WldKdlpIa2dhR0Z6SUhOamNtVjNaV1FnZDJsMGFDQnpaWFJVYVcxbGIzVjBJR0oxZENCdWJ5QkpMa1V1SUcxaFpHUnVaWE56WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJqWVdOb1pXUkRiR1ZoY2xScGJXVnZkWFFvYldGeWEyVnlLVHRjYmlBZ0lDQjlJR05oZEdOb0lDaGxLWHRjYmlBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGZG9aVzRnZDJVZ1lYSmxJR2x1SUVrdVJTNGdZblYwSUhSb1pTQnpZM0pwY0hRZ2FHRnpJR0psWlc0Z1pYWmhiR1ZrSUhOdklFa3VSUzRnWkc5bGMyNG5kQ0FnZEhKMWMzUWdkR2hsSUdkc2IySmhiQ0J2WW1wbFkzUWdkMmhsYmlCallXeHNaV1FnYm05eWJXRnNiSGxjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCallXTm9aV1JEYkdWaGNsUnBiV1Z2ZFhRdVkyRnNiQ2h1ZFd4c0xDQnRZWEpyWlhJcE8xeHVJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaGxLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJSE5oYldVZ1lYTWdZV0p2ZG1VZ1luVjBJSGRvWlc0Z2FYUW5jeUJoSUhabGNuTnBiMjRnYjJZZ1NTNUZMaUIwYUdGMElHMTFjM1FnYUdGMlpTQjBhR1VnWjJ4dlltRnNJRzlpYW1WamRDQm1iM0lnSjNSb2FYTW5MQ0JvYjNCbWRXeHNlU0J2ZFhJZ1kyOXVkR1Y0ZENCamIzSnlaV04wSUc5MGFHVnlkMmx6WlNCcGRDQjNhV3hzSUhSb2NtOTNJR0VnWjJ4dlltRnNJR1Z5Y205eUxseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1UyOXRaU0IyWlhKemFXOXVjeUJ2WmlCSkxrVXVJR2hoZG1VZ1pHbG1abVZ5Wlc1MElISjFiR1Z6SUdadmNpQmpiR1ZoY2xScGJXVnZkWFFnZG5NZ2MyVjBWR2x0Wlc5MWRGeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR05oWTJobFpFTnNaV0Z5VkdsdFpXOTFkQzVqWVd4c0tIUm9hWE1zSUcxaGNtdGxjaWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JseHVYRzU5WEc1MllYSWdjWFZsZFdVZ1BTQmJYVHRjYm5aaGNpQmtjbUZwYm1sdVp5QTlJR1poYkhObE8xeHVkbUZ5SUdOMWNuSmxiblJSZFdWMVpUdGNiblpoY2lCeGRXVjFaVWx1WkdWNElEMGdMVEU3WEc1Y2JtWjFibU4wYVc5dUlHTnNaV0Z1VlhCT1pYaDBWR2xqYXlncElIdGNiaUFnSUNCcFppQW9JV1J5WVdsdWFXNW5JSHg4SUNGamRYSnlaVzUwVVhWbGRXVXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNiaUFnSUNCa2NtRnBibWx1WnlBOUlHWmhiSE5sTzF4dUlDQWdJR2xtSUNoamRYSnlaVzUwVVhWbGRXVXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQWdJSEYxWlhWbElEMGdZM1Z5Y21WdWRGRjFaWFZsTG1OdmJtTmhkQ2h4ZFdWMVpTazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2NYVmxkV1ZKYm1SbGVDQTlJQzB4TzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvY1hWbGRXVXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQWdJR1J5WVdsdVVYVmxkV1VvS1R0Y2JpQWdJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJR1J5WVdsdVVYVmxkV1VvS1NCN1hHNGdJQ0FnYVdZZ0tHUnlZV2x1YVc1bktTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNGdJQ0FnZG1GeUlIUnBiV1Z2ZFhRZ1BTQnlkVzVVYVcxbGIzVjBLR05zWldGdVZYQk9aWGgwVkdsamF5azdYRzRnSUNBZ1pISmhhVzVwYm1jZ1BTQjBjblZsTzF4dVhHNGdJQ0FnZG1GeUlHeGxiaUE5SUhGMVpYVmxMbXhsYm1kMGFEdGNiaUFnSUNCM2FHbHNaU2hzWlc0cElIdGNiaUFnSUNBZ0lDQWdZM1Z5Y21WdWRGRjFaWFZsSUQwZ2NYVmxkV1U3WEc0Z0lDQWdJQ0FnSUhGMVpYVmxJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lIZG9hV3hsSUNnckszRjFaWFZsU1c1a1pYZ2dQQ0JzWlc0cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGpkWEp5Wlc1MFVYVmxkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamRYSnlaVzUwVVhWbGRXVmJjWFZsZFdWSmJtUmxlRjB1Y25WdUtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjWFZsZFdWSmJtUmxlQ0E5SUMweE8xeHVJQ0FnSUNBZ0lDQnNaVzRnUFNCeGRXVjFaUzVzWlc1bmRHZzdYRzRnSUNBZ2ZWeHVJQ0FnSUdOMWNuSmxiblJSZFdWMVpTQTlJRzUxYkd3N1hHNGdJQ0FnWkhKaGFXNXBibWNnUFNCbVlXeHpaVHRjYmlBZ0lDQnlkVzVEYkdWaGNsUnBiV1Z2ZFhRb2RHbHRaVzkxZENrN1hHNTlYRzVjYm5CeWIyTmxjM011Ym1WNGRGUnBZMnNnUFNCbWRXNWpkR2x2YmlBb1puVnVLU0I3WEc0Z0lDQWdkbUZ5SUdGeVozTWdQU0J1WlhjZ1FYSnlZWGtvWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0F0SURFcE8xeHVJQ0FnSUdsbUlDaGhjbWQxYldWdWRITXViR1Z1WjNSb0lENGdNU2tnZTF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNVHNnYVNBOElHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZWEpuYzF0cElDMGdNVjBnUFNCaGNtZDFiV1Z1ZEhOYmFWMDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NYVmxkV1V1Y0hWemFDaHVaWGNnU1hSbGJTaG1kVzRzSUdGeVozTXBLVHRjYmlBZ0lDQnBaaUFvY1hWbGRXVXViR1Z1WjNSb0lEMDlQU0F4SUNZbUlDRmtjbUZwYm1sdVp5a2dlMXh1SUNBZ0lDQWdJQ0J5ZFc1VWFXMWxiM1YwS0dSeVlXbHVVWFZsZFdVcE8xeHVJQ0FnSUgxY2JuMDdYRzVjYmk4dklIWTRJR3hwYTJWeklIQnlaV1JwWTNScFlteGxJRzlpYW1WamRITmNibVoxYm1OMGFXOXVJRWwwWlcwb1puVnVMQ0JoY25KaGVTa2dlMXh1SUNBZ0lIUm9hWE11Wm5WdUlEMGdablZ1TzF4dUlDQWdJSFJvYVhNdVlYSnlZWGtnUFNCaGNuSmhlVHRjYm4xY2JrbDBaVzB1Y0hKdmRHOTBlWEJsTG5KMWJpQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0IwYUdsekxtWjFiaTVoY0hCc2VTaHVkV3hzTENCMGFHbHpMbUZ5Y21GNUtUdGNibjA3WEc1d2NtOWpaWE56TG5ScGRHeGxJRDBnSjJKeWIzZHpaWEluTzF4dWNISnZZMlZ6Y3k1aWNtOTNjMlZ5SUQwZ2RISjFaVHRjYm5CeWIyTmxjM011Wlc1MklEMGdlMzA3WEc1d2NtOWpaWE56TG1GeVozWWdQU0JiWFR0Y2JuQnliMk5sYzNNdWRtVnljMmx2YmlBOUlDY25PeUF2THlCbGJYQjBlU0J6ZEhKcGJtY2dkRzhnWVhadmFXUWdjbVZuWlhod0lHbHpjM1ZsYzF4dWNISnZZMlZ6Y3k1MlpYSnphVzl1Y3lBOUlIdDlPMXh1WEc1bWRXNWpkR2x2YmlCdWIyOXdLQ2tnZTMxY2JseHVjSEp2WTJWemN5NXZiaUE5SUc1dmIzQTdYRzV3Y205alpYTnpMbUZrWkV4cGMzUmxibVZ5SUQwZ2JtOXZjRHRjYm5CeWIyTmxjM011YjI1alpTQTlJRzV2YjNBN1hHNXdjbTlqWlhOekxtOW1aaUE5SUc1dmIzQTdYRzV3Y205alpYTnpMbkpsYlc5MlpVeHBjM1JsYm1WeUlEMGdibTl2Y0R0Y2JuQnliMk5sYzNNdWNtVnRiM1psUVd4c1RHbHpkR1Z1WlhKeklEMGdibTl2Y0R0Y2JuQnliMk5sYzNNdVpXMXBkQ0E5SUc1dmIzQTdYRzV3Y205alpYTnpMbkJ5WlhCbGJtUk1hWE4wWlc1bGNpQTlJRzV2YjNBN1hHNXdjbTlqWlhOekxuQnlaWEJsYm1SUGJtTmxUR2x6ZEdWdVpYSWdQU0J1YjI5d08xeHVYRzV3Y205alpYTnpMbXhwYzNSbGJtVnljeUE5SUdaMWJtTjBhVzl1SUNodVlXMWxLU0I3SUhKbGRIVnliaUJiWFNCOVhHNWNibkJ5YjJObGMzTXVZbWx1WkdsdVp5QTlJR1oxYm1OMGFXOXVJQ2h1WVcxbEtTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Nkd2NtOWpaWE56TG1KcGJtUnBibWNnYVhNZ2JtOTBJSE4xY0hCdmNuUmxaQ2NwTzF4dWZUdGNibHh1Y0hKdlkyVnpjeTVqZDJRZ1BTQm1kVzVqZEdsdmJpQW9LU0I3SUhKbGRIVnliaUFuTHljZ2ZUdGNibkJ5YjJObGMzTXVZMmhrYVhJZ1BTQm1kVzVqZEdsdmJpQW9aR2x5S1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2R3Y205alpYTnpMbU5vWkdseUlHbHpJRzV2ZENCemRYQndiM0owWldRbktUdGNibjA3WEc1d2NtOWpaWE56TG5WdFlYTnJJRDBnWm5WdVkzUnBiMjRvS1NCN0lISmxkSFZ5YmlBd095QjlPMXh1SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdjbVZ3YkdGalpTQTlJRk4wY21sdVp5NXdjbTkwYjNSNWNHVXVjbVZ3YkdGalpUdGNiblpoY2lCd1pYSmpaVzUwVkhkbGJuUnBaWE1nUFNBdkpUSXdMMmM3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UxeHVJQ0FnSUNka1pXWmhkV3gwSnpvZ0oxSkdRek01T0RZbkxGeHVJQ0FnSUdadmNtMWhkSFJsY25NNklIdGNiaUFnSUNBZ0lDQWdVa1pETVRjek9Eb2dablZ1WTNScGIyNGdLSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY21Wd2JHRmpaUzVqWVd4c0tIWmhiSFZsTENCd1pYSmpaVzUwVkhkbGJuUnBaWE1zSUNjckp5azdYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUZKR1F6TTVPRFk2SUdaMWJtTjBhVzl1SUNoMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIWmhiSFZsTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JpQWdJQ0JTUmtNeE56TTRPaUFuVWtaRE1UY3pPQ2NzWEc0Z0lDQWdVa1pETXprNE5qb2dKMUpHUXpNNU9EWW5YRzU5TzF4dUlpd2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNTJZWElnYzNSeWFXNW5hV1o1SUQwZ2NtVnhkV2x5WlNnbkxpOXpkSEpwYm1kcFpua25LVHRjYm5aaGNpQndZWEp6WlNBOUlISmxjWFZwY21Vb0p5NHZjR0Z5YzJVbktUdGNiblpoY2lCbWIzSnRZWFJ6SUQwZ2NtVnhkV2x5WlNnbkxpOW1iM0p0WVhSekp5azdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnZTF4dUlDQWdJR1p2Y20xaGRITTZJR1p2Y20xaGRITXNYRzRnSUNBZ2NHRnljMlU2SUhCaGNuTmxMRnh1SUNBZ0lITjBjbWx1WjJsbWVUb2djM1J5YVc1bmFXWjVYRzU5TzF4dUlpd2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNTJZWElnZFhScGJITWdQU0J5WlhGMWFYSmxLQ2N1TDNWMGFXeHpKeWs3WEc1Y2JuWmhjaUJvWVhNZ1BTQlBZbXBsWTNRdWNISnZkRzkwZVhCbExtaGhjMDkzYmxCeWIzQmxjblI1TzF4dVhHNTJZWElnWkdWbVlYVnNkSE1nUFNCN1hHNGdJQ0FnWVd4c2IzZEViM1J6T2lCbVlXeHpaU3hjYmlBZ0lDQmhiR3h2ZDFCeWIzUnZkSGx3WlhNNklHWmhiSE5sTEZ4dUlDQWdJR0Z5Y21GNVRHbHRhWFE2SURJd0xGeHVJQ0FnSUdSbFkyOWtaWEk2SUhWMGFXeHpMbVJsWTI5a1pTeGNiaUFnSUNCa1pXeHBiV2wwWlhJNklDY21KeXhjYmlBZ0lDQmtaWEIwYURvZ05TeGNiaUFnSUNCd1lYSmhiV1YwWlhKTWFXMXBkRG9nTVRBd01DeGNiaUFnSUNCd2JHRnBiazlpYW1WamRITTZJR1poYkhObExGeHVJQ0FnSUhOMGNtbGpkRTUxYkd4SVlXNWtiR2x1WnpvZ1ptRnNjMlZjYm4wN1hHNWNiblpoY2lCd1lYSnpaVlpoYkhWbGN5QTlJR1oxYm1OMGFXOXVJSEJoY25ObFVYVmxjbmxUZEhKcGJtZFdZV3gxWlhNb2MzUnlMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lDQWdkbUZ5SUc5aWFpQTlJSHQ5TzF4dUlDQWdJSFpoY2lCamJHVmhibE4wY2lBOUlHOXdkR2x2Ym5NdWFXZHViM0psVVhWbGNubFFjbVZtYVhnZ1B5QnpkSEl1Y21Wd2JHRmpaU2d2WGx4Y1B5OHNJQ2NuS1NBNklITjBjanRjYmlBZ0lDQjJZWElnYkdsdGFYUWdQU0J2Y0hScGIyNXpMbkJoY21GdFpYUmxja3hwYldsMElEMDlQU0JKYm1acGJtbDBlU0EvSUhWdVpHVm1hVzVsWkNBNklHOXdkR2x2Ym5NdWNHRnlZVzFsZEdWeVRHbHRhWFE3WEc0Z0lDQWdkbUZ5SUhCaGNuUnpJRDBnWTJ4bFlXNVRkSEl1YzNCc2FYUW9iM0IwYVc5dWN5NWtaV3hwYldsMFpYSXNJR3hwYldsMEtUdGNibHh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2djR0Z5ZEhNdWJHVnVaM1JvT3lBcksya3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlIQmhjblFnUFNCd1lYSjBjMXRwWFR0Y2JseHVJQ0FnSUNBZ0lDQjJZWElnWW5KaFkydGxkRVZ4ZFdGc2MxQnZjeUE5SUhCaGNuUXVhVzVrWlhoUFppZ25YVDBuS1R0Y2JpQWdJQ0FnSUNBZ2RtRnlJSEJ2Y3lBOUlHSnlZV05yWlhSRmNYVmhiSE5RYjNNZ1BUMDlJQzB4SUQ4Z2NHRnlkQzVwYm1SbGVFOW1LQ2M5SnlrZ09pQmljbUZqYTJWMFJYRjFZV3h6VUc5eklDc2dNVHRjYmx4dUlDQWdJQ0FnSUNCMllYSWdhMlY1TENCMllXdzdYRzRnSUNBZ0lDQWdJR2xtSUNod2IzTWdQVDA5SUMweEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCclpYa2dQU0J2Y0hScGIyNXpMbVJsWTI5a1pYSW9jR0Z5ZEN3Z1pHVm1ZWFZzZEhNdVpHVmpiMlJsY2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd3Z1BTQnZjSFJwYjI1ekxuTjBjbWxqZEU1MWJHeElZVzVrYkdsdVp5QS9JRzUxYkd3Z09pQW5KenRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHdGxlU0E5SUc5d2RHbHZibk11WkdWamIyUmxjaWh3WVhKMExuTnNhV05sS0RBc0lIQnZjeWtzSUdSbFptRjFiSFJ6TG1SbFkyOWtaWElwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzSUQwZ2IzQjBhVzl1Y3k1a1pXTnZaR1Z5S0hCaGNuUXVjMnhwWTJVb2NHOXpJQ3NnTVNrc0lHUmxabUYxYkhSekxtUmxZMjlrWlhJcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNob1lYTXVZMkZzYkNodlltb3NJR3RsZVNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUc5aWFsdHJaWGxkSUQwZ1cxMHVZMjl1WTJGMEtHOWlhbHRyWlhsZEtTNWpiMjVqWVhRb2RtRnNLVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHOWlhbHRyWlhsZElEMGdkbUZzTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJRzlpYWp0Y2JuMDdYRzVjYm5aaGNpQndZWEp6WlU5aWFtVmpkQ0E5SUdaMWJtTjBhVzl1SUNoamFHRnBiaXdnZG1Gc0xDQnZjSFJwYjI1ektTQjdYRzRnSUNBZ2RtRnlJR3hsWVdZZ1BTQjJZV3c3WEc1Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ1kyaGhhVzR1YkdWdVozUm9JQzBnTVRzZ2FTQStQU0F3T3lBdExXa3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHOWlhanRjYmlBZ0lDQWdJQ0FnZG1GeUlISnZiM1FnUFNCamFHRnBibHRwWFR0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvY205dmRDQTlQVDBnSjF0ZEp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2IySnFJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2WW1vZ1BTQnZZbW91WTI5dVkyRjBLR3hsWVdZcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYjJKcUlEMGdiM0IwYVc5dWN5NXdiR0ZwYms5aWFtVmpkSE1nUHlCUFltcGxZM1F1WTNKbFlYUmxLRzUxYkd3cElEb2dlMzA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWTJ4bFlXNVNiMjkwSUQwZ2NtOXZkQzVqYUdGeVFYUW9NQ2tnUFQwOUlDZGJKeUFtSmlCeWIyOTBMbU5vWVhKQmRDaHliMjkwTG14bGJtZDBhQ0F0SURFcElEMDlQU0FuWFNjZ1B5QnliMjkwTG5Oc2FXTmxLREVzSUMweEtTQTZJSEp2YjNRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2FXNWtaWGdnUFNCd1lYSnpaVWx1ZENoamJHVmhibEp2YjNRc0lERXdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FoYVhOT1lVNG9hVzVrWlhncFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0ppWWdjbTl2ZENBaFBUMGdZMnhsWVc1U2IyOTBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKaVlnVTNSeWFXNW5LR2x1WkdWNEtTQTlQVDBnWTJ4bFlXNVNiMjkwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSmlZZ2FXNWtaWGdnUGowZ01GeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDWW1JQ2h2Y0hScGIyNXpMbkJoY25ObFFYSnlZWGx6SUNZbUlHbHVaR1Y0SUR3OUlHOXdkR2x2Ym5NdVlYSnlZWGxNYVcxcGRDbGNiaUFnSUNBZ0lDQWdJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOWlhaUE5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOWlhbHRwYm1SbGVGMGdQU0JzWldGbU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2WW1wYlkyeGxZVzVTYjI5MFhTQTlJR3hsWVdZN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnNaV0ZtSUQwZ2IySnFPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCc1pXRm1PMXh1ZlR0Y2JseHVkbUZ5SUhCaGNuTmxTMlY1Y3lBOUlHWjFibU4wYVc5dUlIQmhjbk5sVVhWbGNubFRkSEpwYm1kTFpYbHpLR2RwZG1WdVMyVjVMQ0IyWVd3c0lHOXdkR2x2Ym5NcElIdGNiaUFnSUNCcFppQW9JV2RwZG1WdVMyVjVLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJVY21GdWMyWnZjbTBnWkc5MElHNXZkR0YwYVc5dUlIUnZJR0p5WVdOclpYUWdibTkwWVhScGIyNWNiaUFnSUNCMllYSWdhMlY1SUQwZ2IzQjBhVzl1Y3k1aGJHeHZkMFJ2ZEhNZ1B5Qm5hWFpsYmt0bGVTNXlaWEJzWVdObEtDOWNYQzRvVzE0dVcxMHJLUzluTENBbld5UXhYU2NwSURvZ1oybDJaVzVMWlhrN1hHNWNiaUFnSUNBdkx5QlVhR1VnY21WblpYZ2dZMmgxYm10elhHNWNiaUFnSUNCMllYSWdZbkpoWTJ0bGRITWdQU0F2S0Z4Y1cxdGVXMXhjWFYwcVhTa3ZPMXh1SUNBZ0lIWmhjaUJqYUdsc1pDQTlJQzhvWEZ4YlcxNWJYRnhkWFNwZEtTOW5PMXh1WEc0Z0lDQWdMeThnUjJWMElIUm9aU0J3WVhKbGJuUmNibHh1SUNBZ0lIWmhjaUJ6WldkdFpXNTBJRDBnWW5KaFkydGxkSE11WlhobFl5aHJaWGtwTzF4dUlDQWdJSFpoY2lCd1lYSmxiblFnUFNCelpXZHRaVzUwSUQ4Z2EyVjVMbk5zYVdObEtEQXNJSE5sWjIxbGJuUXVhVzVrWlhncElEb2dhMlY1TzF4dVhHNGdJQ0FnTHk4Z1UzUmhjMmdnZEdobElIQmhjbVZ1ZENCcFppQnBkQ0JsZUdsemRITmNibHh1SUNBZ0lIWmhjaUJyWlhseklEMGdXMTA3WEc0Z0lDQWdhV1lnS0hCaGNtVnVkQ2tnZTF4dUlDQWdJQ0FnSUNBdkx5QkpaaUIzWlNCaGNtVnVKM1FnZFhOcGJtY2djR3hoYVc0Z2IySnFaV04wY3l3Z2IzQjBhVzl1WVd4c2VTQndjbVZtYVhnZ2EyVjVjMXh1SUNBZ0lDQWdJQ0F2THlCMGFHRjBJSGR2ZFd4a0lHOTJaWEozY21sMFpTQnZZbXBsWTNRZ2NISnZkRzkwZVhCbElIQnliM0JsY25ScFpYTmNiaUFnSUNBZ0lDQWdhV1lnS0NGdmNIUnBiMjV6TG5Cc1lXbHVUMkpxWldOMGN5QW1KaUJvWVhNdVkyRnNiQ2hQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMQ0J3WVhKbGJuUXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVc5d2RHbHZibk11WVd4c2IzZFFjbTkwYjNSNWNHVnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYTJWNWN5NXdkWE5vS0hCaGNtVnVkQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnVEc5dmNDQjBhSEp2ZFdkb0lHTm9hV3hrY21WdUlHRndjR1Z1WkdsdVp5QjBieUIwYUdVZ1lYSnlZWGtnZFc1MGFXd2dkMlVnYUdsMElHUmxjSFJvWEc1Y2JpQWdJQ0IyWVhJZ2FTQTlJREE3WEc0Z0lDQWdkMmhwYkdVZ0tDaHpaV2R0Wlc1MElEMGdZMmhwYkdRdVpYaGxZeWhyWlhrcEtTQWhQVDBnYm5Wc2JDQW1KaUJwSUR3Z2IzQjBhVzl1Y3k1a1pYQjBhQ2tnZTF4dUlDQWdJQ0FnSUNCcElDczlJREU3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hiM0IwYVc5dWN5NXdiR0ZwYms5aWFtVmpkSE1nSmlZZ2FHRnpMbU5oYkd3b1QySnFaV04wTG5CeWIzUnZkSGx3WlN3Z2MyVm5iV1Z1ZEZzeFhTNXpiR2xqWlNneExDQXRNU2twS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXOXdkR2x2Ym5NdVlXeHNiM2RRY205MGIzUjVjR1Z6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUd0bGVYTXVjSFZ6YUNoelpXZHRaVzUwV3pGZEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QkpaaUIwYUdWeVpTZHpJR0VnY21WdFlXbHVaR1Z5TENCcWRYTjBJR0ZrWkNCM2FHRjBaWFpsY2lCcGN5QnNaV1owWEc1Y2JpQWdJQ0JwWmlBb2MyVm5iV1Z1ZENrZ2UxeHVJQ0FnSUNBZ0lDQnJaWGx6TG5CMWMyZ29KMXNuSUNzZ2EyVjVMbk5zYVdObEtITmxaMjFsYm5RdWFXNWtaWGdwSUNzZ0oxMG5LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2NHRnljMlZQWW1wbFkzUW9hMlY1Y3l3Z2RtRnNMQ0J2Y0hScGIyNXpLVHRjYm4wN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdLSE4wY2l3Z2IzQjBjeWtnZTF4dUlDQWdJSFpoY2lCdmNIUnBiMjV6SUQwZ2IzQjBjeUEvSUhWMGFXeHpMbUZ6YzJsbmJpaDdmU3dnYjNCMGN5a2dPaUI3ZlR0Y2JseHVJQ0FnSUdsbUlDaHZjSFJwYjI1ekxtUmxZMjlrWlhJZ0lUMDlJRzUxYkd3Z0ppWWdiM0IwYVc5dWN5NWtaV052WkdWeUlDRTlQU0IxYm1SbFptbHVaV1FnSmlZZ2RIbHdaVzltSUc5d2RHbHZibk11WkdWamIyUmxjaUFoUFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkRVpXTnZaR1Z5SUdoaGN5QjBieUJpWlNCaElHWjFibU4wYVc5dUxpY3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHOXdkR2x2Ym5NdWFXZHViM0psVVhWbGNubFFjbVZtYVhnZ1BTQnZjSFJwYjI1ekxtbG5ibTl5WlZGMVpYSjVVSEpsWm1sNElEMDlQU0IwY25WbE8xeHVJQ0FnSUc5d2RHbHZibk11WkdWc2FXMXBkR1Z5SUQwZ2RIbHdaVzltSUc5d2RHbHZibk11WkdWc2FXMXBkR1Z5SUQwOVBTQW5jM1J5YVc1bkp5QjhmQ0IxZEdsc2N5NXBjMUpsWjBWNGNDaHZjSFJwYjI1ekxtUmxiR2x0YVhSbGNpa2dQeUJ2Y0hScGIyNXpMbVJsYkdsdGFYUmxjaUE2SUdSbFptRjFiSFJ6TG1SbGJHbHRhWFJsY2p0Y2JpQWdJQ0J2Y0hScGIyNXpMbVJsY0hSb0lEMGdkSGx3Wlc5bUlHOXdkR2x2Ym5NdVpHVndkR2dnUFQwOUlDZHVkVzFpWlhJbklEOGdiM0IwYVc5dWN5NWtaWEIwYUNBNklHUmxabUYxYkhSekxtUmxjSFJvTzF4dUlDQWdJRzl3ZEdsdmJuTXVZWEp5WVhsTWFXMXBkQ0E5SUhSNWNHVnZaaUJ2Y0hScGIyNXpMbUZ5Y21GNVRHbHRhWFFnUFQwOUlDZHVkVzFpWlhJbklEOGdiM0IwYVc5dWN5NWhjbkpoZVV4cGJXbDBJRG9nWkdWbVlYVnNkSE11WVhKeVlYbE1hVzFwZER0Y2JpQWdJQ0J2Y0hScGIyNXpMbkJoY25ObFFYSnlZWGx6SUQwZ2IzQjBhVzl1Y3k1d1lYSnpaVUZ5Y21GNWN5QWhQVDBnWm1Gc2MyVTdYRzRnSUNBZ2IzQjBhVzl1Y3k1a1pXTnZaR1Z5SUQwZ2RIbHdaVzltSUc5d2RHbHZibk11WkdWamIyUmxjaUE5UFQwZ0oyWjFibU4wYVc5dUp5QS9JRzl3ZEdsdmJuTXVaR1ZqYjJSbGNpQTZJR1JsWm1GMWJIUnpMbVJsWTI5a1pYSTdYRzRnSUNBZ2IzQjBhVzl1Y3k1aGJHeHZkMFJ2ZEhNZ1BTQjBlWEJsYjJZZ2IzQjBhVzl1Y3k1aGJHeHZkMFJ2ZEhNZ1BUMDlJQ2RpYjI5c1pXRnVKeUEvSUc5d2RHbHZibk11WVd4c2IzZEViM1J6SURvZ1pHVm1ZWFZzZEhNdVlXeHNiM2RFYjNSek8xeHVJQ0FnSUc5d2RHbHZibk11Y0d4aGFXNVBZbXBsWTNSeklEMGdkSGx3Wlc5bUlHOXdkR2x2Ym5NdWNHeGhhVzVQWW1wbFkzUnpJRDA5UFNBblltOXZiR1ZoYmljZ1B5QnZjSFJwYjI1ekxuQnNZV2x1VDJKcVpXTjBjeUE2SUdSbFptRjFiSFJ6TG5Cc1lXbHVUMkpxWldOMGN6dGNiaUFnSUNCdmNIUnBiMjV6TG1Gc2JHOTNVSEp2ZEc5MGVYQmxjeUE5SUhSNWNHVnZaaUJ2Y0hScGIyNXpMbUZzYkc5M1VISnZkRzkwZVhCbGN5QTlQVDBnSjJKdmIyeGxZVzRuSUQ4Z2IzQjBhVzl1Y3k1aGJHeHZkMUJ5YjNSdmRIbHdaWE1nT2lCa1pXWmhkV3gwY3k1aGJHeHZkMUJ5YjNSdmRIbHdaWE03WEc0Z0lDQWdiM0IwYVc5dWN5NXdZWEpoYldWMFpYSk1hVzFwZENBOUlIUjVjR1Z2WmlCdmNIUnBiMjV6TG5CaGNtRnRaWFJsY2t4cGJXbDBJRDA5UFNBbmJuVnRZbVZ5SnlBL0lHOXdkR2x2Ym5NdWNHRnlZVzFsZEdWeVRHbHRhWFFnT2lCa1pXWmhkV3gwY3k1d1lYSmhiV1YwWlhKTWFXMXBkRHRjYmlBZ0lDQnZjSFJwYjI1ekxuTjBjbWxqZEU1MWJHeElZVzVrYkdsdVp5QTlJSFI1Y0dWdlppQnZjSFJwYjI1ekxuTjBjbWxqZEU1MWJHeElZVzVrYkdsdVp5QTlQVDBnSjJKdmIyeGxZVzRuSUQ4Z2IzQjBhVzl1Y3k1emRISnBZM1JPZFd4c1NHRnVaR3hwYm1jZ09pQmtaV1poZFd4MGN5NXpkSEpwWTNST2RXeHNTR0Z1Wkd4cGJtYzdYRzVjYmlBZ0lDQnBaaUFvYzNSeUlEMDlQU0FuSnlCOGZDQnpkSElnUFQwOUlHNTFiR3dnZkh3Z2RIbHdaVzltSUhOMGNpQTlQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHOXdkR2x2Ym5NdWNHeGhhVzVQWW1wbFkzUnpJRDhnVDJKcVpXTjBMbU55WldGMFpTaHVkV3hzS1NBNklIdDlPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIWmhjaUIwWlcxd1QySnFJRDBnZEhsd1pXOW1JSE4wY2lBOVBUMGdKM04wY21sdVp5Y2dQeUJ3WVhKelpWWmhiSFZsY3loemRISXNJRzl3ZEdsdmJuTXBJRG9nYzNSeU8xeHVJQ0FnSUhaaGNpQnZZbW9nUFNCdmNIUnBiMjV6TG5Cc1lXbHVUMkpxWldOMGN5QS9JRTlpYW1WamRDNWpjbVZoZEdVb2JuVnNiQ2tnT2lCN2ZUdGNibHh1SUNBZ0lDOHZJRWwwWlhKaGRHVWdiM1psY2lCMGFHVWdhMlY1Y3lCaGJtUWdjMlYwZFhBZ2RHaGxJRzVsZHlCdlltcGxZM1JjYmx4dUlDQWdJSFpoY2lCclpYbHpJRDBnVDJKcVpXTjBMbXRsZVhNb2RHVnRjRTlpYWlrN1hHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCclpYbHpMbXhsYm1kMGFEc2dLeXRwS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJyWlhrZ1BTQnJaWGx6VzJsZE8xeHVJQ0FnSUNBZ0lDQjJZWElnYm1WM1QySnFJRDBnY0dGeWMyVkxaWGx6S0d0bGVTd2dkR1Z0Y0U5aWFsdHJaWGxkTENCdmNIUnBiMjV6S1R0Y2JpQWdJQ0FnSUNBZ2IySnFJRDBnZFhScGJITXViV1Z5WjJVb2IySnFMQ0J1WlhkUFltb3NJRzl3ZEdsdmJuTXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCMWRHbHNjeTVqYjIxd1lXTjBLRzlpYWlrN1hHNTlPMXh1SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdkWFJwYkhNZ1BTQnlaWEYxYVhKbEtDY3VMM1YwYVd4ekp5azdYRzUyWVhJZ1ptOXliV0YwY3lBOUlISmxjWFZwY21Vb0p5NHZabTl5YldGMGN5Y3BPMXh1WEc1MllYSWdZWEp5WVhsUWNtVm1hWGhIWlc1bGNtRjBiM0p6SUQwZ2UxeHVJQ0FnSUdKeVlXTnJaWFJ6T2lCbWRXNWpkR2x2YmlCaWNtRmphMlYwY3lod2NtVm1hWGdwSUhzZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJHbHVaU0JtZFc1akxXNWhiV1V0YldGMFkyaHBibWRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEJ5WldacGVDQXJJQ2RiWFNjN1hHNGdJQ0FnZlN4Y2JpQWdJQ0JwYm1ScFkyVnpPaUJtZFc1amRHbHZiaUJwYm1ScFkyVnpLSEJ5WldacGVDd2dhMlY1S1NCN0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXeHBibVVnWm5WdVl5MXVZVzFsTFcxaGRHTm9hVzVuWEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ3Y21WbWFYZ2dLeUFuV3ljZ0t5QnJaWGtnS3lBblhTYzdYRzRnSUNBZ2ZTeGNiaUFnSUNCeVpYQmxZWFE2SUdaMWJtTjBhVzl1SUhKbGNHVmhkQ2h3Y21WbWFYZ3BJSHNnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0YkdsdVpTQm1kVzVqTFc1aGJXVXRiV0YwWTJocGJtZGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIQnlaV1pwZUR0Y2JpQWdJQ0I5WEc1OU8xeHVYRzUyWVhJZ2RHOUpVMDhnUFNCRVlYUmxMbkJ5YjNSdmRIbHdaUzUwYjBsVFQxTjBjbWx1Wnp0Y2JseHVkbUZ5SUdSbFptRjFiSFJ6SUQwZ2UxeHVJQ0FnSUdSbGJHbHRhWFJsY2pvZ0p5WW5MRnh1SUNBZ0lHVnVZMjlrWlRvZ2RISjFaU3hjYmlBZ0lDQmxibU52WkdWeU9pQjFkR2xzY3k1bGJtTnZaR1VzWEc0Z0lDQWdaVzVqYjJSbFZtRnNkV1Z6VDI1c2VUb2dabUZzYzJVc1hHNGdJQ0FnYzJWeWFXRnNhWHBsUkdGMFpUb2dablZ1WTNScGIyNGdjMlZ5YVdGc2FYcGxSR0YwWlNoa1lYUmxLU0I3SUM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFd4cGJtVWdablZ1WXkxdVlXMWxMVzFoZEdOb2FXNW5YRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBiMGxUVHk1allXeHNLR1JoZEdVcE8xeHVJQ0FnSUgwc1hHNGdJQ0FnYzJ0cGNFNTFiR3h6T2lCbVlXeHpaU3hjYmlBZ0lDQnpkSEpwWTNST2RXeHNTR0Z1Wkd4cGJtYzZJR1poYkhObFhHNTlPMXh1WEc1MllYSWdjM1J5YVc1bmFXWjVJRDBnWm5WdVkzUnBiMjRnYzNSeWFXNW5hV1o1S0NBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxc2FXNWxJR1oxYm1NdGJtRnRaUzF0WVhSamFHbHVaMXh1SUNBZ0lHOWlhbVZqZEN4Y2JpQWdJQ0J3Y21WbWFYZ3NYRzRnSUNBZ1oyVnVaWEpoZEdWQmNuSmhlVkJ5WldacGVDeGNiaUFnSUNCemRISnBZM1JPZFd4c1NHRnVaR3hwYm1jc1hHNGdJQ0FnYzJ0cGNFNTFiR3h6TEZ4dUlDQWdJR1Z1WTI5a1pYSXNYRzRnSUNBZ1ptbHNkR1Z5TEZ4dUlDQWdJSE52Y25Rc1hHNGdJQ0FnWVd4c2IzZEViM1J6TEZ4dUlDQWdJSE5sY21saGJHbDZaVVJoZEdVc1hHNGdJQ0FnWm05eWJXRjBkR1Z5TEZ4dUlDQWdJR1Z1WTI5a1pWWmhiSFZsYzA5dWJIbGNiaWtnZTF4dUlDQWdJSFpoY2lCdlltb2dQU0J2WW1wbFkzUTdYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQm1hV3gwWlhJZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUNBZ2IySnFJRDBnWm1sc2RHVnlLSEJ5WldacGVDd2diMkpxS1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0c5aWFpQnBibk4wWVc1alpXOW1JRVJoZEdVcElIdGNiaUFnSUNBZ0lDQWdiMkpxSUQwZ2MyVnlhV0ZzYVhwbFJHRjBaU2h2WW1vcE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2IySnFJRDA5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHpkSEpwWTNST2RXeHNTR0Z1Wkd4cGJtY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbGJtTnZaR1Z5SUNZbUlDRmxibU52WkdWV1lXeDFaWE5QYm14NUlEOGdaVzVqYjJSbGNpaHdjbVZtYVhnc0lHUmxabUYxYkhSekxtVnVZMjlrWlhJcElEb2djSEpsWm1sNE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYjJKcUlEMGdKeWM3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJ2WW1vZ1BUMDlJQ2R6ZEhKcGJtY25JSHg4SUhSNWNHVnZaaUJ2WW1vZ1BUMDlJQ2R1ZFcxaVpYSW5JSHg4SUhSNWNHVnZaaUJ2WW1vZ1BUMDlJQ2RpYjI5c1pXRnVKeUI4ZkNCMWRHbHNjeTVwYzBKMVptWmxjaWh2WW1vcEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNobGJtTnZaR1Z5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2EyVjVWbUZzZFdVZ1BTQmxibU52WkdWV1lXeDFaWE5QYm14NUlEOGdjSEpsWm1sNElEb2daVzVqYjJSbGNpaHdjbVZtYVhnc0lHUmxabUYxYkhSekxtVnVZMjlrWlhJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRnRtYjNKdFlYUjBaWElvYTJWNVZtRnNkV1VwSUNzZ0p6MG5JQ3NnWm05eWJXRjBkR1Z5S0dWdVkyOWtaWElvYjJKcUxDQmtaV1poZFd4MGN5NWxibU52WkdWeUtTbGRPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJiWm05eWJXRjBkR1Z5S0hCeVpXWnBlQ2tnS3lBblBTY2dLeUJtYjNKdFlYUjBaWElvVTNSeWFXNW5LRzlpYWlrcFhUdGNiaUFnSUNCOVhHNWNiaUFnSUNCMllYSWdkbUZzZFdWeklEMGdXMTA3WEc1Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUc5aWFpQTlQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIWmhiSFZsY3p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ2IySnFTMlY1Y3p0Y2JpQWdJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2htYVd4MFpYSXBLU0I3WEc0Z0lDQWdJQ0FnSUc5aWFrdGxlWE1nUFNCbWFXeDBaWEk3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUd0bGVYTWdQU0JQWW1wbFkzUXVhMlY1Y3lodlltb3BPMXh1SUNBZ0lDQWdJQ0J2WW1wTFpYbHpJRDBnYzI5eWRDQS9JR3RsZVhNdWMyOXlkQ2h6YjNKMEtTQTZJR3RsZVhNN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCdlltcExaWGx6TG14bGJtZDBhRHNnS3l0cEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCclpYa2dQU0J2WW1wTFpYbHpXMmxkTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2h6YTJsd1RuVnNiSE1nSmlZZ2IySnFXMnRsZVYwZ1BUMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZsTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29iMkpxS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVnpJRDBnZG1Gc2RXVnpMbU52Ym1OaGRDaHpkSEpwYm1kcFpua29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiMkpxVzJ0bGVWMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaMlZ1WlhKaGRHVkJjbkpoZVZCeVpXWnBlQ2h3Y21WbWFYZ3NJR3RsZVNrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1oyVnVaWEpoZEdWQmNuSmhlVkJ5WldacGVDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkSEpwWTNST2RXeHNTR0Z1Wkd4cGJtY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMnRwY0U1MWJHeHpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Z1WTI5a1pYSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabWxzZEdWeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITnZjblFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVd4c2IzZEViM1J6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGNtbGhiR2w2WlVSaGRHVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5YldGMGRHVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Z1WTI5a1pWWmhiSFZsYzA5dWJIbGNiaUFnSUNBZ0lDQWdJQ0FnSUNrcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVnpJRDBnZG1Gc2RXVnpMbU52Ym1OaGRDaHpkSEpwYm1kcFpua29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiMkpxVzJ0bGVWMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEpsWm1sNElDc2dLR0ZzYkc5M1JHOTBjeUEvSUNjdUp5QXJJR3RsZVNBNklDZGJKeUFySUd0bGVTQXJJQ2RkSnlrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1oyVnVaWEpoZEdWQmNuSmhlVkJ5WldacGVDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkSEpwWTNST2RXeHNTR0Z1Wkd4cGJtY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMnRwY0U1MWJHeHpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Z1WTI5a1pYSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabWxzZEdWeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITnZjblFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVd4c2IzZEViM1J6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGNtbGhiR2w2WlVSaGRHVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5YldGMGRHVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Z1WTI5a1pWWmhiSFZsYzA5dWJIbGNiaUFnSUNBZ0lDQWdJQ0FnSUNrcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUhaaGJIVmxjenRjYm4wN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdLRzlpYW1WamRDd2diM0IwY3lrZ2UxeHVJQ0FnSUhaaGNpQnZZbW9nUFNCdlltcGxZM1E3WEc0Z0lDQWdkbUZ5SUc5d2RHbHZibk1nUFNCdmNIUnpJRDhnZFhScGJITXVZWE56YVdkdUtIdDlMQ0J2Y0hSektTQTZJSHQ5TzF4dVhHNGdJQ0FnYVdZZ0tHOXdkR2x2Ym5NdVpXNWpiMlJsY2lBaFBUMGdiblZzYkNBbUppQnZjSFJwYjI1ekxtVnVZMjlrWlhJZ0lUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlCMGVYQmxiMllnYjNCMGFXOXVjeTVsYm1OdlpHVnlJQ0U5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjBWdVkyOWtaWElnYUdGeklIUnZJR0psSUdFZ1puVnVZM1JwYjI0dUp5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtRnlJR1JsYkdsdGFYUmxjaUE5SUhSNWNHVnZaaUJ2Y0hScGIyNXpMbVJsYkdsdGFYUmxjaUE5UFQwZ0ozVnVaR1ZtYVc1bFpDY2dQeUJrWldaaGRXeDBjeTVrWld4cGJXbDBaWElnT2lCdmNIUnBiMjV6TG1SbGJHbHRhWFJsY2p0Y2JpQWdJQ0IyWVhJZ2MzUnlhV04wVG5Wc2JFaGhibVJzYVc1bklEMGdkSGx3Wlc5bUlHOXdkR2x2Ym5NdWMzUnlhV04wVG5Wc2JFaGhibVJzYVc1bklEMDlQU0FuWW05dmJHVmhiaWNnUHlCdmNIUnBiMjV6TG5OMGNtbGpkRTUxYkd4SVlXNWtiR2x1WnlBNklHUmxabUYxYkhSekxuTjBjbWxqZEU1MWJHeElZVzVrYkdsdVp6dGNiaUFnSUNCMllYSWdjMnRwY0U1MWJHeHpJRDBnZEhsd1pXOW1JRzl3ZEdsdmJuTXVjMnRwY0U1MWJHeHpJRDA5UFNBblltOXZiR1ZoYmljZ1B5QnZjSFJwYjI1ekxuTnJhWEJPZFd4c2N5QTZJR1JsWm1GMWJIUnpMbk5yYVhCT2RXeHNjenRjYmlBZ0lDQjJZWElnWlc1amIyUmxJRDBnZEhsd1pXOW1JRzl3ZEdsdmJuTXVaVzVqYjJSbElEMDlQU0FuWW05dmJHVmhiaWNnUHlCdmNIUnBiMjV6TG1WdVkyOWtaU0E2SUdSbFptRjFiSFJ6TG1WdVkyOWtaVHRjYmlBZ0lDQjJZWElnWlc1amIyUmxjaUE5SUhSNWNHVnZaaUJ2Y0hScGIyNXpMbVZ1WTI5a1pYSWdQVDA5SUNkbWRXNWpkR2x2YmljZ1B5QnZjSFJwYjI1ekxtVnVZMjlrWlhJZ09pQmtaV1poZFd4MGN5NWxibU52WkdWeU8xeHVJQ0FnSUhaaGNpQnpiM0owSUQwZ2RIbHdaVzltSUc5d2RHbHZibk11YzI5eWRDQTlQVDBnSjJaMWJtTjBhVzl1SnlBL0lHOXdkR2x2Ym5NdWMyOXlkQ0E2SUc1MWJHdzdYRzRnSUNBZ2RtRnlJR0ZzYkc5M1JHOTBjeUE5SUhSNWNHVnZaaUJ2Y0hScGIyNXpMbUZzYkc5M1JHOTBjeUE5UFQwZ0ozVnVaR1ZtYVc1bFpDY2dQeUJtWVd4elpTQTZJRzl3ZEdsdmJuTXVZV3hzYjNkRWIzUnpPMXh1SUNBZ0lIWmhjaUJ6WlhKcFlXeHBlbVZFWVhSbElEMGdkSGx3Wlc5bUlHOXdkR2x2Ym5NdWMyVnlhV0ZzYVhwbFJHRjBaU0E5UFQwZ0oyWjFibU4wYVc5dUp5QS9JRzl3ZEdsdmJuTXVjMlZ5YVdGc2FYcGxSR0YwWlNBNklHUmxabUYxYkhSekxuTmxjbWxoYkdsNlpVUmhkR1U3WEc0Z0lDQWdkbUZ5SUdWdVkyOWtaVlpoYkhWbGMwOXViSGtnUFNCMGVYQmxiMllnYjNCMGFXOXVjeTVsYm1OdlpHVldZV3gxWlhOUGJteDVJRDA5UFNBblltOXZiR1ZoYmljZ1B5QnZjSFJwYjI1ekxtVnVZMjlrWlZaaGJIVmxjMDl1YkhrZ09pQmtaV1poZFd4MGN5NWxibU52WkdWV1lXeDFaWE5QYm14NU8xeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2IzQjBhVzl1Y3k1bWIzSnRZWFFnUFQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdJQ0FnSUc5d2RHbHZibk11Wm05eWJXRjBJRDBnWm05eWJXRjBjMXNuWkdWbVlYVnNkQ2RkTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvSVU5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNobWIzSnRZWFJ6TG1admNtMWhkSFJsY25Nc0lHOXdkR2x2Ym5NdVptOXliV0YwS1NrZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLQ2RWYm10dWIzZHVJR1p2Y20xaGRDQnZjSFJwYjI0Z2NISnZkbWxrWldRdUp5azdYRzRnSUNBZ2ZWeHVJQ0FnSUhaaGNpQm1iM0p0WVhSMFpYSWdQU0JtYjNKdFlYUnpMbVp2Y20xaGRIUmxjbk5iYjNCMGFXOXVjeTVtYjNKdFlYUmRPMXh1SUNBZ0lIWmhjaUJ2WW1wTFpYbHpPMXh1SUNBZ0lIWmhjaUJtYVd4MFpYSTdYRzVjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JRzl3ZEdsdmJuTXVabWxzZEdWeUlEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNBZ0lHWnBiSFJsY2lBOUlHOXdkR2x2Ym5NdVptbHNkR1Z5TzF4dUlDQWdJQ0FnSUNCdlltb2dQU0JtYVd4MFpYSW9KeWNzSUc5aWFpazdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaEJjbkpoZVM1cGMwRnljbUY1S0c5d2RHbHZibk11Wm1sc2RHVnlLU2tnZTF4dUlDQWdJQ0FnSUNCbWFXeDBaWElnUFNCdmNIUnBiMjV6TG1acGJIUmxjanRjYmlBZ0lDQWdJQ0FnYjJKcVMyVjVjeUE5SUdacGJIUmxjanRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjJZWElnYTJWNWN5QTlJRnRkTzF4dVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCdlltb2dJVDA5SUNkdlltcGxZM1FuSUh4OElHOWlhaUE5UFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnSnljN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlHRnljbUY1Um05eWJXRjBPMXh1SUNBZ0lHbG1JQ2h2Y0hScGIyNXpMbUZ5Y21GNVJtOXliV0YwSUdsdUlHRnljbUY1VUhKbFptbDRSMlZ1WlhKaGRHOXljeWtnZTF4dUlDQWdJQ0FnSUNCaGNuSmhlVVp2Y20xaGRDQTlJRzl3ZEdsdmJuTXVZWEp5WVhsR2IzSnRZWFE3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2duYVc1a2FXTmxjeWNnYVc0Z2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUNBZ0lDQmhjbkpoZVVadmNtMWhkQ0E5SUc5d2RHbHZibk11YVc1a2FXTmxjeUEvSUNkcGJtUnBZMlZ6SnlBNklDZHlaWEJsWVhRbk8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUdGeWNtRjVSbTl5YldGMElEMGdKMmx1WkdsalpYTW5PMXh1SUNBZ0lIMWNibHh1SUNBZ0lIWmhjaUJuWlc1bGNtRjBaVUZ5Y21GNVVISmxabWw0SUQwZ1lYSnlZWGxRY21WbWFYaEhaVzVsY21GMGIzSnpXMkZ5Y21GNVJtOXliV0YwWFR0Y2JseHVJQ0FnSUdsbUlDZ2hiMkpxUzJWNWN5a2dlMXh1SUNBZ0lDQWdJQ0J2WW1wTFpYbHpJRDBnVDJKcVpXTjBMbXRsZVhNb2IySnFLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvYzI5eWRDa2dlMXh1SUNBZ0lDQWdJQ0J2WW1wTFpYbHpMbk52Y25Rb2MyOXlkQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0J2WW1wTFpYbHpMbXhsYm1kMGFEc2dLeXRwS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJyWlhrZ1BTQnZZbXBMWlhselcybGRPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaHphMmx3VG5Wc2JITWdKaVlnYjJKcVcydGxlVjBnUFQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5ScGJuVmxPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2EyVjVjeUE5SUd0bGVYTXVZMjl1WTJGMEtITjBjbWx1WjJsbWVTaGNiaUFnSUNBZ0lDQWdJQ0FnSUc5aWFsdHJaWGxkTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhMlY1TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaMlZ1WlhKaGRHVkJjbkpoZVZCeVpXWnBlQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lITjBjbWxqZEU1MWJHeElZVzVrYkdsdVp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUhOcmFYQk9kV3hzY3l4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1Z1WTI5a1pTQS9JR1Z1WTI5a1pYSWdPaUJ1ZFd4c0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnWm1sc2RHVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MyOXlkQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHRnNiRzkzUkc5MGN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUhObGNtbGhiR2w2WlVSaGRHVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSnRZWFIwWlhJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsYm1OdlpHVldZV3gxWlhOUGJteDVYRzRnSUNBZ0lDQWdJQ2twTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCcWIybHVaV1FnUFNCclpYbHpMbXB2YVc0b1pHVnNhVzFwZEdWeUtUdGNiaUFnSUNCMllYSWdjSEpsWm1sNElEMGdiM0IwYVc5dWN5NWhaR1JSZFdWeWVWQnlaV1pwZUNBOVBUMGdkSEoxWlNBL0lDYy9KeUE2SUNjbk8xeHVYRzRnSUNBZ2NtVjBkWEp1SUdwdmFXNWxaQzVzWlc1bmRHZ2dQaUF3SUQ4Z2NISmxabWw0SUNzZ2FtOXBibVZrSURvZ0p5YzdYRzU5TzF4dUlpd2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNTJZWElnYUdGeklEMGdUMkpxWldOMExuQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVR0Y2JseHVkbUZ5SUdobGVGUmhZbXhsSUQwZ0tHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQjJZWElnWVhKeVlYa2dQU0JiWFR0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SURJMU5qc2dLeXRwS1NCN1hHNGdJQ0FnSUNBZ0lHRnljbUY1TG5CMWMyZ29KeVVuSUNzZ0tDaHBJRHdnTVRZZ1B5QW5NQ2NnT2lBbkp5a2dLeUJwTG5SdlUzUnlhVzVuS0RFMktTa3VkRzlWY0hCbGNrTmhjMlVvS1NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJR0Z5Y21GNU8xeHVmU2dwS1R0Y2JseHVkbUZ5SUdOdmJYQmhZM1JSZFdWMVpTQTlJR1oxYm1OMGFXOXVJR052YlhCaFkzUlJkV1YxWlNoeGRXVjFaU2tnZTF4dUlDQWdJSFpoY2lCdlltbzdYRzVjYmlBZ0lDQjNhR2xzWlNBb2NYVmxkV1V1YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnBkR1Z0SUQwZ2NYVmxkV1V1Y0c5d0tDazdYRzRnSUNBZ0lDQWdJRzlpYWlBOUlHbDBaVzB1YjJKcVcybDBaVzB1Y0hKdmNGMDdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvYjJKcUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR052YlhCaFkzUmxaQ0E5SUZ0ZE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcUlEMGdNRHNnYWlBOElHOWlhaTVzWlc1bmRHZzdJQ3NyYWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdiMkpxVzJwZElDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjIxd1lXTjBaV1F1Y0hWemFDaHZZbXBiYWwwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYVhSbGJTNXZZbXBiYVhSbGJTNXdjbTl3WFNBOUlHTnZiWEJoWTNSbFpEdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCdlltbzdYRzU5TzF4dVhHNWxlSEJ2Y25SekxtRnljbUY1Vkc5UFltcGxZM1FnUFNCbWRXNWpkR2x2YmlCaGNuSmhlVlJ2VDJKcVpXTjBLSE52ZFhKalpTd2diM0IwYVc5dWN5a2dlMXh1SUNBZ0lIWmhjaUJ2WW1vZ1BTQnZjSFJwYjI1eklDWW1JRzl3ZEdsdmJuTXVjR3hoYVc1UFltcGxZM1J6SUQ4Z1QySnFaV04wTG1OeVpXRjBaU2h1ZFd4c0tTQTZJSHQ5TzF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYzI5MWNtTmxMbXhsYm1kMGFEc2dLeXRwS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdjMjkxY21ObFcybGRJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2IySnFXMmxkSUQwZ2MyOTFjbU5sVzJsZE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUc5aWFqdGNibjA3WEc1Y2JtVjRjRzl5ZEhNdWJXVnlaMlVnUFNCbWRXNWpkR2x2YmlCdFpYSm5aU2gwWVhKblpYUXNJSE52ZFhKalpTd2diM0IwYVc5dWN5a2dlMXh1SUNBZ0lHbG1JQ2doYzI5MWNtTmxLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwWVhKblpYUTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQnpiM1Z5WTJVZ0lUMDlJQ2R2WW1wbFkzUW5LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaEJjbkpoZVM1cGMwRnljbUY1S0hSaGNtZGxkQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJoY21kbGRDNXdkWE5vS0hOdmRYSmpaU2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RIbHdaVzltSUhSaGNtZGxkQ0E5UFQwZ0oyOWlhbVZqZENjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHZjSFJwYjI1ekxuQnNZV2x1VDJKcVpXTjBjeUI4ZkNCdmNIUnBiMjV6TG1Gc2JHOTNVSEp2ZEc5MGVYQmxjeUI4ZkNBaGFHRnpMbU5oYkd3b1QySnFaV04wTG5CeWIzUnZkSGx3WlN3Z2MyOTFjbU5sS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUmhjbWRsZEZ0emIzVnlZMlZkSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJiZEdGeVoyVjBMQ0J6YjNWeVkyVmRPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSaGNtZGxkRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JSFJoY21kbGRDQWhQVDBnSjI5aWFtVmpkQ2NwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ0MFlYSm5aWFJkTG1OdmJtTmhkQ2h6YjNWeVkyVXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIWmhjaUJ0WlhKblpWUmhjbWRsZENBOUlIUmhjbWRsZER0Y2JpQWdJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2gwWVhKblpYUXBJQ1ltSUNGQmNuSmhlUzVwYzBGeWNtRjVLSE52ZFhKalpTa3BJSHRjYmlBZ0lDQWdJQ0FnYldWeVoyVlVZWEpuWlhRZ1BTQmxlSEJ2Y25SekxtRnljbUY1Vkc5UFltcGxZM1FvZEdGeVoyVjBMQ0J2Y0hScGIyNXpLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaDBZWEpuWlhRcElDWW1JRUZ5Y21GNUxtbHpRWEp5WVhrb2MyOTFjbU5sS1NrZ2UxeHVJQ0FnSUNBZ0lDQnpiM1Z5WTJVdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb2FYUmxiU3dnYVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHaGhjeTVqWVd4c0tIUmhjbWRsZEN3Z2FTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHRnlaMlYwVzJsZElDWW1JSFI1Y0dWdlppQjBZWEpuWlhSYmFWMGdQVDA5SUNkdlltcGxZM1FuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJoY21kbGRGdHBYU0E5SUdWNGNHOXlkSE11YldWeVoyVW9kR0Z5WjJWMFcybGRMQ0JwZEdWdExDQnZjSFJwYjI1ektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwWVhKblpYUXVjSFZ6YUNocGRHVnRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUmhjbWRsZEZ0cFhTQTlJR2wwWlcwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHRnlaMlYwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQlBZbXBsWTNRdWEyVjVjeWh6YjNWeVkyVXBMbkpsWkhWalpTaG1kVzVqZEdsdmJpQW9ZV05qTENCclpYa3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlIWmhiSFZsSUQwZ2MyOTFjbU5sVzJ0bGVWMDdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHaGhjeTVqWVd4c0tHRmpZeXdnYTJWNUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lXTmpXMnRsZVYwZ1BTQmxlSEJ2Y25SekxtMWxjbWRsS0dGalkxdHJaWGxkTENCMllXeDFaU3dnYjNCMGFXOXVjeWs3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhZMk5iYTJWNVhTQTlJSFpoYkhWbE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmhZMk03WEc0Z0lDQWdmU3dnYldWeVoyVlVZWEpuWlhRcE8xeHVmVHRjYmx4dVpYaHdiM0owY3k1aGMzTnBaMjRnUFNCbWRXNWpkR2x2YmlCaGMzTnBaMjVUYVc1bmJHVlRiM1Z5WTJVb2RHRnlaMlYwTENCemIzVnlZMlVwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdUMkpxWldOMExtdGxlWE1vYzI5MWNtTmxLUzV5WldSMVkyVW9ablZ1WTNScGIyNGdLR0ZqWXl3Z2EyVjVLU0I3WEc0Z0lDQWdJQ0FnSUdGalkxdHJaWGxkSUQwZ2MyOTFjbU5sVzJ0bGVWMDdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmhZMk03WEc0Z0lDQWdmU3dnZEdGeVoyVjBLVHRjYm4wN1hHNWNibVY0Y0c5eWRITXVaR1ZqYjJSbElEMGdablZ1WTNScGIyNGdLSE4wY2lrZ2UxeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmtaV052WkdWVlVrbERiMjF3YjI1bGJuUW9jM1J5TG5KbGNHeGhZMlVvTDF4Y0t5OW5MQ0FuSUNjcEtUdGNiaUFnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnpkSEk3WEc0Z0lDQWdmVnh1ZlR0Y2JseHVaWGh3YjNKMGN5NWxibU52WkdVZ1BTQm1kVzVqZEdsdmJpQmxibU52WkdVb2MzUnlLU0I3WEc0Z0lDQWdMeThnVkdocGN5QmpiMlJsSUhkaGN5QnZjbWxuYVc1aGJHeDVJSGR5YVhSMFpXNGdZbmtnUW5KcFlXNGdWMmhwZEdVZ0tHMXpZMlJsZUNrZ1ptOXlJSFJvWlNCcGJ5NXFjeUJqYjNKbElIRjFaWEo1YzNSeWFXNW5JR3hwWW5KaGNua3VYRzRnSUNBZ0x5OGdTWFFnYUdGeklHSmxaVzRnWVdSaGNIUmxaQ0JvWlhKbElHWnZjaUJ6ZEhKcFkzUmxjaUJoWkdobGNtVnVZMlVnZEc4Z1VrWkRJRE01T0RaY2JpQWdJQ0JwWmlBb2MzUnlMbXhsYm1kMGFDQTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzUnlPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIWmhjaUJ6ZEhKcGJtY2dQU0IwZVhCbGIyWWdjM1J5SUQwOVBTQW5jM1J5YVc1bkp5QS9JSE4wY2lBNklGTjBjbWx1WnloemRISXBPMXh1WEc0Z0lDQWdkbUZ5SUc5MWRDQTlJQ2NuTzF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYzNSeWFXNW5MbXhsYm1kMGFEc2dLeXRwS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJqSUQwZ2MzUnlhVzVuTG1Ob1lYSkRiMlJsUVhRb2FTazdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnWXlBOVBUMGdNSGd5UkNBdkx5QXRYRzRnSUNBZ0lDQWdJQ0FnSUNCOGZDQmpJRDA5UFNBd2VESkZJQzh2SUM1Y2JpQWdJQ0FnSUNBZ0lDQWdJSHg4SUdNZ1BUMDlJREI0TlVZZ0x5OGdYMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZId2dZeUE5UFQwZ01IZzNSU0F2THlCK1hHNGdJQ0FnSUNBZ0lDQWdJQ0I4ZkNBb1l5QStQU0F3ZURNd0lDWW1JR01nUEQwZ01IZ3pPU2tnTHk4Z01DMDVYRzRnSUNBZ0lDQWdJQ0FnSUNCOGZDQW9ZeUErUFNBd2VEUXhJQ1ltSUdNZ1BEMGdNSGcxUVNrZ0x5OGdZUzE2WEc0Z0lDQWdJQ0FnSUNBZ0lDQjhmQ0FvWXlBK1BTQXdlRFl4SUNZbUlHTWdQRDBnTUhnM1FTa2dMeThnUVMxYVhHNGdJQ0FnSUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2IzVjBJQ3M5SUhOMGNtbHVaeTVqYUdGeVFYUW9hU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdsbUlDaGpJRHdnTUhnNE1Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2IzVjBJRDBnYjNWMElDc2dhR1Y0VkdGaWJHVmJZMTA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdsbUlDaGpJRHdnTUhnNE1EQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHOTFkQ0E5SUc5MWRDQXJJQ2hvWlhoVVlXSnNaVnN3ZUVNd0lId2dLR01nUGo0Z05pbGRJQ3NnYUdWNFZHRmliR1ZiTUhnNE1DQjhJQ2hqSUNZZ01IZ3pSaWxkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5ScGJuVmxPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLR01nUENBd2VFUTRNREFnZkh3Z1l5QStQU0F3ZUVVd01EQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHOTFkQ0E5SUc5MWRDQXJJQ2hvWlhoVVlXSnNaVnN3ZUVVd0lId2dLR01nUGo0Z01USXBYU0FySUdobGVGUmhZbXhsV3pCNE9EQWdmQ0FvS0dNZ1BqNGdOaWtnSmlBd2VETkdLVjBnS3lCb1pYaFVZV0pzWlZzd2VEZ3dJSHdnS0dNZ0ppQXdlRE5HS1YwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRHbHVkV1U3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnBJQ3M5SURFN1hHNGdJQ0FnSUNBZ0lHTWdQU0F3ZURFd01EQXdJQ3NnS0Nnb1l5QW1JREI0TTBaR0tTQThQQ0F4TUNrZ2ZDQW9jM1J5YVc1bkxtTm9ZWEpEYjJSbFFYUW9hU2tnSmlBd2VETkdSaWtwTzF4dUlDQWdJQ0FnSUNCdmRYUWdLejBnYUdWNFZHRmliR1ZiTUhoR01DQjhJQ2hqSUQ0K0lERTRLVjFjYmlBZ0lDQWdJQ0FnSUNBZ0lDc2dhR1Y0VkdGaWJHVmJNSGc0TUNCOElDZ29ZeUErUGlBeE1pa2dKaUF3ZUROR0tWMWNiaUFnSUNBZ0lDQWdJQ0FnSUNzZ2FHVjRWR0ZpYkdWYk1IZzRNQ0I4SUNnb1l5QStQaUEyS1NBbUlEQjRNMFlwWFZ4dUlDQWdJQ0FnSUNBZ0lDQWdLeUJvWlhoVVlXSnNaVnN3ZURnd0lId2dLR01nSmlBd2VETkdLVjA3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlHOTFkRHRjYm4wN1hHNWNibVY0Y0c5eWRITXVZMjl0Y0dGamRDQTlJR1oxYm1OMGFXOXVJR052YlhCaFkzUW9kbUZzZFdVcElIdGNiaUFnSUNCMllYSWdjWFZsZFdVZ1BTQmJleUJ2WW1vNklIc2diem9nZG1Gc2RXVWdmU3dnY0hKdmNEb2dKMjhuSUgxZE8xeHVJQ0FnSUhaaGNpQnlaV1p6SUQwZ1cxMDdYRzVjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJSEYxWlhWbExteGxibWQwYURzZ0t5dHBLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnBkR1Z0SUQwZ2NYVmxkV1ZiYVYwN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ2WW1vZ1BTQnBkR1Z0TG05aWFsdHBkR1Z0TG5CeWIzQmRPMXh1WEc0Z0lDQWdJQ0FnSUhaaGNpQnJaWGx6SUQwZ1QySnFaV04wTG10bGVYTW9iMkpxS1R0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FpQTlJREE3SUdvZ1BDQnJaWGx6TG14bGJtZDBhRHNnS3l0cUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdhMlY1SUQwZ2EyVjVjMXRxWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMllXd2dQU0J2WW1wYmEyVjVYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdkbUZzSUQwOVBTQW5iMkpxWldOMEp5QW1KaUIyWVd3Z0lUMDlJRzUxYkd3Z0ppWWdjbVZtY3k1cGJtUmxlRTltS0haaGJDa2dQVDA5SUMweEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjWFZsZFdVdWNIVnphQ2g3SUc5aWFqb2diMkpxTENCd2NtOXdPaUJyWlhrZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZtY3k1d2RYTm9LSFpoYkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdZMjl0Y0dGamRGRjFaWFZsS0hGMVpYVmxLVHRjYm4wN1hHNWNibVY0Y0c5eWRITXVhWE5TWldkRmVIQWdQU0JtZFc1amRHbHZiaUJwYzFKbFowVjRjQ2h2WW1vcElIdGNiaUFnSUNCeVpYUjFjbTRnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaeTVqWVd4c0tHOWlhaWtnUFQwOUlDZGJiMkpxWldOMElGSmxaMFY0Y0Ywbk8xeHVmVHRjYmx4dVpYaHdiM0owY3k1cGMwSjFabVpsY2lBOUlHWjFibU4wYVc5dUlHbHpRblZtWm1WeUtHOWlhaWtnZTF4dUlDQWdJR2xtSUNodlltb2dQVDA5SUc1MWJHd2dmSHdnZEhsd1pXOW1JRzlpYWlBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlBaElTaHZZbW91WTI5dWMzUnlkV04wYjNJZ0ppWWdiMkpxTG1OdmJuTjBjblZqZEc5eUxtbHpRblZtWm1WeUlDWW1JRzlpYWk1amIyNXpkSEoxWTNSdmNpNXBjMEoxWm1abGNpaHZZbW9wS1R0Y2JuMDdYRzRpWFgwPVxuIl19
