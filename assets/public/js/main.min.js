!function e(t,r,n){function o(s,a){if(!r[s]){if(!t[s]){var c="function"==typeof require&&require;if(!a&&c)return c(s,!0);if(i)return i(s,!0);var u=new Error("Cannot find module '"+s+"'");throw u.code="MODULE_NOT_FOUND",u}var l=r[s]={exports:{}};t[s][0].call(l.exports,function(e){var r=t[s][1][e];return o(r||e)},l,l.exports,e,t,r,n)}return r[s].exports}for(var i="function"==typeof require&&require,s=0;s<n.length;s++)o(n[s]);return o}({1:[function(e,t,r){"use strict";var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.header=t,this.trigger=t.querySelector(".nav__trigger"),this.nav=t.querySelector(".site-header__nav"),this.dropDown=t.querySelector(".drop__trigger"),this.trigger.addEventListener("click",function(e){r.toggleNav()}),this.dropDown.addEventListener("click",function(e){e.preventDefault()})}return n(e,[{key:"toggleNav",value:function(){this.nav.classList.toggle("site-header__nav--hide")}}]),e}();t.exports=o},{}],2:[function(e,t,r){"use strict";t.exports=function e(t){var r=this,n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];!function(t,r){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this),this.container=t,this.buttons=t.querySelectorAll(".item__button"),this.wrappers=t.querySelectorAll(".item__wrapper"),this.last_index=null,this.desktop=n,this.buttons.forEach(function(e){e.addEventListener("click",function(t){t.preventDefault();var o=Array.prototype.indexOf.call(r.buttons,e);window.innerWidth<700?(e.classList.add("mobile-active"),r.wrappers[o].style.height=60*r.wrappers[o].childElementCount+"px",r.container.scrollIntoView({behavior:"smooth",block:"start",inline:"nearest"}),r.wrappers.forEach(function(e,t){t===o&&o!==r.last_index||(e.style.removeProperty("height"),r.buttons[t].classList.remove("mobile-active"))})):n&&(e.classList.add("desktop-active"),r.wrappers[o].classList.add("desktop-active"),r.wrappers.forEach(function(e,t){r.wrappers[t].classList.remove("mobile-active"),r.buttons[t].classList.remove("mobile-active"),e.style.removeProperty("height"),t!==o&&(r.wrappers[t].classList.remove("desktop-active"),r.buttons[t].classList.remove("desktop-active"))})),r.last_index=r.last_index===o?null:o})})}},{}],3:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(r,"__esModule",{value:!0});var o=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),i=n(e("axios")),s=n(e("qs")),a=function(){function e(t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t,this.footer=document.querySelector("footer.site-footer"),this.wait=!1,this.page=1,this.date=vars.postDate,this.id=vars.postID,this.posts=this.container.querySelectorAll(".publication-wrapper"),this.select={},window.addEventListener("popstate",function(e){location.reload()}),window.addEventListener("scroll",function(e){document.body.scrollHeight-document.documentElement.scrollTop-(window.innerHeight+r.footer.offsetHeight)<=2*window.innerHeight&&!r.wait&&(r.addPost(),r.wait=!0),r.getActive()})}return o(e,[{key:"addPost",value:function(){var e=this,t={action:"publication_load_more",post_date:this.date,post_id:this.id,page:this.page};i.default.post(ajaxurl,s.default.stringify(t)).then(function(t){console.log(t),t.data.data.posts.forEach(function(t){e.container.insertAdjacentHTML("beforeend",t.content)}),e.posts=e.container.querySelectorAll(".publication-wrapper"),e.page+=1,e.wait=!1}).catch(function(e){console.log(e)})}},{key:"getActive",value:function(){var e={};this.posts.forEach(function(t){var r=t.getBoundingClientRect().top;r<window.innerHeight/2&&r>0&&(e={title:t.dataset.title,path:t.dataset.path})}),this.select.title!==e.title&&void 0!==e.title&&(this.select=e,this.updatePage(),console.log(this.select.title))}},{key:"updatePage",value:function(){document.title=this.select.title+" - Ecritures Numeriques",window.history.pushState({},"",this.select.path),window.history.scrollRestoration="manual"}}]),e}();r.default=a},{axios:6,qs:34}],4:[function(e,t,r){"use strict";t.exports=function e(t){var r=this;!function(t,r){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this),this.container=t,this.tabs=t.querySelectorAll("section.related__section"),this.buttons=t.querySelectorAll("button.header__button"),this.wrapper=t.querySelector(".related__container"),this.return=t.querySelector(".related__return"),this.tabsWrapper=t.querySelector(".related__wrapper"),this.last_index=0,this.buttons.forEach(function(e){e.addEventListener("click",function(e){var t=e.currentTarget.dataset.index;t!==r.last_index&&(r.buttons[r.last_index].classList.remove("active"),r.tabs[r.last_index].classList.remove("active"),r.buttons[t].classList.add("active"),r.tabs[t].classList.add("active"),r.last_index=t),window.innerWidth<=700&&(r.wrapper.classList.add("container--slide"),r.tabsWrapper.classList.remove("wrapper--hide"))})}),this.return.addEventListener("click",function(){window.innerWidth<=700&&(r.wrapper.classList.remove("container--slide"),r.tabsWrapper.classList.add("wrapper--hide"))})}},{}],5:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}var o=n(e("./Classes/Header")),i=n(e("./Classes/HomeRubrics")),s=n(e("./Classes/TaxonomyTabs")),a=n(e("./Classes/LoadMore"));new o.default(document.querySelector(".site-header"));if(document.querySelector(".home-section.rubrics"))new i.default(document.querySelector(".home-section.rubrics"),!0);if(document.querySelector(".taxonomy__related"))new s.default(document.querySelector(".taxonomy__related"));if(document.querySelector(".page-rubrics"))new i.default(document.querySelector(".page-rubrics"),!1);new a.default(document.querySelector(".publication__container"))},{"./Classes/Header":1,"./Classes/HomeRubrics":2,"./Classes/LoadMore":3,"./Classes/TaxonomyTabs":4}],6:[function(e,t,r){t.exports=e("./lib/axios")},{"./lib/axios":8}],7:[function(e,t,r){(function(r){"use strict";var n=e("./../utils"),o=e("./../core/settle"),i=e("./../helpers/buildURL"),s=e("./../helpers/parseHeaders"),a=e("./../helpers/isURLSameOrigin"),c=e("../core/createError"),u="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||e("./../helpers/btoa");t.exports=function(t){return new Promise(function(l,f){var p=t.data,d=t.headers;n.isFormData(p)&&delete d["Content-Type"];var h=new XMLHttpRequest,y="onreadystatechange",m=!1;if("test"===r.env.NODE_ENV||"undefined"==typeof window||!window.XDomainRequest||"withCredentials"in h||a(t.url)||(h=new window.XDomainRequest,y="onload",m=!0,h.onprogress=function(){},h.ontimeout=function(){}),t.auth){var v=t.auth.username||"",g=t.auth.password||"";d.Authorization="Basic "+u(v+":"+g)}if(h.open(t.method.toUpperCase(),i(t.url,t.params,t.paramsSerializer),!0),h.timeout=t.timeout,h[y]=function(){if(h&&(4===h.readyState||m)&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))){var e="getAllResponseHeaders"in h?s(h.getAllResponseHeaders()):null,r={data:t.responseType&&"text"!==t.responseType?h.response:h.responseText,status:1223===h.status?204:h.status,statusText:1223===h.status?"No Content":h.statusText,headers:e,config:t,request:h};o(l,f,r),h=null}},h.onerror=function(){f(c("Network Error",t,null,h)),h=null},h.ontimeout=function(){f(c("timeout of "+t.timeout+"ms exceeded",t,"ECONNABORTED",h)),h=null},n.isStandardBrowserEnv()){var w=e("./../helpers/cookies"),b=(t.withCredentials||a(t.url))&&t.xsrfCookieName?w.read(t.xsrfCookieName):void 0;b&&(d[t.xsrfHeaderName]=b)}if("setRequestHeader"in h&&n.forEach(d,function(e,t){void 0===p&&"content-type"===t.toLowerCase()?delete d[t]:h.setRequestHeader(t,e)}),t.withCredentials&&(h.withCredentials=!0),t.responseType)try{h.responseType=t.responseType}catch(e){if("json"!==t.responseType)throw e}"function"==typeof t.onDownloadProgress&&h.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&h.upload&&h.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then(function(e){h&&(h.abort(),f(e),h=null)}),void 0===p&&(p=null),h.send(p)})}}).call(this,e("_process"))},{"../core/createError":14,"./../core/settle":17,"./../helpers/btoa":21,"./../helpers/buildURL":22,"./../helpers/cookies":24,"./../helpers/isURLSameOrigin":26,"./../helpers/parseHeaders":28,"./../utils":30,_process:32}],8:[function(e,t,r){"use strict";function n(e){var t=new s(e),r=i(s.prototype.request,t);return o.extend(r,s.prototype,t),o.extend(r,t),r}var o=e("./utils"),i=e("./helpers/bind"),s=e("./core/Axios"),a=e("./defaults"),c=n(a);c.Axios=s,c.create=function(e){return n(o.merge(a,e))},c.Cancel=e("./cancel/Cancel"),c.CancelToken=e("./cancel/CancelToken"),c.isCancel=e("./cancel/isCancel"),c.all=function(e){return Promise.all(e)},c.spread=e("./helpers/spread"),t.exports=c,t.exports.default=c},{"./cancel/Cancel":9,"./cancel/CancelToken":10,"./cancel/isCancel":11,"./core/Axios":12,"./defaults":19,"./helpers/bind":20,"./helpers/spread":29,"./utils":30}],9:[function(e,t,r){"use strict";function n(e){this.message=e}n.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},n.prototype.__CANCEL__=!0,t.exports=n},{}],10:[function(e,t,r){"use strict";function n(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var r=this;e(function(e){r.reason||(r.reason=new o(e),t(r.reason))})}var o=e("./Cancel");n.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},n.source=function(){var e;return{token:new n(function(t){e=t}),cancel:e}},t.exports=n},{"./Cancel":9}],11:[function(e,t,r){"use strict";t.exports=function(e){return!(!e||!e.__CANCEL__)}},{}],12:[function(e,t,r){"use strict";function n(e){this.defaults=e,this.interceptors={request:new s,response:new s}}var o=e("./../defaults"),i=e("./../utils"),s=e("./InterceptorManager"),a=e("./dispatchRequest");n.prototype.request=function(e){"string"==typeof e&&(e=i.merge({url:arguments[0]},arguments[1])),(e=i.merge(o,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[a,void 0],r=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)r=r.then(t.shift(),t.shift());return r},i.forEach(["delete","get","head","options"],function(e){n.prototype[e]=function(t,r){return this.request(i.merge(r||{},{method:e,url:t}))}}),i.forEach(["post","put","patch"],function(e){n.prototype[e]=function(t,r,n){return this.request(i.merge(n||{},{method:e,url:t,data:r}))}}),t.exports=n},{"./../defaults":19,"./../utils":30,"./InterceptorManager":13,"./dispatchRequest":15}],13:[function(e,t,r){"use strict";function n(){this.handlers=[]}var o=e("./../utils");n.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},n.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},n.prototype.forEach=function(e){o.forEach(this.handlers,function(t){null!==t&&e(t)})},t.exports=n},{"./../utils":30}],14:[function(e,t,r){"use strict";var n=e("./enhanceError");t.exports=function(e,t,r,o,i){var s=new Error(e);return n(s,t,r,o,i)}},{"./enhanceError":16}],15:[function(e,t,r){"use strict";function n(e){e.cancelToken&&e.cancelToken.throwIfRequested()}var o=e("./../utils"),i=e("./transformData"),s=e("../cancel/isCancel"),a=e("../defaults"),c=e("./../helpers/isAbsoluteURL"),u=e("./../helpers/combineURLs");t.exports=function(e){n(e),e.baseURL&&!c(e.url)&&(e.url=u(e.baseURL,e.url)),e.headers=e.headers||{},e.data=i(e.data,e.headers,e.transformRequest),e.headers=o.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),o.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]});return(e.adapter||a.adapter)(e).then(function(t){return n(e),t.data=i(t.data,t.headers,e.transformResponse),t},function(t){return s(t)||(n(e),t&&t.response&&(t.response.data=i(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},{"../cancel/isCancel":11,"../defaults":19,"./../helpers/combineURLs":23,"./../helpers/isAbsoluteURL":25,"./../utils":30,"./transformData":18}],16:[function(e,t,r){"use strict";t.exports=function(e,t,r,n,o){return e.config=t,r&&(e.code=r),e.request=n,e.response=o,e}},{}],17:[function(e,t,r){"use strict";var n=e("./createError");t.exports=function(e,t,r){var o=r.config.validateStatus;r.status&&o&&!o(r.status)?t(n("Request failed with status code "+r.status,r.config,null,r.request,r)):e(r)}},{"./createError":14}],18:[function(e,t,r){"use strict";var n=e("./../utils");t.exports=function(e,t,r){return n.forEach(r,function(r){e=r(e,t)}),e}},{"./../utils":30}],19:[function(e,t,r){(function(r){"use strict";function n(e,t){!o.isUndefined(e)&&o.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var o=e("./utils"),i=e("./helpers/normalizeHeaderName"),s={"Content-Type":"application/x-www-form-urlencoded"},a={adapter:function(){var t;return"undefined"!=typeof XMLHttpRequest?t=e("./adapters/xhr"):void 0!==r&&(t=e("./adapters/http")),t}(),transformRequest:[function(e,t){return i(t,"Content-Type"),o.isFormData(e)||o.isArrayBuffer(e)||o.isBuffer(e)||o.isStream(e)||o.isFile(e)||o.isBlob(e)?e:o.isArrayBufferView(e)?e.buffer:o.isURLSearchParams(e)?(n(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):o.isObject(e)?(n(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};a.headers={common:{Accept:"application/json, text/plain, */*"}},o.forEach(["delete","get","head"],function(e){a.headers[e]={}}),o.forEach(["post","put","patch"],function(e){a.headers[e]=o.merge(s)}),t.exports=a}).call(this,e("_process"))},{"./adapters/http":7,"./adapters/xhr":7,"./helpers/normalizeHeaderName":27,"./utils":30,_process:32}],20:[function(e,t,r){"use strict";t.exports=function(e,t){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return e.apply(t,r)}}},{}],21:[function(e,t,r){"use strict";function n(){this.message="String contains an invalid character"}var o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";(n.prototype=new Error).code=5,n.prototype.name="InvalidCharacterError",t.exports=function(e){for(var t,r,i=String(e),s="",a=0,c=o;i.charAt(0|a)||(c="=",a%1);s+=c.charAt(63&t>>8-a%1*8)){if((r=i.charCodeAt(a+=.75))>255)throw new n;t=t<<8|r}return s}},{}],22:[function(e,t,r){"use strict";function n(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var o=e("./../utils");t.exports=function(e,t,r){if(!t)return e;var i;if(r)i=r(t);else if(o.isURLSearchParams(t))i=t.toString();else{var s=[];o.forEach(t,function(e,t){null!==e&&void 0!==e&&(o.isArray(e)?t+="[]":e=[e],o.forEach(e,function(e){o.isDate(e)?e=e.toISOString():o.isObject(e)&&(e=JSON.stringify(e)),s.push(n(t)+"="+n(e))}))}),i=s.join("&")}return i&&(e+=(-1===e.indexOf("?")?"?":"&")+i),e}},{"./../utils":30}],23:[function(e,t,r){"use strict";t.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},{}],24:[function(e,t,r){"use strict";var n=e("./../utils");t.exports=n.isStandardBrowserEnv()?{write:function(e,t,r,o,i,s){var a=[];a.push(e+"="+encodeURIComponent(t)),n.isNumber(r)&&a.push("expires="+new Date(r).toGMTString()),n.isString(o)&&a.push("path="+o),n.isString(i)&&a.push("domain="+i),!0===s&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},{"./../utils":30}],25:[function(e,t,r){"use strict";t.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},{}],26:[function(e,t,r){"use strict";var n=e("./../utils");t.exports=n.isStandardBrowserEnv()?function(){function e(e){var t=e;return r&&(o.setAttribute("href",t),t=o.href),o.setAttribute("href",t),{href:o.href,protocol:o.protocol?o.protocol.replace(/:$/,""):"",host:o.host,search:o.search?o.search.replace(/^\?/,""):"",hash:o.hash?o.hash.replace(/^#/,""):"",hostname:o.hostname,port:o.port,pathname:"/"===o.pathname.charAt(0)?o.pathname:"/"+o.pathname}}var t,r=/(msie|trident)/i.test(navigator.userAgent),o=document.createElement("a");return t=e(window.location.href),function(r){var o=n.isString(r)?e(r):r;return o.protocol===t.protocol&&o.host===t.host}}():function(){return!0}},{"./../utils":30}],27:[function(e,t,r){"use strict";var n=e("../utils");t.exports=function(e,t){n.forEach(e,function(r,n){n!==t&&n.toUpperCase()===t.toUpperCase()&&(e[t]=r,delete e[n])})}},{"../utils":30}],28:[function(e,t,r){"use strict";var n=e("./../utils"),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(e){var t,r,i,s={};return e?(n.forEach(e.split("\n"),function(e){if(i=e.indexOf(":"),t=n.trim(e.substr(0,i)).toLowerCase(),r=n.trim(e.substr(i+1)),t){if(s[t]&&o.indexOf(t)>=0)return;s[t]="set-cookie"===t?(s[t]?s[t]:[]).concat([r]):s[t]?s[t]+", "+r:r}}),s):s}},{"./../utils":30}],29:[function(e,t,r){"use strict";t.exports=function(e){return function(t){return e.apply(null,t)}}},{}],30:[function(e,t,r){"use strict";function n(e){return"[object Array]"===l.call(e)}function o(e){return null!==e&&"object"==typeof e}function i(e){return"[object Function]"===l.call(e)}function s(e,t){if(null!==e&&void 0!==e)if("object"!=typeof e&&(e=[e]),n(e))for(var r=0,o=e.length;r<o;r++)t.call(null,e[r],r,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(null,e[i],i,e)}function a(){function e(e,r){"object"==typeof t[r]&&"object"==typeof e?t[r]=a(t[r],e):t[r]=e}for(var t={},r=0,n=arguments.length;r<n;r++)s(arguments[r],e);return t}var c=e("./helpers/bind"),u=e("is-buffer"),l=Object.prototype.toString;t.exports={isArray:n,isArrayBuffer:function(e){return"[object ArrayBuffer]"===l.call(e)},isBuffer:u,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:o,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===l.call(e)},isFile:function(e){return"[object File]"===l.call(e)},isBlob:function(e){return"[object Blob]"===l.call(e)},isFunction:i,isStream:function(e){return o(e)&&i(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:s,merge:a,extend:function(e,t,r){return s(t,function(t,n){e[n]=r&&"function"==typeof t?c(t,r):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},{"./helpers/bind":20,"is-buffer":31}],31:[function(e,t,r){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}t.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},{}],32:[function(e,t,r){function n(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function i(e){if(l===setTimeout)return setTimeout(e,0);if((l===n||!l)&&setTimeout)return l=setTimeout,setTimeout(e,0);try{return l(e,0)}catch(t){try{return l.call(null,e,0)}catch(t){return l.call(this,e,0)}}}function s(){y&&d&&(y=!1,d.length?h=d.concat(h):m=-1,h.length&&a())}function a(){if(!y){var e=i(s);y=!0;for(var t=h.length;t;){for(d=h,h=[];++m<t;)d&&d[m].run();m=-1,t=h.length}d=null,y=!1,function(e){if(f===clearTimeout)return clearTimeout(e);if((f===o||!f)&&clearTimeout)return f=clearTimeout,clearTimeout(e);try{f(e)}catch(t){try{return f.call(null,e)}catch(t){return f.call(this,e)}}}(e)}}function c(e,t){this.fun=e,this.array=t}function u(){}var l,f,p=t.exports={};!function(){try{l="function"==typeof setTimeout?setTimeout:n}catch(e){l=n}try{f="function"==typeof clearTimeout?clearTimeout:o}catch(e){f=o}}();var d,h=[],y=!1,m=-1;p.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];h.push(new c(e,t)),1!==h.length||y||i(a)},c.prototype.run=function(){this.fun.apply(null,this.array)},p.title="browser",p.browser=!0,p.env={},p.argv=[],p.version="",p.versions={},p.on=u,p.addListener=u,p.once=u,p.off=u,p.removeListener=u,p.removeAllListeners=u,p.emit=u,p.prependListener=u,p.prependOnceListener=u,p.listeners=function(e){return[]},p.binding=function(e){throw new Error("process.binding is not supported")},p.cwd=function(){return"/"},p.chdir=function(e){throw new Error("process.chdir is not supported")},p.umask=function(){return 0}},{}],33:[function(e,t,r){"use strict";var n=String.prototype.replace,o=/%20/g;t.exports={default:"RFC3986",formatters:{RFC1738:function(e){return n.call(e,o,"+")},RFC3986:function(e){return e}},RFC1738:"RFC1738",RFC3986:"RFC3986"}},{}],34:[function(e,t,r){"use strict";var n=e("./stringify"),o=e("./parse"),i=e("./formats");t.exports={formats:i,parse:o,stringify:n}},{"./formats":33,"./parse":35,"./stringify":36}],35:[function(e,t,r){"use strict";var n=e("./utils"),o=Object.prototype.hasOwnProperty,i={allowDots:!1,allowPrototypes:!1,arrayLimit:20,decoder:n.decode,delimiter:"&",depth:5,parameterLimit:1e3,plainObjects:!1,strictNullHandling:!1},s=function(e,t,r){if(e){var n=r.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,i=/(\[[^[\]]*])/g,s=/(\[[^[\]]*])/.exec(n),a=s?n.slice(0,s.index):n,c=[];if(a){if(!r.plainObjects&&o.call(Object.prototype,a)&&!r.allowPrototypes)return;c.push(a)}for(var u=0;null!==(s=i.exec(n))&&u<r.depth;){if(u+=1,!r.plainObjects&&o.call(Object.prototype,s[1].slice(1,-1))&&!r.allowPrototypes)return;c.push(s[1])}return s&&c.push("["+n.slice(s.index)+"]"),function(e,t,r){for(var n=t,o=e.length-1;o>=0;--o){var i,s=e[o];if("[]"===s)i=(i=[]).concat(n);else{i=r.plainObjects?Object.create(null):{};var a="["===s.charAt(0)&&"]"===s.charAt(s.length-1)?s.slice(1,-1):s,c=parseInt(a,10);!isNaN(c)&&s!==a&&String(c)===a&&c>=0&&r.parseArrays&&c<=r.arrayLimit?(i=[])[c]=n:i[a]=n}n=i}return n}(c,t,r)}};t.exports=function(e,t){var r=t?n.assign({},t):{};if(null!==r.decoder&&void 0!==r.decoder&&"function"!=typeof r.decoder)throw new TypeError("Decoder has to be a function.");if(r.ignoreQueryPrefix=!0===r.ignoreQueryPrefix,r.delimiter="string"==typeof r.delimiter||n.isRegExp(r.delimiter)?r.delimiter:i.delimiter,r.depth="number"==typeof r.depth?r.depth:i.depth,r.arrayLimit="number"==typeof r.arrayLimit?r.arrayLimit:i.arrayLimit,r.parseArrays=!1!==r.parseArrays,r.decoder="function"==typeof r.decoder?r.decoder:i.decoder,r.allowDots="boolean"==typeof r.allowDots?r.allowDots:i.allowDots,r.plainObjects="boolean"==typeof r.plainObjects?r.plainObjects:i.plainObjects,r.allowPrototypes="boolean"==typeof r.allowPrototypes?r.allowPrototypes:i.allowPrototypes,r.parameterLimit="number"==typeof r.parameterLimit?r.parameterLimit:i.parameterLimit,r.strictNullHandling="boolean"==typeof r.strictNullHandling?r.strictNullHandling:i.strictNullHandling,""===e||null===e||void 0===e)return r.plainObjects?Object.create(null):{};for(var a="string"==typeof e?function(e,t){for(var r={},n=t.ignoreQueryPrefix?e.replace(/^\?/,""):e,s=t.parameterLimit===1/0?void 0:t.parameterLimit,a=n.split(t.delimiter,s),c=0;c<a.length;++c){var u,l,f=a[c],p=f.indexOf("]="),d=-1===p?f.indexOf("="):p+1;-1===d?(u=t.decoder(f,i.decoder),l=t.strictNullHandling?null:""):(u=t.decoder(f.slice(0,d),i.decoder),l=t.decoder(f.slice(d+1),i.decoder)),o.call(r,u)?r[u]=[].concat(r[u]).concat(l):r[u]=l}return r}(e,r):e,c=r.plainObjects?Object.create(null):{},u=Object.keys(a),l=0;l<u.length;++l){var f=u[l],p=s(f,a[f],r);c=n.merge(c,p,r)}return n.compact(c)}},{"./utils":37}],36:[function(e,t,r){"use strict";var n=e("./utils"),o=e("./formats"),i={brackets:function(e){return e+"[]"},indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},s=Date.prototype.toISOString,a={delimiter:"&",encode:!0,encoder:n.encode,encodeValuesOnly:!1,serializeDate:function(e){return s.call(e)},skipNulls:!1,strictNullHandling:!1},c=function e(t,r,o,i,s,c,u,l,f,p,d,h){var y=t;if("function"==typeof u)y=u(r,y);else if(y instanceof Date)y=p(y);else if(null===y){if(i)return c&&!h?c(r,a.encoder):r;y=""}if("string"==typeof y||"number"==typeof y||"boolean"==typeof y||n.isBuffer(y)){if(c){return[d(h?r:c(r,a.encoder))+"="+d(c(y,a.encoder))]}return[d(r)+"="+d(String(y))]}var m=[];if(void 0===y)return m;var v;if(Array.isArray(u))v=u;else{var g=Object.keys(y);v=l?g.sort(l):g}for(var w=0;w<v.length;++w){var b=v[w];s&&null===y[b]||(m=Array.isArray(y)?m.concat(e(y[b],o(r,b),o,i,s,c,u,l,f,p,d,h)):m.concat(e(y[b],r+(f?"."+b:"["+b+"]"),o,i,s,c,u,l,f,p,d,h)))}return m};t.exports=function(e,t){var r=e,s=t?n.assign({},t):{};if(null!==s.encoder&&void 0!==s.encoder&&"function"!=typeof s.encoder)throw new TypeError("Encoder has to be a function.");var u=void 0===s.delimiter?a.delimiter:s.delimiter,l="boolean"==typeof s.strictNullHandling?s.strictNullHandling:a.strictNullHandling,f="boolean"==typeof s.skipNulls?s.skipNulls:a.skipNulls,p="boolean"==typeof s.encode?s.encode:a.encode,d="function"==typeof s.encoder?s.encoder:a.encoder,h="function"==typeof s.sort?s.sort:null,y=void 0!==s.allowDots&&s.allowDots,m="function"==typeof s.serializeDate?s.serializeDate:a.serializeDate,v="boolean"==typeof s.encodeValuesOnly?s.encodeValuesOnly:a.encodeValuesOnly;if(void 0===s.format)s.format=o.default;else if(!Object.prototype.hasOwnProperty.call(o.formatters,s.format))throw new TypeError("Unknown format option provided.");var g,w,b=o.formatters[s.format];"function"==typeof s.filter?r=(w=s.filter)("",r):Array.isArray(s.filter)&&(g=w=s.filter);var x=[];if("object"!=typeof r||null===r)return"";var E;E=s.arrayFormat in i?s.arrayFormat:"indices"in s?s.indices?"indices":"repeat":"indices";var j=i[E];g||(g=Object.keys(r)),h&&g.sort(h);for(var L=0;L<g.length;++L){var A=g[L];f&&null===r[A]||(x=x.concat(c(r[A],A,j,l,f,p?d:null,w,h,y,m,b,v)))}var C=x.join(u),O=!0===s.addQueryPrefix?"?":"";return C.length>0?O+C:""}},{"./formats":33,"./utils":37}],37:[function(e,t,r){"use strict";var n=Object.prototype.hasOwnProperty,o=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}();r.arrayToObject=function(e,t){for(var r=t&&t.plainObjects?Object.create(null):{},n=0;n<e.length;++n)void 0!==e[n]&&(r[n]=e[n]);return r},r.merge=function(e,t,o){if(!t)return e;if("object"!=typeof t){if(Array.isArray(e))e.push(t);else{if("object"!=typeof e)return[e,t];(o.plainObjects||o.allowPrototypes||!n.call(Object.prototype,t))&&(e[t]=!0)}return e}if("object"!=typeof e)return[e].concat(t);var i=e;return Array.isArray(e)&&!Array.isArray(t)&&(i=r.arrayToObject(e,o)),Array.isArray(e)&&Array.isArray(t)?(t.forEach(function(t,i){n.call(e,i)?e[i]&&"object"==typeof e[i]?e[i]=r.merge(e[i],t,o):e.push(t):e[i]=t}),e):Object.keys(t).reduce(function(e,i){var s=t[i];return n.call(e,i)?e[i]=r.merge(e[i],s,o):e[i]=s,e},i)},r.assign=function(e,t){return Object.keys(t).reduce(function(e,r){return e[r]=t[r],e},e)},r.decode=function(e){try{return decodeURIComponent(e.replace(/\+/g," "))}catch(t){return e}},r.encode=function(e){if(0===e.length)return e;for(var t="string"==typeof e?e:String(e),r="",n=0;n<t.length;++n){var i=t.charCodeAt(n);45===i||46===i||95===i||126===i||i>=48&&i<=57||i>=65&&i<=90||i>=97&&i<=122?r+=t.charAt(n):i<128?r+=o[i]:i<2048?r+=o[192|i>>6]+o[128|63&i]:i<55296||i>=57344?r+=o[224|i>>12]+o[128|i>>6&63]+o[128|63&i]:(n+=1,i=65536+((1023&i)<<10|1023&t.charCodeAt(n)),r+=o[240|i>>18]+o[128|i>>12&63]+o[128|i>>6&63]+o[128|63&i])}return r},r.compact=function(e){for(var t=[{obj:{o:e},prop:"o"}],r=[],n=0;n<t.length;++n)for(var o=t[n],i=o.obj[o.prop],s=Object.keys(i),a=0;a<s.length;++a){var c=s[a],u=i[c];"object"==typeof u&&null!==u&&-1===r.indexOf(u)&&(t.push({obj:i,prop:c}),r.push(u))}return function(e){for(var t;e.length;){var r=e.pop();if(t=r.obj[r.prop],Array.isArray(t)){for(var n=[],o=0;o<t.length;++o)void 0!==t[o]&&n.push(t[o]);r.obj[r.prop]=n}}return t}(t)},r.isRegExp=function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},r.isBuffer=function(e){return null!==e&&void 0!==e&&!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))}},{}]},{},[5]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiZSIsInQiLCJuIiwiciIsInMiLCJvIiwidSIsImEiLCJyZXF1aXJlIiwiaSIsImYiLCJFcnJvciIsImNvZGUiLCJsIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLCIxIiwibW9kdWxlIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwcm90b3R5cGUiLCJIZWFkZXIiLCJjb250YWluZXIiLCJfdGhpcyIsInRoaXMiLCJpbnN0YW5jZSIsIlR5cGVFcnJvciIsIl9jbGFzc0NhbGxDaGVjayIsImhlYWRlciIsInRyaWdnZXIiLCJxdWVyeVNlbGVjdG9yIiwibmF2IiwiZHJvcERvd24iLCJhZGRFdmVudExpc3RlbmVyIiwidG9nZ2xlTmF2IiwicHJldmVudERlZmF1bHQiLCJ2YWx1ZSIsImNsYXNzTGlzdCIsInRvZ2dsZSIsIjIiLCJSdWJyaWNzIiwiZGVza3RvcCIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsImJ1dHRvbnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwid3JhcHBlcnMiLCJsYXN0X2luZGV4IiwiZm9yRWFjaCIsImJ1dHRvbiIsImluZGV4IiwiQXJyYXkiLCJpbmRleE9mIiwid2luZG93IiwiaW5uZXJXaWR0aCIsImFkZCIsInN0eWxlIiwiaGVpZ2h0IiwiY2hpbGRFbGVtZW50Q291bnQiLCJzY3JvbGxJbnRvVmlldyIsImJlaGF2aW9yIiwiYmxvY2siLCJpbmxpbmUiLCJ3cmFwcGVyIiwicmVtb3ZlUHJvcGVydHkiLCJyZW1vdmUiLCIzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2F4aW9zMiIsIl9xczIiLCJMb2FkTW9yZSIsImZvb3RlciIsImRvY3VtZW50Iiwid2FpdCIsInBhZ2UiLCJkYXRlIiwidmFycyIsInBvc3REYXRlIiwiaWQiLCJwb3N0SUQiLCJwb3N0cyIsInNlbGVjdCIsImxvY2F0aW9uIiwicmVsb2FkIiwiYm9keSIsInNjcm9sbEhlaWdodCIsImRvY3VtZW50RWxlbWVudCIsInNjcm9sbFRvcCIsImlubmVySGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0IiwiYWRkUG9zdCIsImdldEFjdGl2ZSIsIl90aGlzMiIsImRhdGEiLCJhY3Rpb24iLCJwb3N0X2RhdGUiLCJwb3N0X2lkIiwicG9zdCIsImFqYXh1cmwiLCJzdHJpbmdpZnkiLCJ0aGVuIiwicmVzIiwiY29uc29sZSIsImxvZyIsImluc2VydEFkamFjZW50SFRNTCIsImNvbnRlbnQiLCJjYXRjaCIsImVyciIsInRvcCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRpdGxlIiwiZGF0YXNldCIsInBhdGgiLCJ1cGRhdGVQYWdlIiwiaGlzdG9yeSIsInB1c2hTdGF0ZSIsInNjcm9sbFJlc3RvcmF0aW9uIiwiYXhpb3MiLCJxcyIsIjQiLCJUYXhvbm9teVRhYnMiLCJ0YWJzIiwicmV0dXJuIiwidGFic1dyYXBwZXIiLCJjdXJyZW50VGFyZ2V0IiwiNSIsIl9IZWFkZXIyIiwiX0hvbWVSdWJyaWNzMiIsIl9UYXhvbm9teVRhYnMyIiwiX0xvYWRNb3JlMiIsIi4vQ2xhc3Nlcy9IZWFkZXIiLCIuL0NsYXNzZXMvSG9tZVJ1YnJpY3MiLCIuL0NsYXNzZXMvTG9hZE1vcmUiLCIuL0NsYXNzZXMvVGF4b25vbXlUYWJzIiwiNiIsIi4vbGliL2F4aW9zIiwiNyIsInByb2Nlc3MiLCJ1dGlscyIsInNldHRsZSIsImJ1aWxkVVJMIiwicGFyc2VIZWFkZXJzIiwiaXNVUkxTYW1lT3JpZ2luIiwiY3JlYXRlRXJyb3IiLCJidG9hIiwiYmluZCIsImNvbmZpZyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsImhlYWRlcnMiLCJpc0Zvcm1EYXRhIiwicmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0IiwibG9hZEV2ZW50IiwieERvbWFpbiIsImVudiIsIk5PREVfRU5WIiwiWERvbWFpblJlcXVlc3QiLCJ1cmwiLCJvbnByb2dyZXNzIiwib250aW1lb3V0IiwiYXV0aCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJBdXRob3JpemF0aW9uIiwib3BlbiIsIm1ldGhvZCIsInRvVXBwZXJDYXNlIiwicGFyYW1zIiwicGFyYW1zU2VyaWFsaXplciIsInRpbWVvdXQiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJvbmVycm9yIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJjb29raWVzIiwieHNyZlZhbHVlIiwid2l0aENyZWRlbnRpYWxzIiwieHNyZkNvb2tpZU5hbWUiLCJyZWFkIiwieHNyZkhlYWRlck5hbWUiLCJ2YWwiLCJ0b0xvd2VyQ2FzZSIsInNldFJlcXVlc3RIZWFkZXIiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsVG9rZW4iLCJwcm9taXNlIiwiY2FuY2VsIiwiYWJvcnQiLCJzZW5kIiwiLi4vY29yZS9jcmVhdGVFcnJvciIsIi4vLi4vY29yZS9zZXR0bGUiLCIuLy4uL2hlbHBlcnMvYnRvYSIsIi4vLi4vaGVscGVycy9idWlsZFVSTCIsIi4vLi4vaGVscGVycy9jb29raWVzIiwiLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbiIsIi4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMiLCIuLy4uL3V0aWxzIiwiX3Byb2Nlc3MiLCI4IiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiY29udGV4dCIsIkF4aW9zIiwiZXh0ZW5kIiwiZGVmYXVsdHMiLCJjcmVhdGUiLCJpbnN0YW5jZUNvbmZpZyIsIm1lcmdlIiwiQ2FuY2VsIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsImFsbCIsInByb21pc2VzIiwic3ByZWFkIiwiLi9jYW5jZWwvQ2FuY2VsIiwiLi9jYW5jZWwvQ2FuY2VsVG9rZW4iLCIuL2NhbmNlbC9pc0NhbmNlbCIsIi4vY29yZS9BeGlvcyIsIi4vZGVmYXVsdHMiLCIuL2hlbHBlcnMvYmluZCIsIi4vaGVscGVycy9zcHJlYWQiLCIuL3V0aWxzIiwiOSIsIm1lc3NhZ2UiLCJ0b1N0cmluZyIsIl9fQ0FOQ0VMX18iLCIxMCIsImV4ZWN1dG9yIiwicmVzb2x2ZVByb21pc2UiLCJ0b2tlbiIsInJlYXNvbiIsInRocm93SWZSZXF1ZXN0ZWQiLCJzb3VyY2UiLCJjIiwiLi9DYW5jZWwiLCIxMSIsIjEyIiwiaW50ZXJjZXB0b3JzIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsInVuc2hpZnQiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInB1c2giLCJzaGlmdCIsIi4vLi4vZGVmYXVsdHMiLCIuL0ludGVyY2VwdG9yTWFuYWdlciIsIi4vZGlzcGF0Y2hSZXF1ZXN0IiwiMTMiLCJoYW5kbGVycyIsInVzZSIsImVqZWN0IiwiZm4iLCJoIiwiMTQiLCJlbmhhbmNlRXJyb3IiLCJlcnJvciIsIi4vZW5oYW5jZUVycm9yIiwiMTUiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwidHJhbnNmb3JtRGF0YSIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsImJhc2VVUkwiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwiY29tbW9uIiwiYWRhcHRlciIsInRyYW5zZm9ybVJlc3BvbnNlIiwiLi4vY2FuY2VsL2lzQ2FuY2VsIiwiLi4vZGVmYXVsdHMiLCIuLy4uL2hlbHBlcnMvY29tYmluZVVSTHMiLCIuLy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCIsIi4vdHJhbnNmb3JtRGF0YSIsIjE2IiwiMTciLCJ2YWxpZGF0ZVN0YXR1cyIsIi4vY3JlYXRlRXJyb3IiLCIxOCIsImZucyIsIjE5Iiwic2V0Q29udGVudFR5cGVJZlVuc2V0IiwiaXNVbmRlZmluZWQiLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJDb250ZW50LVR5cGUiLCJnZXREZWZhdWx0QWRhcHRlciIsImlzQXJyYXlCdWZmZXIiLCJpc0J1ZmZlciIsImlzU3RyZWFtIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJidWZmZXIiLCJpc1VSTFNlYXJjaFBhcmFtcyIsImlzT2JqZWN0IiwiSlNPTiIsInBhcnNlIiwibWF4Q29udGVudExlbmd0aCIsIkFjY2VwdCIsIi4vYWRhcHRlcnMvaHR0cCIsIi4vYWRhcHRlcnMveGhyIiwiLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUiLCIyMCIsInRoaXNBcmciLCJhcmdzIiwiYXBwbHkiLCIyMSIsIkUiLCJjaGFycyIsIm5hbWUiLCJpbnB1dCIsImNoYXJDb2RlIiwic3RyIiwiU3RyaW5nIiwib3V0cHV0IiwiaWR4IiwibWFwIiwiY2hhckF0IiwiY2hhckNvZGVBdCIsIjIyIiwiZW5jb2RlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicmVwbGFjZSIsInNlcmlhbGl6ZWRQYXJhbXMiLCJwYXJ0cyIsImlzQXJyYXkiLCJ2IiwiaXNEYXRlIiwidG9JU09TdHJpbmciLCJqb2luIiwiMjMiLCJyZWxhdGl2ZVVSTCIsIjI0Iiwid3JpdGUiLCJleHBpcmVzIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwiaXNOdW1iZXIiLCJEYXRlIiwidG9HTVRTdHJpbmciLCJpc1N0cmluZyIsIm1hdGNoIiwiUmVnRXhwIiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwibm93IiwiMjUiLCJ0ZXN0IiwiMjYiLCJyZXNvbHZlVVJMIiwiaHJlZiIsIm1zaWUiLCJ1cmxQYXJzaW5nTm9kZSIsInNldEF0dHJpYnV0ZSIsInByb3RvY29sIiwiaG9zdCIsInNlYXJjaCIsImhhc2giLCJob3N0bmFtZSIsInBvcnQiLCJwYXRobmFtZSIsIm9yaWdpblVSTCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImNyZWF0ZUVsZW1lbnQiLCJyZXF1ZXN0VVJMIiwicGFyc2VkIiwiMjciLCJub3JtYWxpemVkTmFtZSIsIi4uL3V0aWxzIiwiMjgiLCJpZ25vcmVEdXBsaWNhdGVPZiIsInNwbGl0IiwibGluZSIsInRyaW0iLCJzdWJzdHIiLCJjb25jYXQiLCIyOSIsImNhbGxiYWNrIiwiYXJyIiwiMzAiLCJpc0Z1bmN0aW9uIiwiaGFzT3duUHJvcGVydHkiLCJhc3NpZ25WYWx1ZSIsInJlc3VsdCIsIkZvcm1EYXRhIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJwaXBlIiwiVVJMU2VhcmNoUGFyYW1zIiwicHJvZHVjdCIsImIiLCJpcy1idWZmZXIiLCIzMSIsImNvbnN0cnVjdG9yIiwicmVhZEZsb2F0TEUiLCJzbGljZSIsImlzU2xvd0J1ZmZlciIsIl9pc0J1ZmZlciIsIjMyIiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwiY2FjaGVkU2V0VGltZW91dCIsInNldFRpbWVvdXQiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpbmluZyIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwicXVldWVJbmRleCIsImRyYWluUXVldWUiLCJsZW4iLCJydW4iLCJtYXJrZXIiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwiYXJyYXkiLCJub29wIiwibmV4dFRpY2siLCJicm93c2VyIiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiMzMiLCJwZXJjZW50VHdlbnRpZXMiLCJmb3JtYXR0ZXJzIiwiUkZDMTczOCIsIlJGQzM5ODYiLCIzNCIsImZvcm1hdHMiLCIuL2Zvcm1hdHMiLCIuL3BhcnNlIiwiLi9zdHJpbmdpZnkiLCIzNSIsImhhcyIsImFsbG93RG90cyIsImFsbG93UHJvdG90eXBlcyIsImFycmF5TGltaXQiLCJkZWNvZGVyIiwiZGVjb2RlIiwiZGVsaW1pdGVyIiwiZGVwdGgiLCJwYXJhbWV0ZXJMaW1pdCIsInBsYWluT2JqZWN0cyIsInN0cmljdE51bGxIYW5kbGluZyIsInBhcnNlS2V5cyIsImdpdmVuS2V5Iiwib3B0aW9ucyIsImNoaWxkIiwic2VnbWVudCIsImV4ZWMiLCJwYXJlbnQiLCJrZXlzIiwibGVhZiIsInJvb3QiLCJjbGVhblJvb3QiLCJwYXJzZUludCIsImlzTmFOIiwicGFyc2VBcnJheXMiLCJwYXJzZU9iamVjdCIsIm9wdHMiLCJhc3NpZ24iLCJpZ25vcmVRdWVyeVByZWZpeCIsImlzUmVnRXhwIiwidGVtcE9iaiIsImNsZWFuU3RyIiwibGltaXQiLCJJbmZpbml0eSIsInBhcnQiLCJicmFja2V0RXF1YWxzUG9zIiwicG9zIiwicGFyc2VWYWx1ZXMiLCJuZXdPYmoiLCJjb21wYWN0IiwiMzYiLCJhcnJheVByZWZpeEdlbmVyYXRvcnMiLCJicmFja2V0cyIsInByZWZpeCIsImluZGljZXMiLCJyZXBlYXQiLCJ0b0lTTyIsImVuY29kZXIiLCJlbmNvZGVWYWx1ZXNPbmx5Iiwic2VyaWFsaXplRGF0ZSIsInNraXBOdWxscyIsIm9iamVjdCIsImdlbmVyYXRlQXJyYXlQcmVmaXgiLCJmaWx0ZXIiLCJzb3J0IiwiZm9ybWF0dGVyIiwidmFsdWVzIiwib2JqS2V5cyIsImZvcm1hdCIsImFycmF5Rm9ybWF0Iiwiam9pbmVkIiwiYWRkUXVlcnlQcmVmaXgiLCIzNyIsImhleFRhYmxlIiwiYXJyYXlUb09iamVjdCIsIm1lcmdlVGFyZ2V0IiwiaXRlbSIsInJlZHVjZSIsImFjYyIsInN0cmluZyIsIm91dCIsInByb3AiLCJyZWZzIiwiaiIsInBvcCIsImNvbXBhY3RlZCIsImNvbXBhY3RRdWV1ZSJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBVUEsRUFBRUMsRUFBRUMsRUFBRUMsR0FBRyxTQUFTQyxFQUFFQyxFQUFFQyxHQUFHLElBQUlKLEVBQUVHLEdBQUcsQ0FBQyxJQUFJSixFQUFFSSxHQUFHLENBQUMsSUFBSUUsRUFBa0IsbUJBQVRDLFNBQXFCQSxRQUFRLElBQUlGLEdBQUdDLEVBQUUsT0FBT0EsRUFBRUYsR0FBRSxHQUFJLEdBQUdJLEVBQUUsT0FBT0EsRUFBRUosR0FBRSxHQUFJLElBQUlLLEVBQUUsSUFBSUMsTUFBTSx1QkFBdUJOLEVBQUUsS0FBSyxNQUFNSyxFQUFFRSxLQUFLLG1CQUFtQkYsRUFBRSxJQUFJRyxFQUFFWCxFQUFFRyxJQUFJUyxZQUFZYixFQUFFSSxHQUFHLEdBQUdVLEtBQUtGLEVBQUVDLFFBQVEsU0FBU2QsR0FBRyxJQUFJRSxFQUFFRCxFQUFFSSxHQUFHLEdBQUdMLEdBQUcsT0FBT0ksRUFBRUYsR0FBSUYsSUFBSWEsRUFBRUEsRUFBRUMsUUFBUWQsRUFBRUMsRUFBRUMsRUFBRUMsR0FBRyxPQUFPRCxFQUFFRyxHQUFHUyxRQUFrRCxJQUFJLElBQTFDTCxFQUFrQixtQkFBVEQsU0FBcUJBLFFBQWdCSCxFQUFFLEVBQUVBLEVBQUVGLEVBQUVhLE9BQU9YLElBQUlELEVBQUVELEVBQUVFLElBQUksT0FBT0QsRUFBdmIsRUFBNGJhLEdBQUcsU0FBU1QsRUFBUVUsRUFBT0osR0FDdmQsYUFFQSxJQUFJSyxFQUFlLFdBQWMsU0FBU0MsRUFBaUJDLEVBQVFDLEdBQVMsSUFBSyxJQUFJYixFQUFJLEVBQUdBLEVBQUlhLEVBQU1OLE9BQVFQLElBQUssQ0FBRSxJQUFJYyxFQUFhRCxFQUFNYixHQUFJYyxFQUFXQyxXQUFhRCxFQUFXQyxhQUFjLEVBQU9ELEVBQVdFLGNBQWUsRUFBVSxVQUFXRixJQUFZQSxFQUFXRyxV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SyxNQUFPak0sSUFBS0EsRUFBS3lkLEtBQU03Z0IsSUFDN0I4Z0IsRUFBS3pSLEtBQUtuRSxJQUt0QixPQS9LZSxTQUFzQnlPLEdBR3JDLElBRkEsSUFBSXZXLEVBRUd1VyxFQUFNeGEsUUFBUSxDQUNqQixJQUFJcWhCLEVBQU83RyxFQUFNcUgsTUFHakIsR0FGQTVkLEVBQU1vZCxFQUFLcGQsSUFBSW9kLEVBQUtLLE1BRWhCMWUsTUFBTW9TLFFBQVFuUixHQUFNLENBR3BCLElBQUssSUFGRDZkLEtBRUtGLEVBQUksRUFBR0EsRUFBSTNkLEVBQUlqRSxTQUFVNGhCLE9BQ1IsSUFBWDNkLEVBQUkyZCxJQUNYRSxFQUFVNVIsS0FBS2pNLEVBQUkyZCxJQUkzQlAsRUFBS3BkLElBQUlvZCxFQUFLSyxNQUFRSSxHQUk5QixPQUFPN2QsRUEySkE4ZCxDQUFhdkgsSUFHeEIxYSxFQUFRa2YsU0FBVyxTQUFrQi9hLEdBQ2pDLE1BQStDLG9CQUF4Q3RELE9BQU9NLFVBQVU0TixTQUFTOU8sS0FBS2tFLElBRzFDbkUsRUFBUWdULFNBQVcsU0FBa0I3TyxHQUNqQyxPQUFZLE9BQVJBLFFBQStCLElBQVJBLE1BSWpCQSxFQUFJd1YsYUFBZXhWLEVBQUl3VixZQUFZM0csVUFBWTdPLEVBQUl3VixZQUFZM0csU0FBUzdPLGVBRzNFIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSh7MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBIZWFkZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEhlYWRlcihjb250YWluZXIpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhlYWRlcik7XG5cbiAgICB0aGlzLmhlYWRlciA9IGNvbnRhaW5lcjtcbiAgICB0aGlzLnRyaWdnZXIgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignLm5hdl9fdHJpZ2dlcicpO1xuICAgIHRoaXMubmF2ID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5zaXRlLWhlYWRlcl9fbmF2Jyk7XG4gICAgdGhpcy5kcm9wRG93biA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuZHJvcF9fdHJpZ2dlcicpO1xuXG4gICAgdGhpcy50cmlnZ2VyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLnRvZ2dsZU5hdigpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5kcm9wRG93bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoSGVhZGVyLCBbe1xuICAgIGtleTogJ3RvZ2dsZU5hdicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvZ2dsZU5hdigpIHtcbiAgICAgIHRoaXMubmF2LmNsYXNzTGlzdC50b2dnbGUoJ3NpdGUtaGVhZGVyX19uYXYtLWhpZGUnKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gSGVhZGVyO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhlYWRlcjtcblxufSx7fV0sMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBSdWJyaWNzID0gZnVuY3Rpb24gUnVicmljcyhjb250YWluZXIpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgZGVza3RvcCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdHJ1ZTtcblxuICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUnVicmljcyk7XG5cbiAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gIHRoaXMuYnV0dG9ucyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcuaXRlbV9fYnV0dG9uJyk7XG4gIHRoaXMud3JhcHBlcnMgPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLml0ZW1fX3dyYXBwZXInKTtcbiAgdGhpcy5sYXN0X2luZGV4ID0gbnVsbDtcbiAgdGhpcy5kZXNrdG9wID0gZGVza3RvcDtcblxuICB0aGlzLmJ1dHRvbnMuZm9yRWFjaChmdW5jdGlvbiAoYnV0dG9uKSB7XG4gICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHZhciBpbmRleCA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoX3RoaXMuYnV0dG9ucywgYnV0dG9uKTtcblxuICAgICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoIDwgNzAwKSB7XG4gICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdtb2JpbGUtYWN0aXZlJyk7XG4gICAgICAgIF90aGlzLndyYXBwZXJzW2luZGV4XS5zdHlsZS5oZWlnaHQgPSBfdGhpcy53cmFwcGVyc1tpbmRleF0uY2hpbGRFbGVtZW50Q291bnQgKiA2MCArICdweCc7XG4gICAgICAgIF90aGlzLmNvbnRhaW5lci5zY3JvbGxJbnRvVmlldyh7IGJlaGF2aW9yOiAnc21vb3RoJywgYmxvY2s6ICdzdGFydCcsIGlubGluZTogJ25lYXJlc3QnIH0pO1xuXG4gICAgICAgIF90aGlzLndyYXBwZXJzLmZvckVhY2goZnVuY3Rpb24gKHdyYXBwZXIsIGkpIHtcbiAgICAgICAgICBpZiAoaSAhPT0gaW5kZXggfHwgaW5kZXggPT09IF90aGlzLmxhc3RfaW5kZXgpIHtcbiAgICAgICAgICAgIHdyYXBwZXIuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ2hlaWdodCcpO1xuICAgICAgICAgICAgX3RoaXMuYnV0dG9uc1tpXS5jbGFzc0xpc3QucmVtb3ZlKCdtb2JpbGUtYWN0aXZlJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoZGVza3RvcCkge1xuICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgnZGVza3RvcC1hY3RpdmUnKTtcbiAgICAgICAgX3RoaXMud3JhcHBlcnNbaW5kZXhdLmNsYXNzTGlzdC5hZGQoJ2Rlc2t0b3AtYWN0aXZlJyk7XG5cbiAgICAgICAgX3RoaXMud3JhcHBlcnMuZm9yRWFjaChmdW5jdGlvbiAod3JhcHBlciwgaSkge1xuICAgICAgICAgIF90aGlzLndyYXBwZXJzW2ldLmNsYXNzTGlzdC5yZW1vdmUoJ21vYmlsZS1hY3RpdmUnKTtcbiAgICAgICAgICBfdGhpcy5idXR0b25zW2ldLmNsYXNzTGlzdC5yZW1vdmUoJ21vYmlsZS1hY3RpdmUnKTtcbiAgICAgICAgICB3cmFwcGVyLnN0eWxlLnJlbW92ZVByb3BlcnR5KCdoZWlnaHQnKTtcbiAgICAgICAgICBpZiAoaSAhPT0gaW5kZXgpIHtcbiAgICAgICAgICAgIF90aGlzLndyYXBwZXJzW2ldLmNsYXNzTGlzdC5yZW1vdmUoJ2Rlc2t0b3AtYWN0aXZlJyk7XG4gICAgICAgICAgICBfdGhpcy5idXR0b25zW2ldLmNsYXNzTGlzdC5yZW1vdmUoJ2Rlc2t0b3AtYWN0aXZlJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMubGFzdF9pbmRleCA9IF90aGlzLmxhc3RfaW5kZXggPT09IGluZGV4ID8gbnVsbCA6IGluZGV4O1xuICAgIH0pO1xuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUnVicmljcztcblxufSx7fV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuXG52YXIgX2F4aW9zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2F4aW9zKTtcblxudmFyIF9xcyA9IHJlcXVpcmUoJ3FzJyk7XG5cbnZhciBfcXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgTG9hZE1vcmUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIExvYWRNb3JlKGNvbnRhaW5lcikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9hZE1vcmUpO1xuXG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgdGhpcy5mb290ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdmb290ZXIuc2l0ZS1mb290ZXInKTtcbiAgICB0aGlzLndhaXQgPSBmYWxzZTtcbiAgICB0aGlzLnBhZ2UgPSAxO1xuICAgIHRoaXMuZGF0ZSA9IHZhcnMucG9zdERhdGU7XG4gICAgdGhpcy5pZCA9IHZhcnMucG9zdElEO1xuICAgIHRoaXMucG9zdHMgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcucHVibGljYXRpb24td3JhcHBlcicpO1xuXG4gICAgdGhpcy5zZWxlY3QgPSB7fTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAvLyBpZiAoZS5vcmlnaW5hbEV2ZW50LnN0YXRlICE9PSBudWxsKSB7XG4gICAgICBsb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgIC8vIH1cbiAgICB9KTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIHNjcm9sbEJvdHRvbSA9IGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0IC0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCAtICh3aW5kb3cuaW5uZXJIZWlnaHQgKyBfdGhpcy5mb290ZXIub2Zmc2V0SGVpZ2h0KTtcblxuICAgICAgaWYgKHNjcm9sbEJvdHRvbSA8PSB3aW5kb3cuaW5uZXJIZWlnaHQgKiAyICYmICFfdGhpcy53YWl0KSB7XG4gICAgICAgIF90aGlzLmFkZFBvc3QoKTtcbiAgICAgICAgX3RoaXMud2FpdCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmdldEFjdGl2ZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKExvYWRNb3JlLCBbe1xuICAgIGtleTogJ2FkZFBvc3QnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRQb3N0KCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICBhY3Rpb246ICdwdWJsaWNhdGlvbl9sb2FkX21vcmUnLFxuICAgICAgICBwb3N0X2RhdGU6IHRoaXMuZGF0ZSxcbiAgICAgICAgcG9zdF9pZDogdGhpcy5pZCxcbiAgICAgICAgcGFnZTogdGhpcy5wYWdlXG4gICAgICB9O1xuXG4gICAgICBfYXhpb3MyLmRlZmF1bHQucG9zdChhamF4dXJsLCBfcXMyLmRlZmF1bHQuc3RyaW5naWZ5KGRhdGEpKS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgY29uc29sZS5sb2cocmVzKTtcbiAgICAgICAgcmVzLmRhdGEuZGF0YS5wb3N0cy5mb3JFYWNoKGZ1bmN0aW9uIChwb3N0KSB7XG4gICAgICAgICAgX3RoaXMyLmNvbnRhaW5lci5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIHBvc3QuY29udGVudCk7XG4gICAgICAgIH0pO1xuICAgICAgICBfdGhpczIucG9zdHMgPSBfdGhpczIuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5wdWJsaWNhdGlvbi13cmFwcGVyJyk7XG4gICAgICAgIF90aGlzMi5wYWdlICs9IDE7XG4gICAgICAgIF90aGlzMi53YWl0ID0gZmFsc2U7XG4gICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRBY3RpdmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBY3RpdmUoKSB7XG4gICAgICB2YXIgc2VsZWN0ID0ge307XG4gICAgICB0aGlzLnBvc3RzLmZvckVhY2goZnVuY3Rpb24gKHBvc3QpIHtcbiAgICAgICAgdmFyIF9wb3N0JGdldEJvdW5kaW5nQ2xpZSA9IHBvc3QuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgICAgICB0b3AgPSBfcG9zdCRnZXRCb3VuZGluZ0NsaWUudG9wO1xuXG4gICAgICAgIGlmICh0b3AgPCB3aW5kb3cuaW5uZXJIZWlnaHQgLyAyICYmIHRvcCA+IDApIHtcbiAgICAgICAgICBzZWxlY3QgPSB7XG4gICAgICAgICAgICB0aXRsZTogcG9zdC5kYXRhc2V0LnRpdGxlLFxuICAgICAgICAgICAgcGF0aDogcG9zdC5kYXRhc2V0LnBhdGhcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICh0aGlzLnNlbGVjdC50aXRsZSAhPT0gc2VsZWN0LnRpdGxlICYmIHNlbGVjdC50aXRsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ID0gc2VsZWN0O1xuICAgICAgICB0aGlzLnVwZGF0ZVBhZ2UoKTtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5zZWxlY3QudGl0bGUpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZVBhZ2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVQYWdlKCkge1xuICAgICAgZG9jdW1lbnQudGl0bGUgPSB0aGlzLnNlbGVjdC50aXRsZSArICcgLSBFY3JpdHVyZXMgTnVtZXJpcXVlcyc7XG4gICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe30sICcnLCB0aGlzLnNlbGVjdC5wYXRoKTtcbiAgICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gJ21hbnVhbCc7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIExvYWRNb3JlO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBMb2FkTW9yZTtcblxufSx7XCJheGlvc1wiOjYsXCJxc1wiOjM0fV0sNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBUYXhvbm9teVRhYnMgPSBmdW5jdGlvbiBUYXhvbm9teVRhYnMoY29udGFpbmVyKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRheG9ub215VGFicyk7XG5cbiAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gIHRoaXMudGFicyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCdzZWN0aW9uLnJlbGF0ZWRfX3NlY3Rpb24nKTtcbiAgdGhpcy5idXR0b25zID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbi5oZWFkZXJfX2J1dHRvbicpO1xuICB0aGlzLndyYXBwZXIgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignLnJlbGF0ZWRfX2NvbnRhaW5lcicpO1xuICB0aGlzLnJldHVybiA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcucmVsYXRlZF9fcmV0dXJuJyk7XG4gIHRoaXMudGFic1dyYXBwZXIgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignLnJlbGF0ZWRfX3dyYXBwZXInKTtcbiAgdGhpcy5sYXN0X2luZGV4ID0gMDtcblxuICB0aGlzLmJ1dHRvbnMuZm9yRWFjaChmdW5jdGlvbiAoYnV0dG9uKSB7XG4gICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBpbmRleCA9IGUuY3VycmVudFRhcmdldC5kYXRhc2V0LmluZGV4O1xuXG5cbiAgICAgIGlmIChpbmRleCAhPT0gX3RoaXMubGFzdF9pbmRleCkge1xuICAgICAgICBfdGhpcy5idXR0b25zW190aGlzLmxhc3RfaW5kZXhdLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgICAgICBfdGhpcy50YWJzW190aGlzLmxhc3RfaW5kZXhdLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuXG4gICAgICAgIF90aGlzLmJ1dHRvbnNbaW5kZXhdLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgICAgICBfdGhpcy50YWJzW2luZGV4XS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcblxuICAgICAgICBfdGhpcy5sYXN0X2luZGV4ID0gaW5kZXg7XG4gICAgICB9XG5cbiAgICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA8PSA3MDApIHtcbiAgICAgICAgX3RoaXMud3JhcHBlci5jbGFzc0xpc3QuYWRkKCdjb250YWluZXItLXNsaWRlJyk7XG4gICAgICAgIF90aGlzLnRhYnNXcmFwcGVyLmNsYXNzTGlzdC5yZW1vdmUoJ3dyYXBwZXItLWhpZGUnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgdGhpcy5yZXR1cm4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoIDw9IDcwMCkge1xuICAgICAgX3RoaXMud3JhcHBlci5jbGFzc0xpc3QucmVtb3ZlKCdjb250YWluZXItLXNsaWRlJyk7XG4gICAgICBfdGhpcy50YWJzV3JhcHBlci5jbGFzc0xpc3QuYWRkKCd3cmFwcGVyLS1oaWRlJyk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVGF4b25vbXlUYWJzO1xuXG59LHt9XSw1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9IZWFkZXIgPSByZXF1aXJlKCcuL0NsYXNzZXMvSGVhZGVyJyk7XG5cbnZhciBfSGVhZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0hlYWRlcik7XG5cbnZhciBfSG9tZVJ1YnJpY3MgPSByZXF1aXJlKCcuL0NsYXNzZXMvSG9tZVJ1YnJpY3MnKTtcblxudmFyIF9Ib21lUnVicmljczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Ib21lUnVicmljcyk7XG5cbnZhciBfVGF4b25vbXlUYWJzID0gcmVxdWlyZSgnLi9DbGFzc2VzL1RheG9ub215VGFicycpO1xuXG52YXIgX1RheG9ub215VGFiczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9UYXhvbm9teVRhYnMpO1xuXG52YXIgX0xvYWRNb3JlID0gcmVxdWlyZSgnLi9DbGFzc2VzL0xvYWRNb3JlJyk7XG5cbnZhciBfTG9hZE1vcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTG9hZE1vcmUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgaGVhZGVyID0gbmV3IF9IZWFkZXIyLmRlZmF1bHQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNpdGUtaGVhZGVyJykpO1xuXG5pZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhvbWUtc2VjdGlvbi5ydWJyaWNzJykpIHtcbiAgdmFyIGhvbWVSdWJyaWNzID0gbmV3IF9Ib21lUnVicmljczIuZGVmYXVsdChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaG9tZS1zZWN0aW9uLnJ1YnJpY3MnKSwgdHJ1ZSk7XG59XG5cbmlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGF4b25vbXlfX3JlbGF0ZWQnKSkge1xuICB2YXIgdGFicyA9IG5ldyBfVGF4b25vbXlUYWJzMi5kZWZhdWx0KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50YXhvbm9teV9fcmVsYXRlZCcpKTtcbn1cblxuaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wYWdlLXJ1YnJpY3MnKSkge1xuICB2YXIgcGFnZVJ1YnJpY3MgPSBuZXcgX0hvbWVSdWJyaWNzMi5kZWZhdWx0KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wYWdlLXJ1YnJpY3MnKSwgZmFsc2UpO1xufVxuXG52YXIgUHVibGljYXRpb25Mb2FkID0gbmV3IF9Mb2FkTW9yZTIuZGVmYXVsdChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHVibGljYXRpb25fX2NvbnRhaW5lcicpKTtcblxufSx7XCIuL0NsYXNzZXMvSGVhZGVyXCI6MSxcIi4vQ2xhc3Nlcy9Ib21lUnVicmljc1wiOjIsXCIuL0NsYXNzZXMvTG9hZE1vcmVcIjozLFwiLi9DbGFzc2VzL1RheG9ub215VGFic1wiOjR9XSw2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTtcbn0se1wiLi9saWIvYXhpb3NcIjo4fV0sNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvY3JlYXRlRXJyb3InKTtcbnZhciBidG9hID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5idG9hICYmIHdpbmRvdy5idG9hLmJpbmQod2luZG93KSkgfHwgcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J0b2EnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB2YXIgbG9hZEV2ZW50ID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG4gICAgdmFyIHhEb21haW4gPSBmYWxzZTtcblxuICAgIC8vIEZvciBJRSA4LzkgQ09SUyBzdXBwb3J0XG4gICAgLy8gT25seSBzdXBwb3J0cyBQT1NUIGFuZCBHRVQgY2FsbHMgYW5kIGRvZXNuJ3QgcmV0dXJucyB0aGUgcmVzcG9uc2UgaGVhZGVycy5cbiAgICAvLyBET04nVCBkbyB0aGlzIGZvciB0ZXN0aW5nIGIvYyBYTUxIdHRwUmVxdWVzdCBpcyBtb2NrZWQsIG5vdCBYRG9tYWluUmVxdWVzdC5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJlxuICAgICAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICB3aW5kb3cuWERvbWFpblJlcXVlc3QgJiYgISgnd2l0aENyZWRlbnRpYWxzJyBpbiByZXF1ZXN0KSAmJlxuICAgICAgICAhaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSB7XG4gICAgICByZXF1ZXN0ID0gbmV3IHdpbmRvdy5YRG9tYWluUmVxdWVzdCgpO1xuICAgICAgbG9hZEV2ZW50ID0gJ29ubG9hZCc7XG4gICAgICB4RG9tYWluID0gdHJ1ZTtcbiAgICAgIHJlcXVlc3Qub25wcm9ncmVzcyA9IGZ1bmN0aW9uIGhhbmRsZVByb2dyZXNzKCkge307XG4gICAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7fTtcbiAgICB9XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0W2xvYWRFdmVudF0gPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IChyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQgJiYgIXhEb21haW4pKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIC8vIElFIHNlbmRzIDEyMjMgaW5zdGVhZCBvZiAyMDQgKGh0dHBzOi8vZ2l0aHViLmNvbS9heGlvcy9heGlvcy9pc3N1ZXMvMjAxKVxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzID09PSAxMjIzID8gMjA0IDogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzID09PSAxMjIzID8gJ05vIENvbnRlbnQnIDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcigndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG5cbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihjb25maWcudXJsKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcud2l0aENyZWRlbnRpYWxzKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEV4cGVjdGVkIERPTUV4Y2VwdGlvbiB0aHJvd24gYnkgYnJvd3NlcnMgbm90IGNvbXBhdGlibGUgWE1MSHR0cFJlcXVlc3QgTGV2ZWwgMi5cbiAgICAgICAgLy8gQnV0LCB0aGlzIGNhbiBiZSBzdXBwcmVzc2VkIGZvciAnanNvbicgdHlwZSBhcyBpdCBjYW4gYmUgcGFyc2VkIGJ5IGRlZmF1bHQgJ3RyYW5zZm9ybVJlc3BvbnNlJyBmdW5jdGlvbi5cbiAgICAgICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4ucHJvbWlzZS50aGVuKGZ1bmN0aW9uIG9uQ2FuY2VsZWQoY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVqZWN0KGNhbmNlbCk7XG4gICAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuXG59LHtcIi4uL2NvcmUvY3JlYXRlRXJyb3JcIjoxNCxcIi4vLi4vY29yZS9zZXR0bGVcIjoxNyxcIi4vLi4vaGVscGVycy9idG9hXCI6MjEsXCIuLy4uL2hlbHBlcnMvYnVpbGRVUkxcIjoyMixcIi4vLi4vaGVscGVycy9jb29raWVzXCI6MjQsXCIuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luXCI6MjYsXCIuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzXCI6MjgsXCIuLy4uL3V0aWxzXCI6MzAsXCJfcHJvY2Vzc1wiOjMyfV0sODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZSh1dGlscy5tZXJnZShkZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuXG59LHtcIi4vY2FuY2VsL0NhbmNlbFwiOjksXCIuL2NhbmNlbC9DYW5jZWxUb2tlblwiOjEwLFwiLi9jYW5jZWwvaXNDYW5jZWxcIjoxMSxcIi4vY29yZS9BeGlvc1wiOjEyLFwiLi9kZWZhdWx0c1wiOjE5LFwiLi9oZWxwZXJzL2JpbmRcIjoyMCxcIi4vaGVscGVycy9zcHJlYWRcIjoyOSxcIi4vdXRpbHNcIjozMH1dLDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG5cbn0se31dLDEwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4vQ2FuY2VsJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG5cbn0se1wiLi9DYW5jZWxcIjo5fV0sMTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG5cbn0se31dLDEyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi8uLi9kZWZhdWx0cycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IHV0aWxzLm1lcmdlKHtcbiAgICAgIHVybDogYXJndW1lbnRzWzBdXG4gICAgfSwgYXJndW1lbnRzWzFdKTtcbiAgfVxuXG4gIGNvbmZpZyA9IHV0aWxzLm1lcmdlKGRlZmF1bHRzLCB7bWV0aG9kOiAnZ2V0J30sIHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybFxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG5cbn0se1wiLi8uLi9kZWZhdWx0c1wiOjE5LFwiLi8uLi91dGlsc1wiOjMwLFwiLi9JbnRlcmNlcHRvck1hbmFnZXJcIjoxMyxcIi4vZGlzcGF0Y2hSZXF1ZXN0XCI6MTV9XSwxMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuXG59LHtcIi4vLi4vdXRpbHNcIjozMH1dLDE0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG5cbn0se1wiLi9lbmhhbmNlRXJyb3JcIjoxNn1dLDE1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIFN1cHBvcnQgYmFzZVVSTCBjb25maWdcbiAgaWYgKGNvbmZpZy5iYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKGNvbmZpZy51cmwpKSB7XG4gICAgY29uZmlnLnVybCA9IGNvbWJpbmVVUkxzKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgfVxuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnMgfHwge31cbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuXG59LHtcIi4uL2NhbmNlbC9pc0NhbmNlbFwiOjExLFwiLi4vZGVmYXVsdHNcIjoxOSxcIi4vLi4vaGVscGVycy9jb21iaW5lVVJMc1wiOjIzLFwiLi8uLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkxcIjoyNSxcIi4vLi4vdXRpbHNcIjozMCxcIi4vdHJhbnNmb3JtRGF0YVwiOjE4fV0sMTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgcmV0dXJuIGVycm9yO1xufTtcblxufSx7fV0sMTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICAvLyBOb3RlOiBzdGF0dXMgaXMgbm90IGV4cG9zZWQgYnkgWERvbWFpblJlcXVlc3RcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuXG59LHtcIi4vY3JlYXRlRXJyb3JcIjoxNH1dLDE4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcblxufSx7XCIuLy4uL3V0aWxzXCI6MzB9XSwxOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkgeyAvKiBJZ25vcmUgKi8gfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuXG59LHtcIi4vYWRhcHRlcnMvaHR0cFwiOjcsXCIuL2FkYXB0ZXJzL3hoclwiOjcsXCIuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZVwiOjI3LFwiLi91dGlsc1wiOjMwLFwiX3Byb2Nlc3NcIjozMn1dLDIwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcblxufSx7fV0sMjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyBidG9hIHBvbHlmaWxsIGZvciBJRTwxMCBjb3VydGVzeSBodHRwczovL2dpdGh1Yi5jb20vZGF2aWRjaGFtYmVycy9CYXNlNjQuanNcblxudmFyIGNoYXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89JztcblxuZnVuY3Rpb24gRSgpIHtcbiAgdGhpcy5tZXNzYWdlID0gJ1N0cmluZyBjb250YWlucyBhbiBpbnZhbGlkIGNoYXJhY3Rlcic7XG59XG5FLnByb3RvdHlwZSA9IG5ldyBFcnJvcjtcbkUucHJvdG90eXBlLmNvZGUgPSA1O1xuRS5wcm90b3R5cGUubmFtZSA9ICdJbnZhbGlkQ2hhcmFjdGVyRXJyb3InO1xuXG5mdW5jdGlvbiBidG9hKGlucHV0KSB7XG4gIHZhciBzdHIgPSBTdHJpbmcoaW5wdXQpO1xuICB2YXIgb3V0cHV0ID0gJyc7XG4gIGZvciAoXG4gICAgLy8gaW5pdGlhbGl6ZSByZXN1bHQgYW5kIGNvdW50ZXJcbiAgICB2YXIgYmxvY2ssIGNoYXJDb2RlLCBpZHggPSAwLCBtYXAgPSBjaGFycztcbiAgICAvLyBpZiB0aGUgbmV4dCBzdHIgaW5kZXggZG9lcyBub3QgZXhpc3Q6XG4gICAgLy8gICBjaGFuZ2UgdGhlIG1hcHBpbmcgdGFibGUgdG8gXCI9XCJcbiAgICAvLyAgIGNoZWNrIGlmIGQgaGFzIG5vIGZyYWN0aW9uYWwgZGlnaXRzXG4gICAgc3RyLmNoYXJBdChpZHggfCAwKSB8fCAobWFwID0gJz0nLCBpZHggJSAxKTtcbiAgICAvLyBcIjggLSBpZHggJSAxICogOFwiIGdlbmVyYXRlcyB0aGUgc2VxdWVuY2UgMiwgNCwgNiwgOFxuICAgIG91dHB1dCArPSBtYXAuY2hhckF0KDYzICYgYmxvY2sgPj4gOCAtIGlkeCAlIDEgKiA4KVxuICApIHtcbiAgICBjaGFyQ29kZSA9IHN0ci5jaGFyQ29kZUF0KGlkeCArPSAzIC8gNCk7XG4gICAgaWYgKGNoYXJDb2RlID4gMHhGRikge1xuICAgICAgdGhyb3cgbmV3IEUoKTtcbiAgICB9XG4gICAgYmxvY2sgPSBibG9jayA8PCA4IHwgY2hhckNvZGU7XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBidG9hO1xuXG59LHt9XSwyMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuXG59LHtcIi4vLi4vdXRpbHNcIjozMH1dLDIzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcblxufSx7fV0sMjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICB9LFxuXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgIH1cbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfSkoKVxuKTtcblxufSx7XCIuLy4uL3V0aWxzXCI6MzB9XSwyNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcblxufSx7fV0sMjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgIH1cblxuICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfSkoKVxuKTtcblxufSx7XCIuLy4uL3V0aWxzXCI6MzB9XSwyNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG5cbn0se1wiLi4vdXRpbHNcIjozMH1dLDI4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG5cbn0se1wiLi8uLi91dGlsc1wiOjMwfV0sMjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuXG59LHt9XSwzMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBpc0J1ZmZlciA9IHJlcXVpcmUoJ2lzLWJ1ZmZlcicpO1xuXG4vKmdsb2JhbCB0b1N0cmluZzp0cnVlKi9cblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcpICYmICh2YWwgaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKHZhbC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL1xccyokLywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltXG59O1xuXG59LHtcIi4vaGVscGVycy9iaW5kXCI6MjAsXCJpcy1idWZmZXJcIjozMX1dLDMxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qIVxuICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlclxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxuLy8gVGhlIF9pc0J1ZmZlciBjaGVjayBpcyBmb3IgU2FmYXJpIDUtNyBzdXBwb3J0LCBiZWNhdXNlIGl0J3MgbWlzc2luZ1xuLy8gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiAoaXNCdWZmZXIob2JqKSB8fCBpc1Nsb3dCdWZmZXIob2JqKSB8fCAhIW9iai5faXNCdWZmZXIpXG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuICEhb2JqLmNvbnN0cnVjdG9yICYmIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cblxuLy8gRm9yIE5vZGUgdjAuMTAgc3VwcG9ydC4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseS5cbmZ1bmN0aW9uIGlzU2xvd0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqLnJlYWRGbG9hdExFID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgaXNCdWZmZXIob2JqLnNsaWNlKDAsIDApKVxufVxuXG59LHt9XSwzMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuXG59LHt9XSwzMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciByZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xudmFyIHBlcmNlbnRUd2VudGllcyA9IC8lMjAvZztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgJ2RlZmF1bHQnOiAnUkZDMzk4NicsXG4gICAgZm9ybWF0dGVyczoge1xuICAgICAgICBSRkMxNzM4OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiByZXBsYWNlLmNhbGwodmFsdWUsIHBlcmNlbnRUd2VudGllcywgJysnKTtcbiAgICAgICAgfSxcbiAgICAgICAgUkZDMzk4NjogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIFJGQzE3Mzg6ICdSRkMxNzM4JyxcbiAgICBSRkMzOTg2OiAnUkZDMzk4Nidcbn07XG5cbn0se31dLDM0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIHN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vc3RyaW5naWZ5Jyk7XG52YXIgcGFyc2UgPSByZXF1aXJlKCcuL3BhcnNlJyk7XG52YXIgZm9ybWF0cyA9IHJlcXVpcmUoJy4vZm9ybWF0cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBmb3JtYXRzOiBmb3JtYXRzLFxuICAgIHBhcnNlOiBwYXJzZSxcbiAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeVxufTtcblxufSx7XCIuL2Zvcm1hdHNcIjozMyxcIi4vcGFyc2VcIjozNSxcIi4vc3RyaW5naWZ5XCI6MzZ9XSwzNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgICBhbGxvd0RvdHM6IGZhbHNlLFxuICAgIGFsbG93UHJvdG90eXBlczogZmFsc2UsXG4gICAgYXJyYXlMaW1pdDogMjAsXG4gICAgZGVjb2RlcjogdXRpbHMuZGVjb2RlLFxuICAgIGRlbGltaXRlcjogJyYnLFxuICAgIGRlcHRoOiA1LFxuICAgIHBhcmFtZXRlckxpbWl0OiAxMDAwLFxuICAgIHBsYWluT2JqZWN0czogZmFsc2UsXG4gICAgc3RyaWN0TnVsbEhhbmRsaW5nOiBmYWxzZVxufTtcblxudmFyIHBhcnNlVmFsdWVzID0gZnVuY3Rpb24gcGFyc2VRdWVyeVN0cmluZ1ZhbHVlcyhzdHIsIG9wdGlvbnMpIHtcbiAgICB2YXIgb2JqID0ge307XG4gICAgdmFyIGNsZWFuU3RyID0gb3B0aW9ucy5pZ25vcmVRdWVyeVByZWZpeCA/IHN0ci5yZXBsYWNlKC9eXFw/LywgJycpIDogc3RyO1xuICAgIHZhciBsaW1pdCA9IG9wdGlvbnMucGFyYW1ldGVyTGltaXQgPT09IEluZmluaXR5ID8gdW5kZWZpbmVkIDogb3B0aW9ucy5wYXJhbWV0ZXJMaW1pdDtcbiAgICB2YXIgcGFydHMgPSBjbGVhblN0ci5zcGxpdChvcHRpb25zLmRlbGltaXRlciwgbGltaXQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgcGFydCA9IHBhcnRzW2ldO1xuXG4gICAgICAgIHZhciBicmFja2V0RXF1YWxzUG9zID0gcGFydC5pbmRleE9mKCddPScpO1xuICAgICAgICB2YXIgcG9zID0gYnJhY2tldEVxdWFsc1BvcyA9PT0gLTEgPyBwYXJ0LmluZGV4T2YoJz0nKSA6IGJyYWNrZXRFcXVhbHNQb3MgKyAxO1xuXG4gICAgICAgIHZhciBrZXksIHZhbDtcbiAgICAgICAgaWYgKHBvcyA9PT0gLTEpIHtcbiAgICAgICAgICAgIGtleSA9IG9wdGlvbnMuZGVjb2RlcihwYXJ0LCBkZWZhdWx0cy5kZWNvZGVyKTtcbiAgICAgICAgICAgIHZhbCA9IG9wdGlvbnMuc3RyaWN0TnVsbEhhbmRsaW5nID8gbnVsbCA6ICcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAga2V5ID0gb3B0aW9ucy5kZWNvZGVyKHBhcnQuc2xpY2UoMCwgcG9zKSwgZGVmYXVsdHMuZGVjb2Rlcik7XG4gICAgICAgICAgICB2YWwgPSBvcHRpb25zLmRlY29kZXIocGFydC5zbGljZShwb3MgKyAxKSwgZGVmYXVsdHMuZGVjb2Rlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhcy5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICAgICAgb2JqW2tleV0gPSBbXS5jb25jYXQob2JqW2tleV0pLmNvbmNhdCh2YWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JqW2tleV0gPSB2YWw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xufTtcblxudmFyIHBhcnNlT2JqZWN0ID0gZnVuY3Rpb24gKGNoYWluLCB2YWwsIG9wdGlvbnMpIHtcbiAgICB2YXIgbGVhZiA9IHZhbDtcblxuICAgIGZvciAodmFyIGkgPSBjaGFpbi5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgb2JqO1xuICAgICAgICB2YXIgcm9vdCA9IGNoYWluW2ldO1xuXG4gICAgICAgIGlmIChyb290ID09PSAnW10nKSB7XG4gICAgICAgICAgICBvYmogPSBbXTtcbiAgICAgICAgICAgIG9iaiA9IG9iai5jb25jYXQobGVhZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvYmogPSBvcHRpb25zLnBsYWluT2JqZWN0cyA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTtcbiAgICAgICAgICAgIHZhciBjbGVhblJvb3QgPSByb290LmNoYXJBdCgwKSA9PT0gJ1snICYmIHJvb3QuY2hhckF0KHJvb3QubGVuZ3RoIC0gMSkgPT09ICddJyA/IHJvb3Quc2xpY2UoMSwgLTEpIDogcm9vdDtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KGNsZWFuUm9vdCwgMTApO1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICFpc05hTihpbmRleClcbiAgICAgICAgICAgICAgICAmJiByb290ICE9PSBjbGVhblJvb3RcbiAgICAgICAgICAgICAgICAmJiBTdHJpbmcoaW5kZXgpID09PSBjbGVhblJvb3RcbiAgICAgICAgICAgICAgICAmJiBpbmRleCA+PSAwXG4gICAgICAgICAgICAgICAgJiYgKG9wdGlvbnMucGFyc2VBcnJheXMgJiYgaW5kZXggPD0gb3B0aW9ucy5hcnJheUxpbWl0KVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgb2JqID0gW107XG4gICAgICAgICAgICAgICAgb2JqW2luZGV4XSA9IGxlYWY7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9ialtjbGVhblJvb3RdID0gbGVhZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxlYWYgPSBvYmo7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxlYWY7XG59O1xuXG52YXIgcGFyc2VLZXlzID0gZnVuY3Rpb24gcGFyc2VRdWVyeVN0cmluZ0tleXMoZ2l2ZW5LZXksIHZhbCwgb3B0aW9ucykge1xuICAgIGlmICghZ2l2ZW5LZXkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFRyYW5zZm9ybSBkb3Qgbm90YXRpb24gdG8gYnJhY2tldCBub3RhdGlvblxuICAgIHZhciBrZXkgPSBvcHRpb25zLmFsbG93RG90cyA/IGdpdmVuS2V5LnJlcGxhY2UoL1xcLihbXi5bXSspL2csICdbJDFdJykgOiBnaXZlbktleTtcblxuICAgIC8vIFRoZSByZWdleCBjaHVua3NcblxuICAgIHZhciBicmFja2V0cyA9IC8oXFxbW15bXFxdXSpdKS87XG4gICAgdmFyIGNoaWxkID0gLyhcXFtbXltcXF1dKl0pL2c7XG5cbiAgICAvLyBHZXQgdGhlIHBhcmVudFxuXG4gICAgdmFyIHNlZ21lbnQgPSBicmFja2V0cy5leGVjKGtleSk7XG4gICAgdmFyIHBhcmVudCA9IHNlZ21lbnQgPyBrZXkuc2xpY2UoMCwgc2VnbWVudC5pbmRleCkgOiBrZXk7XG5cbiAgICAvLyBTdGFzaCB0aGUgcGFyZW50IGlmIGl0IGV4aXN0c1xuXG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIC8vIElmIHdlIGFyZW4ndCB1c2luZyBwbGFpbiBvYmplY3RzLCBvcHRpb25hbGx5IHByZWZpeCBrZXlzXG4gICAgICAgIC8vIHRoYXQgd291bGQgb3ZlcndyaXRlIG9iamVjdCBwcm90b3R5cGUgcHJvcGVydGllc1xuICAgICAgICBpZiAoIW9wdGlvbnMucGxhaW5PYmplY3RzICYmIGhhcy5jYWxsKE9iamVjdC5wcm90b3R5cGUsIHBhcmVudCkpIHtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5hbGxvd1Byb3RvdHlwZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBrZXlzLnB1c2gocGFyZW50KTtcbiAgICB9XG5cbiAgICAvLyBMb29wIHRocm91Z2ggY2hpbGRyZW4gYXBwZW5kaW5nIHRvIHRoZSBhcnJheSB1bnRpbCB3ZSBoaXQgZGVwdGhcblxuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAoKHNlZ21lbnQgPSBjaGlsZC5leGVjKGtleSkpICE9PSBudWxsICYmIGkgPCBvcHRpb25zLmRlcHRoKSB7XG4gICAgICAgIGkgKz0gMTtcbiAgICAgICAgaWYgKCFvcHRpb25zLnBsYWluT2JqZWN0cyAmJiBoYXMuY2FsbChPYmplY3QucHJvdG90eXBlLCBzZWdtZW50WzFdLnNsaWNlKDEsIC0xKSkpIHtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5hbGxvd1Byb3RvdHlwZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAga2V5cy5wdXNoKHNlZ21lbnRbMV0pO1xuICAgIH1cblxuICAgIC8vIElmIHRoZXJlJ3MgYSByZW1haW5kZXIsIGp1c3QgYWRkIHdoYXRldmVyIGlzIGxlZnRcblxuICAgIGlmIChzZWdtZW50KSB7XG4gICAgICAgIGtleXMucHVzaCgnWycgKyBrZXkuc2xpY2Uoc2VnbWVudC5pbmRleCkgKyAnXScpO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJzZU9iamVjdChrZXlzLCB2YWwsIG9wdGlvbnMpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyLCBvcHRzKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzID8gdXRpbHMuYXNzaWduKHt9LCBvcHRzKSA6IHt9O1xuXG4gICAgaWYgKG9wdGlvbnMuZGVjb2RlciAhPT0gbnVsbCAmJiBvcHRpb25zLmRlY29kZXIgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb3B0aW9ucy5kZWNvZGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0RlY29kZXIgaGFzIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgb3B0aW9ucy5pZ25vcmVRdWVyeVByZWZpeCA9IG9wdGlvbnMuaWdub3JlUXVlcnlQcmVmaXggPT09IHRydWU7XG4gICAgb3B0aW9ucy5kZWxpbWl0ZXIgPSB0eXBlb2Ygb3B0aW9ucy5kZWxpbWl0ZXIgPT09ICdzdHJpbmcnIHx8IHV0aWxzLmlzUmVnRXhwKG9wdGlvbnMuZGVsaW1pdGVyKSA/IG9wdGlvbnMuZGVsaW1pdGVyIDogZGVmYXVsdHMuZGVsaW1pdGVyO1xuICAgIG9wdGlvbnMuZGVwdGggPSB0eXBlb2Ygb3B0aW9ucy5kZXB0aCA9PT0gJ251bWJlcicgPyBvcHRpb25zLmRlcHRoIDogZGVmYXVsdHMuZGVwdGg7XG4gICAgb3B0aW9ucy5hcnJheUxpbWl0ID0gdHlwZW9mIG9wdGlvbnMuYXJyYXlMaW1pdCA9PT0gJ251bWJlcicgPyBvcHRpb25zLmFycmF5TGltaXQgOiBkZWZhdWx0cy5hcnJheUxpbWl0O1xuICAgIG9wdGlvbnMucGFyc2VBcnJheXMgPSBvcHRpb25zLnBhcnNlQXJyYXlzICE9PSBmYWxzZTtcbiAgICBvcHRpb25zLmRlY29kZXIgPSB0eXBlb2Ygb3B0aW9ucy5kZWNvZGVyID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy5kZWNvZGVyIDogZGVmYXVsdHMuZGVjb2RlcjtcbiAgICBvcHRpb25zLmFsbG93RG90cyA9IHR5cGVvZiBvcHRpb25zLmFsbG93RG90cyA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5hbGxvd0RvdHMgOiBkZWZhdWx0cy5hbGxvd0RvdHM7XG4gICAgb3B0aW9ucy5wbGFpbk9iamVjdHMgPSB0eXBlb2Ygb3B0aW9ucy5wbGFpbk9iamVjdHMgPT09ICdib29sZWFuJyA/IG9wdGlvbnMucGxhaW5PYmplY3RzIDogZGVmYXVsdHMucGxhaW5PYmplY3RzO1xuICAgIG9wdGlvbnMuYWxsb3dQcm90b3R5cGVzID0gdHlwZW9mIG9wdGlvbnMuYWxsb3dQcm90b3R5cGVzID09PSAnYm9vbGVhbicgPyBvcHRpb25zLmFsbG93UHJvdG90eXBlcyA6IGRlZmF1bHRzLmFsbG93UHJvdG90eXBlcztcbiAgICBvcHRpb25zLnBhcmFtZXRlckxpbWl0ID0gdHlwZW9mIG9wdGlvbnMucGFyYW1ldGVyTGltaXQgPT09ICdudW1iZXInID8gb3B0aW9ucy5wYXJhbWV0ZXJMaW1pdCA6IGRlZmF1bHRzLnBhcmFtZXRlckxpbWl0O1xuICAgIG9wdGlvbnMuc3RyaWN0TnVsbEhhbmRsaW5nID0gdHlwZW9mIG9wdGlvbnMuc3RyaWN0TnVsbEhhbmRsaW5nID09PSAnYm9vbGVhbicgPyBvcHRpb25zLnN0cmljdE51bGxIYW5kbGluZyA6IGRlZmF1bHRzLnN0cmljdE51bGxIYW5kbGluZztcblxuICAgIGlmIChzdHIgPT09ICcnIHx8IHN0ciA9PT0gbnVsbCB8fCB0eXBlb2Ygc3RyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5wbGFpbk9iamVjdHMgPyBPYmplY3QuY3JlYXRlKG51bGwpIDoge307XG4gICAgfVxuXG4gICAgdmFyIHRlbXBPYmogPSB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyA/IHBhcnNlVmFsdWVzKHN0ciwgb3B0aW9ucykgOiBzdHI7XG4gICAgdmFyIG9iaiA9IG9wdGlvbnMucGxhaW5PYmplY3RzID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IHt9O1xuXG4gICAgLy8gSXRlcmF0ZSBvdmVyIHRoZSBrZXlzIGFuZCBzZXR1cCB0aGUgbmV3IG9iamVjdFxuXG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh0ZW1wT2JqKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgIHZhciBuZXdPYmogPSBwYXJzZUtleXMoa2V5LCB0ZW1wT2JqW2tleV0sIG9wdGlvbnMpO1xuICAgICAgICBvYmogPSB1dGlscy5tZXJnZShvYmosIG5ld09iaiwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHV0aWxzLmNvbXBhY3Qob2JqKTtcbn07XG5cbn0se1wiLi91dGlsc1wiOjM3fV0sMzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgZm9ybWF0cyA9IHJlcXVpcmUoJy4vZm9ybWF0cycpO1xuXG52YXIgYXJyYXlQcmVmaXhHZW5lcmF0b3JzID0ge1xuICAgIGJyYWNrZXRzOiBmdW5jdGlvbiBicmFja2V0cyhwcmVmaXgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBmdW5jLW5hbWUtbWF0Y2hpbmdcbiAgICAgICAgcmV0dXJuIHByZWZpeCArICdbXSc7XG4gICAgfSxcbiAgICBpbmRpY2VzOiBmdW5jdGlvbiBpbmRpY2VzKHByZWZpeCwga2V5KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZnVuYy1uYW1lLW1hdGNoaW5nXG4gICAgICAgIHJldHVybiBwcmVmaXggKyAnWycgKyBrZXkgKyAnXSc7XG4gICAgfSxcbiAgICByZXBlYXQ6IGZ1bmN0aW9uIHJlcGVhdChwcmVmaXgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBmdW5jLW5hbWUtbWF0Y2hpbmdcbiAgICAgICAgcmV0dXJuIHByZWZpeDtcbiAgICB9XG59O1xuXG52YXIgdG9JU08gPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZztcblxudmFyIGRlZmF1bHRzID0ge1xuICAgIGRlbGltaXRlcjogJyYnLFxuICAgIGVuY29kZTogdHJ1ZSxcbiAgICBlbmNvZGVyOiB1dGlscy5lbmNvZGUsXG4gICAgZW5jb2RlVmFsdWVzT25seTogZmFsc2UsXG4gICAgc2VyaWFsaXplRGF0ZTogZnVuY3Rpb24gc2VyaWFsaXplRGF0ZShkYXRlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZnVuYy1uYW1lLW1hdGNoaW5nXG4gICAgICAgIHJldHVybiB0b0lTTy5jYWxsKGRhdGUpO1xuICAgIH0sXG4gICAgc2tpcE51bGxzOiBmYWxzZSxcbiAgICBzdHJpY3ROdWxsSGFuZGxpbmc6IGZhbHNlXG59O1xuXG52YXIgc3RyaW5naWZ5ID0gZnVuY3Rpb24gc3RyaW5naWZ5KCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZ1bmMtbmFtZS1tYXRjaGluZ1xuICAgIG9iamVjdCxcbiAgICBwcmVmaXgsXG4gICAgZ2VuZXJhdGVBcnJheVByZWZpeCxcbiAgICBzdHJpY3ROdWxsSGFuZGxpbmcsXG4gICAgc2tpcE51bGxzLFxuICAgIGVuY29kZXIsXG4gICAgZmlsdGVyLFxuICAgIHNvcnQsXG4gICAgYWxsb3dEb3RzLFxuICAgIHNlcmlhbGl6ZURhdGUsXG4gICAgZm9ybWF0dGVyLFxuICAgIGVuY29kZVZhbHVlc09ubHlcbikge1xuICAgIHZhciBvYmogPSBvYmplY3Q7XG4gICAgaWYgKHR5cGVvZiBmaWx0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgb2JqID0gZmlsdGVyKHByZWZpeCwgb2JqKTtcbiAgICB9IGVsc2UgaWYgKG9iaiBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgb2JqID0gc2VyaWFsaXplRGF0ZShvYmopO1xuICAgIH0gZWxzZSBpZiAob2JqID09PSBudWxsKSB7XG4gICAgICAgIGlmIChzdHJpY3ROdWxsSGFuZGxpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBlbmNvZGVyICYmICFlbmNvZGVWYWx1ZXNPbmx5ID8gZW5jb2RlcihwcmVmaXgsIGRlZmF1bHRzLmVuY29kZXIpIDogcHJlZml4O1xuICAgICAgICB9XG5cbiAgICAgICAgb2JqID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvYmogPT09ICdudW1iZXInIHx8IHR5cGVvZiBvYmogPT09ICdib29sZWFuJyB8fCB1dGlscy5pc0J1ZmZlcihvYmopKSB7XG4gICAgICAgIGlmIChlbmNvZGVyKSB7XG4gICAgICAgICAgICB2YXIga2V5VmFsdWUgPSBlbmNvZGVWYWx1ZXNPbmx5ID8gcHJlZml4IDogZW5jb2RlcihwcmVmaXgsIGRlZmF1bHRzLmVuY29kZXIpO1xuICAgICAgICAgICAgcmV0dXJuIFtmb3JtYXR0ZXIoa2V5VmFsdWUpICsgJz0nICsgZm9ybWF0dGVyKGVuY29kZXIob2JqLCBkZWZhdWx0cy5lbmNvZGVyKSldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbZm9ybWF0dGVyKHByZWZpeCkgKyAnPScgKyBmb3JtYXR0ZXIoU3RyaW5nKG9iaikpXTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWVzID0gW107XG5cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG5cbiAgICB2YXIgb2JqS2V5cztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmaWx0ZXIpKSB7XG4gICAgICAgIG9iaktleXMgPSBmaWx0ZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgICAgICBvYmpLZXlzID0gc29ydCA/IGtleXMuc29ydChzb3J0KSA6IGtleXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmpLZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBrZXkgPSBvYmpLZXlzW2ldO1xuXG4gICAgICAgIGlmIChza2lwTnVsbHMgJiYgb2JqW2tleV0gPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgICAgICAgdmFsdWVzID0gdmFsdWVzLmNvbmNhdChzdHJpbmdpZnkoXG4gICAgICAgICAgICAgICAgb2JqW2tleV0sXG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVBcnJheVByZWZpeChwcmVmaXgsIGtleSksXG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVBcnJheVByZWZpeCxcbiAgICAgICAgICAgICAgICBzdHJpY3ROdWxsSGFuZGxpbmcsXG4gICAgICAgICAgICAgICAgc2tpcE51bGxzLFxuICAgICAgICAgICAgICAgIGVuY29kZXIsXG4gICAgICAgICAgICAgICAgZmlsdGVyLFxuICAgICAgICAgICAgICAgIHNvcnQsXG4gICAgICAgICAgICAgICAgYWxsb3dEb3RzLFxuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZURhdGUsXG4gICAgICAgICAgICAgICAgZm9ybWF0dGVyLFxuICAgICAgICAgICAgICAgIGVuY29kZVZhbHVlc09ubHlcbiAgICAgICAgICAgICkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWVzID0gdmFsdWVzLmNvbmNhdChzdHJpbmdpZnkoXG4gICAgICAgICAgICAgICAgb2JqW2tleV0sXG4gICAgICAgICAgICAgICAgcHJlZml4ICsgKGFsbG93RG90cyA/ICcuJyArIGtleSA6ICdbJyArIGtleSArICddJyksXG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVBcnJheVByZWZpeCxcbiAgICAgICAgICAgICAgICBzdHJpY3ROdWxsSGFuZGxpbmcsXG4gICAgICAgICAgICAgICAgc2tpcE51bGxzLFxuICAgICAgICAgICAgICAgIGVuY29kZXIsXG4gICAgICAgICAgICAgICAgZmlsdGVyLFxuICAgICAgICAgICAgICAgIHNvcnQsXG4gICAgICAgICAgICAgICAgYWxsb3dEb3RzLFxuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZURhdGUsXG4gICAgICAgICAgICAgICAgZm9ybWF0dGVyLFxuICAgICAgICAgICAgICAgIGVuY29kZVZhbHVlc09ubHlcbiAgICAgICAgICAgICkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlcztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgb3B0cykge1xuICAgIHZhciBvYmogPSBvYmplY3Q7XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzID8gdXRpbHMuYXNzaWduKHt9LCBvcHRzKSA6IHt9O1xuXG4gICAgaWYgKG9wdGlvbnMuZW5jb2RlciAhPT0gbnVsbCAmJiBvcHRpb25zLmVuY29kZXIgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb3B0aW9ucy5lbmNvZGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0VuY29kZXIgaGFzIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgdmFyIGRlbGltaXRlciA9IHR5cGVvZiBvcHRpb25zLmRlbGltaXRlciA9PT0gJ3VuZGVmaW5lZCcgPyBkZWZhdWx0cy5kZWxpbWl0ZXIgOiBvcHRpb25zLmRlbGltaXRlcjtcbiAgICB2YXIgc3RyaWN0TnVsbEhhbmRsaW5nID0gdHlwZW9mIG9wdGlvbnMuc3RyaWN0TnVsbEhhbmRsaW5nID09PSAnYm9vbGVhbicgPyBvcHRpb25zLnN0cmljdE51bGxIYW5kbGluZyA6IGRlZmF1bHRzLnN0cmljdE51bGxIYW5kbGluZztcbiAgICB2YXIgc2tpcE51bGxzID0gdHlwZW9mIG9wdGlvbnMuc2tpcE51bGxzID09PSAnYm9vbGVhbicgPyBvcHRpb25zLnNraXBOdWxscyA6IGRlZmF1bHRzLnNraXBOdWxscztcbiAgICB2YXIgZW5jb2RlID0gdHlwZW9mIG9wdGlvbnMuZW5jb2RlID09PSAnYm9vbGVhbicgPyBvcHRpb25zLmVuY29kZSA6IGRlZmF1bHRzLmVuY29kZTtcbiAgICB2YXIgZW5jb2RlciA9IHR5cGVvZiBvcHRpb25zLmVuY29kZXIgPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLmVuY29kZXIgOiBkZWZhdWx0cy5lbmNvZGVyO1xuICAgIHZhciBzb3J0ID0gdHlwZW9mIG9wdGlvbnMuc29ydCA9PT0gJ2Z1bmN0aW9uJyA/IG9wdGlvbnMuc29ydCA6IG51bGw7XG4gICAgdmFyIGFsbG93RG90cyA9IHR5cGVvZiBvcHRpb25zLmFsbG93RG90cyA9PT0gJ3VuZGVmaW5lZCcgPyBmYWxzZSA6IG9wdGlvbnMuYWxsb3dEb3RzO1xuICAgIHZhciBzZXJpYWxpemVEYXRlID0gdHlwZW9mIG9wdGlvbnMuc2VyaWFsaXplRGF0ZSA9PT0gJ2Z1bmN0aW9uJyA/IG9wdGlvbnMuc2VyaWFsaXplRGF0ZSA6IGRlZmF1bHRzLnNlcmlhbGl6ZURhdGU7XG4gICAgdmFyIGVuY29kZVZhbHVlc09ubHkgPSB0eXBlb2Ygb3B0aW9ucy5lbmNvZGVWYWx1ZXNPbmx5ID09PSAnYm9vbGVhbicgPyBvcHRpb25zLmVuY29kZVZhbHVlc09ubHkgOiBkZWZhdWx0cy5lbmNvZGVWYWx1ZXNPbmx5O1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5mb3JtYXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG9wdGlvbnMuZm9ybWF0ID0gZm9ybWF0c1snZGVmYXVsdCddO1xuICAgIH0gZWxzZSBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChmb3JtYXRzLmZvcm1hdHRlcnMsIG9wdGlvbnMuZm9ybWF0KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGZvcm1hdCBvcHRpb24gcHJvdmlkZWQuJyk7XG4gICAgfVxuICAgIHZhciBmb3JtYXR0ZXIgPSBmb3JtYXRzLmZvcm1hdHRlcnNbb3B0aW9ucy5mb3JtYXRdO1xuICAgIHZhciBvYmpLZXlzO1xuICAgIHZhciBmaWx0ZXI7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmlsdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGZpbHRlciA9IG9wdGlvbnMuZmlsdGVyO1xuICAgICAgICBvYmogPSBmaWx0ZXIoJycsIG9iaik7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbnMuZmlsdGVyKSkge1xuICAgICAgICBmaWx0ZXIgPSBvcHRpb25zLmZpbHRlcjtcbiAgICAgICAgb2JqS2V5cyA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IFtdO1xuXG4gICAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgdmFyIGFycmF5Rm9ybWF0O1xuICAgIGlmIChvcHRpb25zLmFycmF5Rm9ybWF0IGluIGFycmF5UHJlZml4R2VuZXJhdG9ycykge1xuICAgICAgICBhcnJheUZvcm1hdCA9IG9wdGlvbnMuYXJyYXlGb3JtYXQ7XG4gICAgfSBlbHNlIGlmICgnaW5kaWNlcycgaW4gb3B0aW9ucykge1xuICAgICAgICBhcnJheUZvcm1hdCA9IG9wdGlvbnMuaW5kaWNlcyA/ICdpbmRpY2VzJyA6ICdyZXBlYXQnO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGFycmF5Rm9ybWF0ID0gJ2luZGljZXMnO1xuICAgIH1cblxuICAgIHZhciBnZW5lcmF0ZUFycmF5UHJlZml4ID0gYXJyYXlQcmVmaXhHZW5lcmF0b3JzW2FycmF5Rm9ybWF0XTtcblxuICAgIGlmICghb2JqS2V5cykge1xuICAgICAgICBvYmpLZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICB9XG5cbiAgICBpZiAoc29ydCkge1xuICAgICAgICBvYmpLZXlzLnNvcnQoc29ydCk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmpLZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBrZXkgPSBvYmpLZXlzW2ldO1xuXG4gICAgICAgIGlmIChza2lwTnVsbHMgJiYgb2JqW2tleV0gPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAga2V5cyA9IGtleXMuY29uY2F0KHN0cmluZ2lmeShcbiAgICAgICAgICAgIG9ialtrZXldLFxuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgZ2VuZXJhdGVBcnJheVByZWZpeCxcbiAgICAgICAgICAgIHN0cmljdE51bGxIYW5kbGluZyxcbiAgICAgICAgICAgIHNraXBOdWxscyxcbiAgICAgICAgICAgIGVuY29kZSA/IGVuY29kZXIgOiBudWxsLFxuICAgICAgICAgICAgZmlsdGVyLFxuICAgICAgICAgICAgc29ydCxcbiAgICAgICAgICAgIGFsbG93RG90cyxcbiAgICAgICAgICAgIHNlcmlhbGl6ZURhdGUsXG4gICAgICAgICAgICBmb3JtYXR0ZXIsXG4gICAgICAgICAgICBlbmNvZGVWYWx1ZXNPbmx5XG4gICAgICAgICkpO1xuICAgIH1cblxuICAgIHZhciBqb2luZWQgPSBrZXlzLmpvaW4oZGVsaW1pdGVyKTtcbiAgICB2YXIgcHJlZml4ID0gb3B0aW9ucy5hZGRRdWVyeVByZWZpeCA9PT0gdHJ1ZSA/ICc/JyA6ICcnO1xuXG4gICAgcmV0dXJuIGpvaW5lZC5sZW5ndGggPiAwID8gcHJlZml4ICsgam9pbmVkIDogJyc7XG59O1xuXG59LHtcIi4vZm9ybWF0c1wiOjMzLFwiLi91dGlsc1wiOjM3fV0sMzc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGhleFRhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gICAgICAgIGFycmF5LnB1c2goJyUnICsgKChpIDwgMTYgPyAnMCcgOiAnJykgKyBpLnRvU3RyaW5nKDE2KSkudG9VcHBlckNhc2UoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5O1xufSgpKTtcblxudmFyIGNvbXBhY3RRdWV1ZSA9IGZ1bmN0aW9uIGNvbXBhY3RRdWV1ZShxdWV1ZSkge1xuICAgIHZhciBvYmo7XG5cbiAgICB3aGlsZSAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHZhciBpdGVtID0gcXVldWUucG9wKCk7XG4gICAgICAgIG9iaiA9IGl0ZW0ub2JqW2l0ZW0ucHJvcF07XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgICAgICAgdmFyIGNvbXBhY3RlZCA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG9iai5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqW2pdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICBjb21wYWN0ZWQucHVzaChvYmpbal0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaXRlbS5vYmpbaXRlbS5wcm9wXSA9IGNvbXBhY3RlZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG59O1xuXG5leHBvcnRzLmFycmF5VG9PYmplY3QgPSBmdW5jdGlvbiBhcnJheVRvT2JqZWN0KHNvdXJjZSwgb3B0aW9ucykge1xuICAgIHZhciBvYmogPSBvcHRpb25zICYmIG9wdGlvbnMucGxhaW5PYmplY3RzID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc291cmNlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc291cmNlW2ldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgb2JqW2ldID0gc291cmNlW2ldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbn07XG5cbmV4cG9ydHMubWVyZ2UgPSBmdW5jdGlvbiBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuICAgIGlmICghc291cmNlKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzb3VyY2UgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkpIHtcbiAgICAgICAgICAgIHRhcmdldC5wdXNoKHNvdXJjZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnBsYWluT2JqZWN0cyB8fCBvcHRpb25zLmFsbG93UHJvdG90eXBlcyB8fCAhaGFzLmNhbGwoT2JqZWN0LnByb3RvdHlwZSwgc291cmNlKSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFtzb3VyY2VdID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBbdGFyZ2V0LCBzb3VyY2VdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHRhcmdldCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIFt0YXJnZXRdLmNvbmNhdChzb3VyY2UpO1xuICAgIH1cblxuICAgIHZhciBtZXJnZVRhcmdldCA9IHRhcmdldDtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmICFBcnJheS5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgICAgbWVyZ2VUYXJnZXQgPSBleHBvcnRzLmFycmF5VG9PYmplY3QodGFyZ2V0LCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIEFycmF5LmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgICBzb3VyY2UuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaSkge1xuICAgICAgICAgICAgaWYgKGhhcy5jYWxsKHRhcmdldCwgaSkpIHtcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0W2ldICYmIHR5cGVvZiB0YXJnZXRbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtpXSA9IGV4cG9ydHMubWVyZ2UodGFyZ2V0W2ldLCBpdGVtLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhcmdldFtpXSA9IGl0ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhzb3VyY2UpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gc291cmNlW2tleV07XG5cbiAgICAgICAgaWYgKGhhcy5jYWxsKGFjYywga2V5KSkge1xuICAgICAgICAgICAgYWNjW2tleV0gPSBleHBvcnRzLm1lcmdlKGFjY1trZXldLCB2YWx1ZSwgb3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhY2Nba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgbWVyZ2VUYXJnZXQpO1xufTtcblxuZXhwb3J0cy5hc3NpZ24gPSBmdW5jdGlvbiBhc3NpZ25TaW5nbGVTb3VyY2UodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoc291cmNlKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgICAgIGFjY1trZXldID0gc291cmNlW2tleV07XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgdGFyZ2V0KTtcbn07XG5cbmV4cG9ydHMuZGVjb2RlID0gZnVuY3Rpb24gKHN0cikge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc3RyLnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxufTtcblxuZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoc3RyKSB7XG4gICAgLy8gVGhpcyBjb2RlIHdhcyBvcmlnaW5hbGx5IHdyaXR0ZW4gYnkgQnJpYW4gV2hpdGUgKG1zY2RleCkgZm9yIHRoZSBpby5qcyBjb3JlIHF1ZXJ5c3RyaW5nIGxpYnJhcnkuXG4gICAgLy8gSXQgaGFzIGJlZW4gYWRhcHRlZCBoZXJlIGZvciBzdHJpY3RlciBhZGhlcmVuY2UgdG8gUkZDIDM5ODZcbiAgICBpZiAoc3RyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH1cblxuICAgIHZhciBzdHJpbmcgPSB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyA/IHN0ciA6IFN0cmluZyhzdHIpO1xuXG4gICAgdmFyIG91dCA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBjID0gc3RyaW5nLmNoYXJDb2RlQXQoaSk7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgYyA9PT0gMHgyRCAvLyAtXG4gICAgICAgICAgICB8fCBjID09PSAweDJFIC8vIC5cbiAgICAgICAgICAgIHx8IGMgPT09IDB4NUYgLy8gX1xuICAgICAgICAgICAgfHwgYyA9PT0gMHg3RSAvLyB+XG4gICAgICAgICAgICB8fCAoYyA+PSAweDMwICYmIGMgPD0gMHgzOSkgLy8gMC05XG4gICAgICAgICAgICB8fCAoYyA+PSAweDQxICYmIGMgPD0gMHg1QSkgLy8gYS16XG4gICAgICAgICAgICB8fCAoYyA+PSAweDYxICYmIGMgPD0gMHg3QSkgLy8gQS1aXG4gICAgICAgICkge1xuICAgICAgICAgICAgb3V0ICs9IHN0cmluZy5jaGFyQXQoaSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjIDwgMHg4MCkge1xuICAgICAgICAgICAgb3V0ID0gb3V0ICsgaGV4VGFibGVbY107XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjIDwgMHg4MDApIHtcbiAgICAgICAgICAgIG91dCA9IG91dCArIChoZXhUYWJsZVsweEMwIHwgKGMgPj4gNildICsgaGV4VGFibGVbMHg4MCB8IChjICYgMHgzRildKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGMgPCAweEQ4MDAgfHwgYyA+PSAweEUwMDApIHtcbiAgICAgICAgICAgIG91dCA9IG91dCArIChoZXhUYWJsZVsweEUwIHwgKGMgPj4gMTIpXSArIGhleFRhYmxlWzB4ODAgfCAoKGMgPj4gNikgJiAweDNGKV0gKyBoZXhUYWJsZVsweDgwIHwgKGMgJiAweDNGKV0pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpICs9IDE7XG4gICAgICAgIGMgPSAweDEwMDAwICsgKCgoYyAmIDB4M0ZGKSA8PCAxMCkgfCAoc3RyaW5nLmNoYXJDb2RlQXQoaSkgJiAweDNGRikpO1xuICAgICAgICBvdXQgKz0gaGV4VGFibGVbMHhGMCB8IChjID4+IDE4KV1cbiAgICAgICAgICAgICsgaGV4VGFibGVbMHg4MCB8ICgoYyA+PiAxMikgJiAweDNGKV1cbiAgICAgICAgICAgICsgaGV4VGFibGVbMHg4MCB8ICgoYyA+PiA2KSAmIDB4M0YpXVxuICAgICAgICAgICAgKyBoZXhUYWJsZVsweDgwIHwgKGMgJiAweDNGKV07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbn07XG5cbmV4cG9ydHMuY29tcGFjdCA9IGZ1bmN0aW9uIGNvbXBhY3QodmFsdWUpIHtcbiAgICB2YXIgcXVldWUgPSBbeyBvYmo6IHsgbzogdmFsdWUgfSwgcHJvcDogJ28nIH1dO1xuICAgIHZhciByZWZzID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBpdGVtID0gcXVldWVbaV07XG4gICAgICAgIHZhciBvYmogPSBpdGVtLm9ialtpdGVtLnByb3BdO1xuXG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBrZXlzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tqXTtcbiAgICAgICAgICAgIHZhciB2YWwgPSBvYmpba2V5XTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiB2YWwgIT09IG51bGwgJiYgcmVmcy5pbmRleE9mKHZhbCkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcXVldWUucHVzaCh7IG9iajogb2JqLCBwcm9wOiBrZXkgfSk7XG4gICAgICAgICAgICAgICAgcmVmcy5wdXNoKHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY29tcGFjdFF1ZXVlKHF1ZXVlKTtcbn07XG5cbmV4cG9ydHMuaXNSZWdFeHAgPSBmdW5jdGlvbiBpc1JlZ0V4cChvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufTtcblxuZXhwb3J0cy5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyKG9iaikge1xuICAgIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiAhIShvYmouY29uc3RydWN0b3IgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopKTtcbn07XG5cbn0se31dfSx7fSxbNV0pXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5TFhCaFkyc3ZYM0J5Wld4MVpHVXVhbk1pTENKaGMzTmxkSE12YzNKakwycHpMME5zWVhOelpYTXZTR1ZoWkdWeUxtcHpJaXdpWVhOelpYUnpMM055WXk5cWN5OURiR0Z6YzJWekwwaHZiV1ZTZFdKeWFXTnpMbXB6SWl3aVlYTnpaWFJ6TDNOeVl5OXFjeTlEYkdGemMyVnpMMHh2WVdSTmIzSmxMbXB6SWl3aVlYTnpaWFJ6TDNOeVl5OXFjeTlEYkdGemMyVnpMMVJoZUc5dWIyMTVWR0ZpY3k1cWN5SXNJbUZ6YzJWMGN5OXpjbU12YW5NdmJXRnBiaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTloZUdsdmN5OXBibVJsZUM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aGVHbHZjeTlzYVdJdllXUmhjSFJsY25NdmVHaHlMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkY0YVc5ekwyeHBZaTloZUdsdmN5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWhlR2x2Y3k5c2FXSXZZMkZ1WTJWc0wwTmhibU5sYkM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aGVHbHZjeTlzYVdJdlkyRnVZMlZzTDBOaGJtTmxiRlJ2YTJWdUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyRjRhVzl6TDJ4cFlpOWpZVzVqWld3dmFYTkRZVzVqWld3dWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdllYaHBiM012YkdsaUwyTnZjbVV2UVhocGIzTXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZWGhwYjNNdmJHbGlMMk52Y21VdlNXNTBaWEpqWlhCMGIzSk5ZVzVoWjJWeUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyRjRhVzl6TDJ4cFlpOWpiM0psTDJOeVpXRjBaVVZ5Y205eUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyRjRhVzl6TDJ4cFlpOWpiM0psTDJScGMzQmhkR05vVW1WeGRXVnpkQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTloZUdsdmN5OXNhV0l2WTI5eVpTOWxibWhoYm1ObFJYSnliM0l1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WVhocGIzTXZiR2xpTDJOdmNtVXZjMlYwZEd4bExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyRjRhVzl6TDJ4cFlpOWpiM0psTDNSeVlXNXpabTl5YlVSaGRHRXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZWGhwYjNNdmJHbGlMMlJsWm1GMWJIUnpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkY0YVc5ekwyeHBZaTlvWld4d1pYSnpMMkpwYm1RdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdllYaHBiM012YkdsaUwyaGxiSEJsY25NdlluUnZZUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTloZUdsdmN5OXNhV0l2YUdWc2NHVnljeTlpZFdsc1pGVlNUQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTloZUdsdmN5OXNhV0l2YUdWc2NHVnljeTlqYjIxaWFXNWxWVkpNY3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aGVHbHZjeTlzYVdJdmFHVnNjR1Z5Y3k5amIyOXJhV1Z6TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJGNGFXOXpMMnhwWWk5b1pXeHdaWEp6TDJselFXSnpiMngxZEdWVlVrd3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZWGhwYjNNdmJHbGlMMmhsYkhCbGNuTXZhWE5WVWt4VFlXMWxUM0pwWjJsdUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyRjRhVzl6TDJ4cFlpOW9aV3h3WlhKekwyNXZjbTFoYkdsNlpVaGxZV1JsY2s1aGJXVXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZWGhwYjNNdmJHbGlMMmhsYkhCbGNuTXZjR0Z5YzJWSVpXRmtaWEp6TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJGNGFXOXpMMnhwWWk5b1pXeHdaWEp6TDNOd2NtVmhaQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTloZUdsdmN5OXNhV0l2ZFhScGJITXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZhWE10WW5WbVptVnlMMmx1WkdWNExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwzQnliMk5sYzNNdlluSnZkM05sY2k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5eGN5OXNhV0l2Wm05eWJXRjBjeTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTl4Y3k5c2FXSXZhVzVrWlhndWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdmNYTXZiR2xpTDNCaGNuTmxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMM0Z6TDJ4cFlpOXpkSEpwYm1kcFpua3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZjWE12YkdsaUwzVjBhV3h6TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPenM3T3pzN08wbERRVTBzVFR0QlFVTktMR3RDUVVGWkxGTkJRVm9zUlVGQmRVSTdRVUZCUVRzN1FVRkJRVHM3UVVGRGNrSXNVMEZCU3l4TlFVRk1MRWRCUVdNc1UwRkJaRHRCUVVOQkxGTkJRVXNzVDBGQlRDeEhRVUZsTEZWQlFWVXNZVUZCVml4RFFVRjNRaXhsUVVGNFFpeERRVUZtTzBGQlEwRXNVMEZCU3l4SFFVRk1MRWRCUVZjc1ZVRkJWU3hoUVVGV0xFTkJRWGRDTEcxQ1FVRjRRaXhEUVVGWU8wRkJRMEVzVTBGQlN5eFJRVUZNTEVkQlFXZENMRlZCUVZVc1lVRkJWaXhEUVVGM1FpeG5Ra0ZCZUVJc1EwRkJhRUk3TzBGQlJVRXNVMEZCU3l4UFFVRk1MRU5CUVdFc1owSkJRV0lzUTBGQk9FSXNUMEZCT1VJc1JVRkJkVU1zVlVGQlF5eERRVUZFTEVWQlFVODdRVUZETlVNc1dVRkJTeXhUUVVGTU8wRkJRMFFzUzBGR1JEczdRVUZKUVN4VFFVRkxMRkZCUVV3c1EwRkJZeXhuUWtGQlpDeERRVUVyUWl4UFFVRXZRaXhGUVVGM1F5eFZRVUZETEVOQlFVUXNSVUZCVHp0QlFVTTNReXhSUVVGRkxHTkJRVVk3UVVGRFJDeExRVVpFTzBGQlIwUTdPenM3WjBOQlJWYzdRVUZEVml4WFFVRkxMRWRCUVV3c1EwRkJVeXhUUVVGVUxFTkJRVzFDTEUxQlFXNUNMRU5CUVRCQ0xIZENRVUV4UWp0QlFVTkVPenM3T3pzN1FVRkhTQ3hQUVVGUExFOUJRVkFzUjBGQmFVSXNUVUZCYWtJN096czdPenM3U1VOeVFrMHNUeXhIUVVOS0xHbENRVUZaTEZOQlFWb3NSVUZCZFVNN1FVRkJRVHM3UVVGQlFTeE5RVUZvUWl4UFFVRm5RaXgxUlVGQlRpeEpRVUZOT3p0QlFVRkJPenRCUVVOeVF5eFBRVUZMTEZOQlFVd3NSMEZCYVVJc1UwRkJha0k3UVVGRFFTeFBRVUZMTEU5QlFVd3NSMEZCWlN4VlFVRlZMR2RDUVVGV0xFTkJRVEpDTEdWQlFUTkNMRU5CUVdZN1FVRkRRU3hQUVVGTExGRkJRVXdzUjBGQlowSXNWVUZCVlN4blFrRkJWaXhEUVVFeVFpeG5Ra0ZCTTBJc1EwRkJhRUk3UVVGRFFTeFBRVUZMTEZWQlFVd3NSMEZCYTBJc1NVRkJiRUk3UVVGRFFTeFBRVUZMTEU5QlFVd3NSMEZCWlN4UFFVRm1PenRCUVVWQkxFOUJRVXNzVDBGQlRDeERRVUZoTEU5QlFXSXNRMEZCY1VJc2EwSkJRVlU3UVVGRE4wSXNWMEZCVHl4blFrRkJVQ3hEUVVGM1FpeFBRVUY0UWl4RlFVRnBReXhoUVVGTE8wRkJRM0JETEZGQlFVVXNZMEZCUmp0QlFVTkJMRlZCUVUwc1VVRkJVU3hOUVVGTkxGTkJRVTRzUTBGQlowSXNUMEZCYUVJc1EwRkJkMElzU1VGQmVFSXNRMEZCTmtJc1RVRkJTeXhQUVVGc1F5eEZRVUV5UXl4TlFVRXpReXhEUVVGa096dEJRVVZCTEZWQlFVa3NUMEZCVHl4VlFVRlFMRWRCUVc5Q0xFZEJRWGhDTEVWQlFUWkNPMEZCUXpOQ0xHVkJRVThzVTBGQlVDeERRVUZwUWl4SFFVRnFRaXhEUVVGeFFpeGxRVUZ5UWp0QlFVTkJMR05CUVVzc1VVRkJUQ3hEUVVGakxFdEJRV1FzUlVGQmNVSXNTMEZCY2tJc1EwRkJNa0lzVFVGQk0wSXNSMEZCZFVNc1RVRkJTeXhSUVVGTUxFTkJRV01zUzBGQlpDeEZRVUZ4UWl4cFFrRkJja0lzUjBGQmVVTXNSVUZCYUVZN1FVRkRRU3hqUVVGTExGTkJRVXdzUTBGQlpTeGpRVUZtTEVOQlFUaENMRVZCUVVVc1ZVRkJWU3hSUVVGYUxFVkJRWE5DTEU5QlFVOHNUMEZCTjBJc1JVRkJjME1zVVVGQlVTeFRRVUU1UXl4RlFVRTVRanM3UVVGRlFTeGpRVUZMTEZGQlFVd3NRMEZCWXl4UFFVRmtMRU5CUVhOQ0xGVkJRVU1zVDBGQlJDeEZRVUZWTEVOQlFWWXNSVUZCWjBJN1FVRkRjRU1zWTBGQlNTeE5RVUZOTEV0QlFVNHNTVUZCWlN4VlFVRlZMRTFCUVVzc1ZVRkJiRU1zUlVGQk9FTTdRVUZETlVNc2IwSkJRVkVzUzBGQlVpeERRVUZqTEdOQlFXUXNRMEZCTmtJc1VVRkJOMEk3UVVGRFFTeHJRa0ZCU3l4UFFVRk1MRU5CUVdFc1EwRkJZaXhGUVVGblFpeFRRVUZvUWl4RFFVRXdRaXhOUVVFeFFpeERRVUZwUXl4bFFVRnFRenRCUVVORU8wRkJRMFlzVTBGTVJEdEJRVTlFTEU5QldrUXNUVUZaVHl4SlFVRkpMRTlCUVVvc1JVRkJZVHRCUVVOc1FpeGxRVUZQTEZOQlFWQXNRMEZCYVVJc1IwRkJha0lzUTBGQmNVSXNaMEpCUVhKQ08wRkJRMEVzWTBGQlN5eFJRVUZNTEVOQlFXTXNTMEZCWkN4RlFVRnhRaXhUUVVGeVFpeERRVUVyUWl4SFFVRXZRaXhEUVVGdFF5eG5Ra0ZCYmtNN08wRkJSVUVzWTBGQlN5eFJRVUZNTEVOQlFXTXNUMEZCWkN4RFFVRnpRaXhWUVVGRExFOUJRVVFzUlVGQlZTeERRVUZXTEVWQlFXZENPMEZCUTNCRExHZENRVUZMTEZGQlFVd3NRMEZCWXl4RFFVRmtMRVZCUVdsQ0xGTkJRV3BDTEVOQlFUSkNMRTFCUVROQ0xFTkJRV3RETEdWQlFXeERPMEZCUTBFc1owSkJRVXNzVDBGQlRDeERRVUZoTEVOQlFXSXNSVUZCWjBJc1UwRkJhRUlzUTBGQk1FSXNUVUZCTVVJc1EwRkJhVU1zWlVGQmFrTTdRVUZEUVN4clFrRkJVU3hMUVVGU0xFTkJRV01zWTBGQlpDeERRVUUyUWl4UlFVRTNRanRCUVVOQkxHTkJRVWtzVFVGQlRTeExRVUZXTEVWQlFXbENPMEZCUTJZc2EwSkJRVXNzVVVGQlRDeERRVUZqTEVOQlFXUXNSVUZCYVVJc1UwRkJha0lzUTBGQk1rSXNUVUZCTTBJc1EwRkJhME1zWjBKQlFXeERPMEZCUTBFc2EwSkJRVXNzVDBGQlRDeERRVUZoTEVOQlFXSXNSVUZCWjBJc1UwRkJhRUlzUTBGQk1FSXNUVUZCTVVJc1EwRkJhVU1zWjBKQlFXcERPMEZCUTBRN1FVRkRSaXhUUVZKRU8wRkJVMFE3TzBGQlJVUXNXVUZCU3l4VlFVRk1MRWRCUVd0Q0xFMUJRVXNzVlVGQlRDeExRVUZ2UWl4TFFVRndRaXhIUVVFMFFpeEpRVUUxUWl4SFFVRnRReXhMUVVGeVJEdEJRVU5FTEV0QmFFTkVPMEZCYVVORUxFZEJiRU5FTzBGQmJVTkVMRU03TzBGQlIwZ3NUMEZCVHl4UFFVRlFMRWRCUVdsQ0xFOUJRV3BDT3pzN096czdPenM3T3p0QlF6bERRVHM3T3p0QlFVTkJPenM3T3pzN096dEpRVVZ4UWl4Uk8wRkJRMjVDTEc5Q1FVRlpMRk5CUVZvc1JVRkJkVUk3UVVGQlFUczdRVUZCUVRzN1FVRkZja0lzVTBGQlN5eFRRVUZNTEVkQlFXbENMRk5CUVdwQ08wRkJRMEVzVTBGQlN5eE5RVUZNTEVkQlFXTXNVMEZCVXl4aFFVRlVMRU5CUVhWQ0xHOUNRVUYyUWl4RFFVRmtPMEZCUTBFc1UwRkJTeXhKUVVGTUxFZEJRVmtzUzBGQldqdEJRVU5CTEZOQlFVc3NTVUZCVEN4SFFVRlpMRU5CUVZvN1FVRkRRU3hUUVVGTExFbEJRVXdzUjBGQldTeExRVUZMTEZGQlFXcENPMEZCUTBFc1UwRkJTeXhGUVVGTUxFZEJRVlVzUzBGQlN5eE5RVUZtTzBGQlEwRXNVMEZCU3l4TFFVRk1MRWRCUVdFc1MwRkJTeXhUUVVGTUxFTkJRV1VzWjBKQlFXWXNRMEZCWjBNc2MwSkJRV2hETEVOQlFXSTdPMEZCUlVFc1UwRkJTeXhOUVVGTUxFZEJRV01zUlVGQlpEczdRVUZGUVN4WFFVRlBMR2RDUVVGUUxFTkJRWGRDTEZWQlFYaENMRVZCUVc5RExHRkJRVXM3UVVGRGRrTTdRVUZEUVN4bFFVRlRMRTFCUVZRN1FVRkRRVHRCUVVORUxFdEJTa1E3TzBGQlRVRXNWMEZCVHl4blFrRkJVQ3hEUVVGM1FpeFJRVUY0UWl4RlFVRnJReXhoUVVGTE8wRkJRM0pETEZWQlFVMHNaVUZCWlN4VFFVRlRMRWxCUVZRc1EwRkJZeXhaUVVGa0xFZEJRVFpDTEZOQlFWTXNaVUZCVkN4RFFVRjVRaXhUUVVGMFJDeEpRVU5zUWl4UFFVRlBMRmRCUVZBc1IwRkJjVUlzVFVGQlN5eE5RVUZNTEVOQlFWa3NXVUZFWml4RFFVRnlRanM3UVVGSFFTeFZRVUZKTEdkQ1FVRnBRaXhQUVVGUExGZEJRVkFzUjBGQmNVSXNRMEZCZEVNc1NVRkJORU1zUTBGQlF5eE5RVUZMTEVsQlFYUkVMRVZCUVRSRU8wRkJRekZFTEdOQlFVc3NUMEZCVER0QlFVTkJMR05CUVVzc1NVRkJUQ3hIUVVGWkxFbEJRVm83UVVGRFJEczdRVUZGUkN4WlFVRkxMRk5CUVV3N1FVRkRSQ3hMUVZaRU8wRkJWMFE3T3pzN09FSkJSVk03UVVGQlFUczdRVUZEVWl4VlFVRk5MRTlCUVU4N1FVRkRXQ3huUWtGQlVTeDFRa0ZFUnp0QlFVVllMRzFDUVVGWExFdEJRVXNzU1VGR1REdEJRVWRZTEdsQ1FVRlRMRXRCUVVzc1JVRklTRHRCUVVsWUxHTkJRVTBzUzBGQlN6dEJRVXBCTEU5QlFXSTdPMEZCVDBFc2MwSkJRVTBzU1VGQlRpeERRVUZYTEU5QlFWZ3NSVUZCYjBJc1lVRkJSeXhUUVVGSUxFTkJRV0VzU1VGQllpeERRVUZ3UWl4RlFVTkhMRWxCUkVnc1EwRkRVU3hsUVVGUE8wRkJRMWdzWjBKQlFWRXNSMEZCVWl4RFFVRlpMRWRCUVZvN1FVRkRRU3haUVVGSkxFbEJRVW9zUTBGQlV5eEpRVUZVTEVOQlFXTXNTMEZCWkN4RFFVRnZRaXhQUVVGd1FpeERRVUUwUWl4blFrRkJVVHRCUVVOc1F5eHBRa0ZCU3l4VFFVRk1MRU5CUVdVc2EwSkJRV1lzUTBGQmEwTXNWMEZCYkVNc1JVRkJLME1zUzBGQlN5eFBRVUZ3UkR0QlFVTkVMRk5CUmtRN1FVRkhRU3hsUVVGTExFdEJRVXdzUjBGQllTeFBRVUZMTEZOQlFVd3NRMEZCWlN4blFrRkJaaXhEUVVGblF5eHpRa0ZCYUVNc1EwRkJZanRCUVVOQkxHVkJRVXNzU1VGQlRDeEpRVUZoTEVOQlFXSTdRVUZEUVN4bFFVRkxMRWxCUVV3c1IwRkJXU3hMUVVGYU8wRkJRMFFzVDBGVVNDeEZRVlZITEV0QlZrZ3NRMEZWVXl4bFFVRlBPMEZCUTFvc1owSkJRVkVzUjBGQlVpeERRVUZaTEVkQlFWbzdRVUZEUkN4UFFWcElPMEZCWVVRN096dG5RMEZGVnp0QlFVTldMRlZCUVVrc1UwRkJVeXhGUVVGaU8wRkJRMEVzVjBGQlN5eExRVUZNTEVOQlFWY3NUMEZCV0N4RFFVRnRRaXhuUWtGQlVUdEJRVUZCTEc5RFFVTlVMRXRCUVVzc2NVSkJRVXdzUlVGRVV6dEJRVUZCTEZsQlEycENMRWRCUkdsQ0xIbENRVU5xUWl4SFFVUnBRanM3UVVGRmVrSXNXVUZCU1N4TlFVRk5MRTlCUVU4c1YwRkJVQ3hIUVVGeFFpeERRVUV6UWl4SlFVRm5ReXhOUVVGTkxFTkJRVEZETEVWQlFUWkRPMEZCUXpORExHMUNRVUZUTzBGQlExQXNiVUpCUVU4c1MwRkJTeXhQUVVGTUxFTkJRV0VzUzBGRVlqdEJRVVZRTEd0Q1FVRk5MRXRCUVVzc1QwRkJUQ3hEUVVGaE8wRkJSbG9zVjBGQlZEdEJRVWxFTzBGQlEwWXNUMEZTUkR0QlFWTkJMRlZCUVVrc1MwRkJTeXhOUVVGTUxFTkJRVmtzUzBGQldpeExRVUZ6UWl4UFFVRlBMRXRCUVRkQ0xFbEJRWE5ETEU5QlFVOHNTMEZCVUN4TFFVRnBRaXhUUVVFelJDeEZRVUZ6UlR0QlFVTndSU3hoUVVGTExFMUJRVXdzUjBGQll5eE5RVUZrTzBGQlEwRXNZVUZCU3l4VlFVRk1PMEZCUTBFc1owSkJRVkVzUjBGQlVpeERRVUZaTEV0QlFVc3NUVUZCVEN4RFFVRlpMRXRCUVhoQ08wRkJRMFE3UVVGRFJqczdPMmxEUVVWWk8wRkJRMWdzWlVGQlV5eExRVUZVTEVkQlFXOUNMRXRCUVVzc1RVRkJUQ3hEUVVGWkxFdEJRV2hETzBGQlEwRXNZVUZCVHl4UFFVRlFMRU5CUVdVc1UwRkJaaXhEUVVGNVFpeEZRVUY2UWl4RlFVRTJRaXhGUVVFM1FpeEZRVUZwUXl4TFFVRkxMRTFCUVV3c1EwRkJXU3hKUVVFM1F6dEJRVU5CTEdGQlFVOHNUMEZCVUN4RFFVRmxMR2xDUVVGbUxFZEJRVzFETEZGQlFXNURPMEZCUTBRN096czdPenRyUWtFM1JXdENMRkU3T3pzN096czdTVU5JWml4WkxFZEJRMG9zYzBKQlFWa3NVMEZCV2l4RlFVRjFRanRCUVVGQk96dEJRVUZCT3p0QlFVTnlRaXhQUVVGTExGTkJRVXdzUjBGQmFVSXNVMEZCYWtJN1FVRkRRU3hQUVVGTExFbEJRVXdzUjBGQldTeFZRVUZWTEdkQ1FVRldMRU5CUVRKQ0xEQkNRVUV6UWl4RFFVRmFPMEZCUTBFc1QwRkJTeXhQUVVGTUxFZEJRV1VzVlVGQlZTeG5Ra0ZCVml4RFFVRXlRaXgxUWtGQk0wSXNRMEZCWmp0QlFVTkJMRTlCUVVzc1QwRkJUQ3hIUVVGbExGVkJRVlVzWVVGQlZpeERRVUYzUWl4eFFrRkJlRUlzUTBGQlpqdEJRVU5CTEU5QlFVc3NUVUZCVEN4SFFVRmpMRlZCUVZVc1lVRkJWaXhEUVVGM1FpeHJRa0ZCZUVJc1EwRkJaRHRCUVVOQkxFOUJRVXNzVjBGQlRDeEhRVUZ0UWl4VlFVRlZMR0ZCUVZZc1EwRkJkMElzYlVKQlFYaENMRU5CUVc1Q08wRkJRMEVzVDBGQlN5eFZRVUZNTEVkQlFXdENMRU5CUVd4Q096dEJRVVZCTEU5QlFVc3NUMEZCVEN4RFFVRmhMRTlCUVdJc1EwRkJjVUlzYTBKQlFWVTdRVUZETjBJc1YwRkJUeXhuUWtGQlVDeERRVUYzUWl4UFFVRjRRaXhGUVVGcFF5eGhRVUZMTzBGQlFVRXNWVUZETlVJc1MwRkVORUlzUjBGRGJFSXNSVUZCUlN4aFFVRkdMRU5CUVdkQ0xFOUJSRVVzUTBGRE5VSXNTMEZFTkVJN096dEJRVWR3UXl4VlFVRkpMRlZCUVZVc1RVRkJTeXhWUVVGdVFpeEZRVUVyUWp0QlFVTTNRaXhqUVVGTExFOUJRVXdzUTBGQllTeE5RVUZMTEZWQlFXeENMRVZCUVRoQ0xGTkJRVGxDTEVOQlFYZERMRTFCUVhoRExFTkJRU3RETEZGQlFTOURPMEZCUTBFc1kwRkJTeXhKUVVGTUxFTkJRVlVzVFVGQlN5eFZRVUZtTEVWQlFUSkNMRk5CUVROQ0xFTkJRWEZETEUxQlFYSkRMRU5CUVRSRExGRkJRVFZET3p0QlFVVkJMR05CUVVzc1QwRkJUQ3hEUVVGaExFdEJRV0lzUlVGQmIwSXNVMEZCY0VJc1EwRkJPRUlzUjBGQk9VSXNRMEZCYTBNc1VVRkJiRU03UVVGRFFTeGpRVUZMTEVsQlFVd3NRMEZCVlN4TFFVRldMRVZCUVdsQ0xGTkJRV3BDTEVOQlFUSkNMRWRCUVROQ0xFTkJRU3RDTEZGQlFTOUNPenRCUVVWQkxHTkJRVXNzVlVGQlRDeEhRVUZyUWl4TFFVRnNRanRCUVVORU96dEJRVVZFTEZWQlFVa3NUMEZCVHl4VlFVRlFMRWxCUVhGQ0xFZEJRWHBDTEVWQlFUaENPMEZCUXpWQ0xHTkJRVXNzVDBGQlRDeERRVUZoTEZOQlFXSXNRMEZCZFVJc1IwRkJka0lzUTBGQk1rSXNhMEpCUVROQ08wRkJRMEVzWTBGQlN5eFhRVUZNTEVOQlFXbENMRk5CUVdwQ0xFTkJRVEpDTEUxQlFUTkNMRU5CUVd0RExHVkJRV3hETzBGQlEwUTdRVUZEUml4TFFXcENSRHRCUVd0Q1JDeEhRVzVDUkRzN1FVRnhRa0VzVDBGQlN5eE5RVUZNTEVOQlFWa3NaMEpCUVZvc1EwRkJOa0lzVDBGQk4wSXNSVUZCYzBNc1dVRkJUVHRCUVVNeFF5eFJRVUZKTEU5QlFVOHNWVUZCVUN4SlFVRnhRaXhIUVVGNlFpeEZRVUU0UWp0QlFVTTFRaXhaUVVGTExFOUJRVXdzUTBGQllTeFRRVUZpTEVOQlFYVkNMRTFCUVhaQ0xFTkJRVGhDTEd0Q1FVRTVRanRCUVVOQkxGbEJRVXNzVjBGQlRDeERRVUZwUWl4VFFVRnFRaXhEUVVFeVFpeEhRVUV6UWl4RFFVRXJRaXhsUVVFdlFqdEJRVU5FTzBGQlEwWXNSMEZNUkR0QlFVMUVMRU03TzBGQlIwZ3NUMEZCVHl4UFFVRlFMRWRCUVdsQ0xGbEJRV3BDT3pzN096dEJRM2hEUVRzN096dEJRVU5CT3pzN08wRkJRMEU3T3pzN1FVRkRRVHM3T3pzN08wRkJSMEVzU1VGQlRTeFRRVUZUTEhGQ1FVRlhMRk5CUVZNc1lVRkJWQ3hEUVVGMVFpeGpRVUYyUWl4RFFVRllMRU5CUVdZN08wRkJSVUVzU1VGQlNTeFRRVUZUTEdGQlFWUXNRMEZCZFVJc2RVSkJRWFpDTEVOQlFVb3NSVUZCY1VRN1FVRkRia1FzVFVGQlRTeGpRVUZqTERCQ1FVRm5RaXhUUVVGVExHRkJRVlFzUTBGQmRVSXNkVUpCUVhaQ0xFTkJRV2hDTEVWQlFXbEZMRWxCUVdwRkxFTkJRWEJDTzBGQlEwUTdPMEZCUlVRc1NVRkJTU3hUUVVGVExHRkJRVlFzUTBGQmRVSXNiMEpCUVhaQ0xFTkJRVW9zUlVGQmEwUTdRVUZEYUVRc1RVRkJUU3hQUVVGUExESkNRVUZwUWl4VFFVRlRMR0ZCUVZRc1EwRkJkVUlzYjBKQlFYWkNMRU5CUVdwQ0xFTkJRV0k3UVVGRFJEczdRVUZGUkN4SlFVRkpMRk5CUVZNc1lVRkJWQ3hEUVVGMVFpeGxRVUYyUWl4RFFVRktMRVZCUVRaRE8wRkJRek5ETEUxQlFVMHNZMEZCWXl3d1FrRkJaMElzVTBGQlV5eGhRVUZVTEVOQlFYVkNMR1ZCUVhaQ0xFTkJRV2hDTEVWQlFYbEVMRXRCUVhwRUxFTkJRWEJDTzBGQlEwUTdPMEZCUlVRc1NVRkJUU3hyUWtGQmEwSXNkVUpCUVdFc1UwRkJVeXhoUVVGVUxFTkJRWFZDTEhsQ1FVRjJRaXhEUVVGaUxFTkJRWGhDT3pzN1FVTndRa0U3T3p0QlEwRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzBGRGNFeEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEY0VSQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGJrSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRM3BFUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFRFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU12UlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTndSRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGJFSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU4wUmtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGNrSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTXhRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN1FVTndRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdRVU5vUjBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMWhCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEzQkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5zUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEyUkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTnlSRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJSQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTndSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEV2tFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTNKRVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU16UWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZETDFOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEzSkNRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEzaE1RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOc1FrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFoQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlF6bExRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5zVGtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpS0daMWJtTjBhVzl1SUdVb2RDeHVMSElwZTJaMWJtTjBhVzl1SUhNb2J5eDFLWHRwWmlnaGJsdHZYU2w3YVdZb0lYUmJiMTBwZTNaaGNpQmhQWFI1Y0dWdlppQnlaWEYxYVhKbFBUMWNJbVoxYm1OMGFXOXVYQ0ltSm5KbGNYVnBjbVU3YVdZb0lYVW1KbUVwY21WMGRYSnVJR0VvYnl3aE1DazdhV1lvYVNseVpYUjFjbTRnYVNodkxDRXdLVHQyWVhJZ1pqMXVaWGNnUlhKeWIzSW9YQ0pEWVc1dWIzUWdabWx1WkNCdGIyUjFiR1VnSjF3aUsyOHJYQ0luWENJcE8zUm9jbTkzSUdZdVkyOWtaVDFjSWsxUFJGVk1SVjlPVDFSZlJrOVZUa1JjSWl4bWZYWmhjaUJzUFc1YmIxMDllMlY0Y0c5eWRITTZlMzE5TzNSYmIxMWJNRjB1WTJGc2JDaHNMbVY0Y0c5eWRITXNablZ1WTNScGIyNG9aU2w3ZG1GeUlHNDlkRnR2WFZzeFhWdGxYVHR5WlhSMWNtNGdjeWh1UDI0NlpTbDlMR3dzYkM1bGVIQnZjblJ6TEdVc2RDeHVMSElwZlhKbGRIVnliaUJ1VzI5ZExtVjRjRzl5ZEhOOWRtRnlJR2s5ZEhsd1pXOW1JSEpsY1hWcGNtVTlQVndpWm5WdVkzUnBiMjVjSWlZbWNtVnhkV2x5WlR0bWIzSW9kbUZ5SUc4OU1EdHZQSEl1YkdWdVozUm9PMjhyS3lsektISmJiMTBwTzNKbGRIVnliaUJ6ZlNraUxDSmpiR0Z6Y3lCSVpXRmtaWElnZTF4dUlDQmpiMjV6ZEhKMVkzUnZjaWhqYjI1MFlXbHVaWElwSUh0Y2JpQWdJQ0IwYUdsekxtaGxZV1JsY2lBOUlHTnZiblJoYVc1bGNseHVJQ0FnSUhSb2FYTXVkSEpwWjJkbGNpQTlJR052Ym5SaGFXNWxjaTV4ZFdWeWVWTmxiR1ZqZEc5eUtDY3VibUYyWDE5MGNtbG5aMlZ5SnlsY2JpQWdJQ0IwYUdsekxtNWhkaUE5SUdOdmJuUmhhVzVsY2k1eGRXVnllVk5sYkdWamRHOXlLQ2N1YzJsMFpTMW9aV0ZrWlhKZlgyNWhkaWNwWEc0Z0lDQWdkR2hwY3k1a2NtOXdSRzkzYmlBOUlHTnZiblJoYVc1bGNpNXhkV1Z5ZVZObGJHVmpkRzl5S0NjdVpISnZjRjlmZEhKcFoyZGxjaWNwWEc1Y2JpQWdJQ0IwYUdsekxuUnlhV2RuWlhJdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblkyeHBZMnNuTENBb1pTa2dQVDRnZTF4dUlDQWdJQ0FnZEdocGN5NTBiMmRuYkdWT1lYWW9LVnh1SUNBZ0lIMHBYRzVjYmlBZ0lDQjBhR2x6TG1SeWIzQkViM2R1TG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjJOc2FXTnJKeXdnS0dVcElEMCtJSHRjYmlBZ0lDQWdJR1V1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVnh1SUNBZ0lIMHBYRzRnSUgxY2JseHVJQ0IwYjJkbmJHVk9ZWFlvS1NCN1hHNGdJQ0FnZEdocGN5NXVZWFl1WTJ4aGMzTk1hWE4wTG5SdloyZHNaU2duYzJsMFpTMW9aV0ZrWlhKZlgyNWhkaTB0YUdsa1pTY3BYRzRnSUgxY2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JJWldGa1pYSmNiaUlzSW1Oc1lYTnpJRkoxWW5KcFkzTWdlMXh1SUNCamIyNXpkSEoxWTNSdmNpaGpiMjUwWVdsdVpYSXNJR1JsYzJ0MGIzQWdQU0IwY25WbEtTQjdYRzRnSUNBZ2RHaHBjeTVqYjI1MFlXbHVaWElnUFNCamIyNTBZV2x1WlhKY2JpQWdJQ0IwYUdsekxtSjFkSFJ2Ym5NZ1BTQmpiMjUwWVdsdVpYSXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDZ25MbWwwWlcxZlgySjFkSFJ2YmljcFhHNGdJQ0FnZEdocGN5NTNjbUZ3Y0dWeWN5QTlJR052Ym5SaGFXNWxjaTV4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNLQ2N1YVhSbGJWOWZkM0poY0hCbGNpY3BYRzRnSUNBZ2RHaHBjeTVzWVhOMFgybHVaR1Y0SUQwZ2JuVnNiRnh1SUNBZ0lIUm9hWE11WkdWemEzUnZjQ0E5SUdSbGMydDBiM0JjYmx4dUlDQWdJSFJvYVhNdVluVjBkRzl1Y3k1bWIzSkZZV05vS0dKMWRIUnZiaUE5UGlCN1hHNGdJQ0FnSUNCaWRYUjBiMjR1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduWTJ4cFkyc25MQ0JsSUQwK0lIdGNiaUFnSUNBZ0lDQWdaUzV3Y21WMlpXNTBSR1ZtWVhWc2RDZ3BYRzRnSUNBZ0lDQWdJR052Ym5OMElHbHVaR1Y0SUQwZ1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG1sdVpHVjRUMll1WTJGc2JDaDBhR2x6TG1KMWRIUnZibk1zSUdKMWRIUnZiaWxjYmx4dUlDQWdJQ0FnSUNCcFppQW9kMmx1Wkc5M0xtbHVibVZ5VjJsa2RHZ2dQQ0EzTURBcElIdGNiaUFnSUNBZ0lDQWdJQ0JpZFhSMGIyNHVZMnhoYzNOTWFYTjBMbUZrWkNnbmJXOWlhV3hsTFdGamRHbDJaU2NwWEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTUzY21Gd2NHVnljMXRwYm1SbGVGMHVjM1I1YkdVdWFHVnBaMmgwSUQwZ1lDUjdkR2hwY3k1M2NtRndjR1Z5YzF0cGJtUmxlRjB1WTJocGJHUkZiR1Z0Wlc1MFEyOTFiblFnS2lBMk1IMXdlR0JjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbU52Ym5SaGFXNWxjaTV6WTNKdmJHeEpiblJ2Vm1sbGR5aDdJR0psYUdGMmFXOXlPaUFuYzIxdmIzUm9KeXdnWW14dlkyczZJQ2R6ZEdGeWRDY3NJR2x1YkdsdVpUb2dKMjVsWVhKbGMzUW5JSDBwWEc1Y2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG5keVlYQndaWEp6TG1admNrVmhZMmdvS0hkeVlYQndaWElzSUdrcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hwSUNFOVBTQnBibVJsZUNCOGZDQnBibVJsZUNBOVBUMGdkR2hwY3k1c1lYTjBYMmx1WkdWNEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIZHlZWEJ3WlhJdWMzUjViR1V1Y21WdGIzWmxVSEp2Y0dWeWRIa29KMmhsYVdkb2RDY3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WW5WMGRHOXVjMXRwWFM1amJHRnpjMHhwYzNRdWNtVnRiM1psS0NkdGIySnBiR1V0WVdOMGFYWmxKeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0I5S1Z4dVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9aR1Z6YTNSdmNDa2dlMXh1SUNBZ0lDQWdJQ0FnSUdKMWRIUnZiaTVqYkdGemMweHBjM1F1WVdSa0tDZGtaWE5yZEc5d0xXRmpkR2wyWlNjcFhHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1M2NtRndjR1Z5YzF0cGJtUmxlRjB1WTJ4aGMzTk1hWE4wTG1Ga1pDZ25aR1Z6YTNSdmNDMWhZM1JwZG1VbktWeHVYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NTNjbUZ3Y0dWeWN5NW1iM0pGWVdOb0tDaDNjbUZ3Y0dWeUxDQnBLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuZHlZWEJ3WlhKelcybGRMbU5zWVhOelRHbHpkQzV5WlcxdmRtVW9KMjF2WW1sc1pTMWhZM1JwZG1VbktWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWlkWFIwYjI1elcybGRMbU5zWVhOelRHbHpkQzV5WlcxdmRtVW9KMjF2WW1sc1pTMWhZM1JwZG1VbktWeHVJQ0FnSUNBZ0lDQWdJQ0FnZDNKaGNIQmxjaTV6ZEhsc1pTNXlaVzF2ZG1WUWNtOXdaWEowZVNnbmFHVnBaMmgwSnlsY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocElDRTlQU0JwYm1SbGVDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5keVlYQndaWEp6VzJsZExtTnNZWE56VEdsemRDNXlaVzF2ZG1Vb0oyUmxjMnQwYjNBdFlXTjBhWFpsSnlsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWlkWFIwYjI1elcybGRMbU5zWVhOelRHbHpkQzV5WlcxdmRtVW9KMlJsYzJ0MGIzQXRZV04wYVhabEp5bGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVzWVhOMFgybHVaR1Y0SUQwZ2RHaHBjeTVzWVhOMFgybHVaR1Y0SUQwOVBTQnBibVJsZUNBL0lHNTFiR3dnT2lCcGJtUmxlRnh1SUNBZ0lDQWdmU2xjYmlBZ0lDQjlLVnh1SUNCOVhHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnVW5WaWNtbGpjMXh1SWl3aWFXMXdiM0owSUdGNGFXOXpJR1p5YjIwZ0oyRjRhVzl6SjF4dWFXMXdiM0owSUhGeklHWnliMjBnSjNGekoxeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCTWIyRmtUVzl5WlNCN1hHNGdJR052Ym5OMGNuVmpkRzl5S0dOdmJuUmhhVzVsY2lrZ2UxeHVYRzRnSUNBZ2RHaHBjeTVqYjI1MFlXbHVaWElnUFNCamIyNTBZV2x1WlhKY2JpQWdJQ0IwYUdsekxtWnZiM1JsY2lBOUlHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvSjJadmIzUmxjaTV6YVhSbExXWnZiM1JsY2ljcFhHNGdJQ0FnZEdocGN5NTNZV2wwSUQwZ1ptRnNjMlZjYmlBZ0lDQjBhR2x6TG5CaFoyVWdQU0F4WEc0Z0lDQWdkR2hwY3k1a1lYUmxJRDBnZG1GeWN5NXdiM04wUkdGMFpWeHVJQ0FnSUhSb2FYTXVhV1FnUFNCMllYSnpMbkJ2YzNSSlJGeHVJQ0FnSUhSb2FYTXVjRzl6ZEhNZ1BTQjBhR2x6TG1OdmJuUmhhVzVsY2k1eGRXVnllVk5sYkdWamRHOXlRV3hzS0NjdWNIVmliR2xqWVhScGIyNHRkM0poY0hCbGNpY3BYRzVjYmlBZ0lDQjBhR2x6TG5ObGJHVmpkQ0E5SUh0OVhHNWNiaUFnSUNCM2FXNWtiM2N1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduY0c5d2MzUmhkR1VuTENCbElEMCtJSHRjYmlBZ0lDQWdJQzh2SUdsbUlDaGxMbTl5YVdkcGJtRnNSWFpsYm5RdWMzUmhkR1VnSVQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUd4dlkyRjBhVzl1TG5KbGJHOWhaQ2dwWEc0Z0lDQWdJQ0F2THlCOVhHNGdJQ0FnZlNsY2JseHVJQ0FnSUhkcGJtUnZkeTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2R6WTNKdmJHd25MQ0JsSUQwK0lIdGNiaUFnSUNBZ0lHTnZibk4wSUhOamNtOXNiRUp2ZEhSdmJTQTlJR1J2WTNWdFpXNTBMbUp2WkhrdWMyTnliMnhzU0dWcFoyaDBJQzBnWkc5amRXMWxiblF1Wkc5amRXMWxiblJGYkdWdFpXNTBMbk5qY205c2JGUnZjRnh1SUNBZ0lDQWdMU0FvZDJsdVpHOTNMbWx1Ym1WeVNHVnBaMmgwSUNzZ2RHaHBjeTVtYjI5MFpYSXViMlptYzJWMFNHVnBaMmgwS1Z4dVhHNGdJQ0FnSUNCcFppQW9jMk55YjJ4c1FtOTBkRzl0SUR3OUlDaDNhVzVrYjNjdWFXNXVaWEpJWldsbmFIUWdLaUF5S1NBbUppQWhkR2hwY3k1M1lXbDBLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZV1JrVUc5emRDZ3BYRzRnSUNBZ0lDQWdJSFJvYVhNdWQyRnBkQ0E5SUhSeWRXVmNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdkR2hwY3k1blpYUkJZM1JwZG1Vb0tWeHVJQ0FnSUgwcFhHNGdJSDFjYmx4dUlDQmhaR1JRYjNOMEtDa2dlMXh1SUNBZ0lHTnZibk4wSUdSaGRHRWdQU0I3WEc0Z0lDQWdJQ0JoWTNScGIyNDZJQ2R3ZFdKc2FXTmhkR2x2Ymw5c2IyRmtYMjF2Y21VbkxGeHVJQ0FnSUNBZ2NHOXpkRjlrWVhSbE9pQjBhR2x6TG1SaGRHVXNYRzRnSUNBZ0lDQndiM04wWDJsa09pQjBhR2x6TG1sa0xGeHVJQ0FnSUNBZ2NHRm5aVG9nZEdocGN5NXdZV2RsWEc0Z0lDQWdmVnh1WEc0Z0lDQWdZWGhwYjNNdWNHOXpkQ2hoYW1GNGRYSnNMQ0J4Y3k1emRISnBibWRwWm5rb1pHRjBZU2twWEc0Z0lDQWdJQ0F1ZEdobGJpaHlaWE1nUFQ0Z2UxeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWh5WlhNcFhHNGdJQ0FnSUNBZ0lISmxjeTVrWVhSaExtUmhkR0V1Y0c5emRITXVabTl5UldGamFDaHdiM04wSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxtTnZiblJoYVc1bGNpNXBibk5sY25SQlpHcGhZMlZ1ZEVoVVRVd29KMkpsWm05eVpXVnVaQ2NzSUhCdmMzUXVZMjl1ZEdWdWRDbGNiaUFnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnZEdocGN5NXdiM04wY3lBOUlIUm9hWE11WTI5dWRHRnBibVZ5TG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvSnk1d2RXSnNhV05oZEdsdmJpMTNjbUZ3Y0dWeUp5bGNiaUFnSUNBZ0lDQWdkR2hwY3k1d1lXZGxJQ3M5SURGY2JpQWdJQ0FnSUNBZ2RHaHBjeTUzWVdsMElEMGdabUZzYzJWY2JpQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBdVkyRjBZMmdvWlhKeUlEMCtJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb1pYSnlLVnh1SUNBZ0lDQWdmU2xjYmlBZ2ZWeHVYRzRnSUdkbGRFRmpkR2wyWlNncElIdGNiaUFnSUNCc1pYUWdjMlZzWldOMElEMGdlMzFjYmlBZ0lDQjBhR2x6TG5CdmMzUnpMbVp2Y2tWaFkyZ29jRzl6ZENBOVBpQjdYRzRnSUNBZ0lDQmpiMjV6ZENCN0lIUnZjQ0I5SUQwZ2NHOXpkQzVuWlhSQ2IzVnVaR2x1WjBOc2FXVnVkRkpsWTNRb0tWeHVJQ0FnSUNBZ2FXWWdLSFJ2Y0NBOElIZHBibVJ2ZHk1cGJtNWxja2hsYVdkb2RDQXZJRElnSmlZZ2RHOXdJRDRnTUNrZ2UxeHVJQ0FnSUNBZ0lDQnpaV3hsWTNRZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdsMGJHVTZJSEJ2YzNRdVpHRjBZWE5sZEM1MGFYUnNaU3hjYmlBZ0lDQWdJQ0FnSUNCd1lYUm9PaUJ3YjNOMExtUmhkR0Z6WlhRdWNHRjBhRnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2xjYmlBZ0lDQnBaaUFvZEdocGN5NXpaV3hsWTNRdWRHbDBiR1VnSVQwOUlITmxiR1ZqZEM1MGFYUnNaU0FtSmlCelpXeGxZM1F1ZEdsMGJHVWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV6Wld4bFkzUWdQU0J6Wld4bFkzUmNiaUFnSUNBZ0lIUm9hWE11ZFhCa1lYUmxVR0ZuWlNncFhHNGdJQ0FnSUNCamIyNXpiMnhsTG14dlp5aDBhR2x6TG5ObGJHVmpkQzUwYVhSc1pTbGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQjFjR1JoZEdWUVlXZGxLQ2tnZTF4dUlDQWdJR1J2WTNWdFpXNTBMblJwZEd4bElEMGdZQ1I3ZEdocGN5NXpaV3hsWTNRdWRHbDBiR1Y5SUMwZ1JXTnlhWFIxY21WeklFNTFiV1Z5YVhGMVpYTmdYRzRnSUNBZ2QybHVaRzkzTG1ocGMzUnZjbmt1Y0hWemFGTjBZWFJsS0h0OUxDQW5KeXdnZEdocGN5NXpaV3hsWTNRdWNHRjBhQ2xjYmlBZ0lDQjNhVzVrYjNjdWFHbHpkRzl5ZVM1elkzSnZiR3hTWlhOMGIzSmhkR2x2YmlBOUlDZHRZVzUxWVd3blhHNGdJSDFjYm4xY2JpSXNJbU5zWVhOeklGUmhlRzl1YjIxNVZHRmljeUI3WEc0Z0lHTnZibk4wY25WamRHOXlLR052Ym5SaGFXNWxjaWtnZTF4dUlDQWdJSFJvYVhNdVkyOXVkR0ZwYm1WeUlEMGdZMjl1ZEdGcGJtVnlYRzRnSUNBZ2RHaHBjeTUwWVdKeklEMGdZMjl1ZEdGcGJtVnlMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29KM05sWTNScGIyNHVjbVZzWVhSbFpGOWZjMlZqZEdsdmJpY3BYRzRnSUNBZ2RHaHBjeTVpZFhSMGIyNXpJRDBnWTI5dWRHRnBibVZ5TG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvSjJKMWRIUnZiaTVvWldGa1pYSmZYMkoxZEhSdmJpY3BYRzRnSUNBZ2RHaHBjeTUzY21Gd2NHVnlJRDBnWTI5dWRHRnBibVZ5TG5GMVpYSjVVMlZzWldOMGIzSW9KeTV5Wld4aGRHVmtYMTlqYjI1MFlXbHVaWEluS1Z4dUlDQWdJSFJvYVhNdWNtVjBkWEp1SUQwZ1kyOXVkR0ZwYm1WeUxuRjFaWEo1VTJWc1pXTjBiM0lvSnk1eVpXeGhkR1ZrWDE5eVpYUjFjbTRuS1Z4dUlDQWdJSFJvYVhNdWRHRmljMWR5WVhCd1pYSWdQU0JqYjI1MFlXbHVaWEl1Y1hWbGNubFRaV3hsWTNSdmNpZ25MbkpsYkdGMFpXUmZYM2R5WVhCd1pYSW5LVnh1SUNBZ0lIUm9hWE11YkdGemRGOXBibVJsZUNBOUlEQmNibHh1SUNBZ0lIUm9hWE11WW5WMGRHOXVjeTVtYjNKRllXTm9LR0oxZEhSdmJpQTlQaUI3WEc0Z0lDQWdJQ0JpZFhSMGIyNHVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25ZMnhwWTJzbkxDQmxJRDArSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZXlCcGJtUmxlQ0I5SUQwZ1pTNWpkWEp5Wlc1MFZHRnlaMlYwTG1SaGRHRnpaWFJjYmx4dUlDQWdJQ0FnSUNCcFppQW9hVzVrWlhnZ0lUMDlJSFJvYVhNdWJHRnpkRjlwYm1SbGVDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVZblYwZEc5dWMxdDBhR2x6TG14aGMzUmZhVzVrWlhoZExtTnNZWE56VEdsemRDNXlaVzF2ZG1Vb0oyRmpkR2wyWlNjcFhHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1MFlXSnpXM1JvYVhNdWJHRnpkRjlwYm1SbGVGMHVZMnhoYzNOTWFYTjBMbkpsYlc5MlpTZ25ZV04wYVhabEp5bGNibHh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVZblYwZEc5dWMxdHBibVJsZUYwdVkyeGhjM05NYVhOMExtRmtaQ2duWVdOMGFYWmxKeWxjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMblJoWW5OYmFXNWtaWGhkTG1Oc1lYTnpUR2x6ZEM1aFpHUW9KMkZqZEdsMlpTY3BYRzVjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbXhoYzNSZmFXNWtaWGdnUFNCcGJtUmxlRnh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSGRwYm1SdmR5NXBibTVsY2xkcFpIUm9JRHc5SURjd01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVkM0poY0hCbGNpNWpiR0Z6YzB4cGMzUXVZV1JrS0NkamIyNTBZV2x1WlhJdExYTnNhV1JsSnlsY2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG5SaFluTlhjbUZ3Y0dWeUxtTnNZWE56VEdsemRDNXlaVzF2ZG1Vb0ozZHlZWEJ3WlhJdExXaHBaR1VuS1Z4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtWeHVJQ0FnSUgwcFhHNWNiaUFnSUNCMGFHbHpMbkpsZEhWeWJpNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZGpiR2xqYXljc0lDZ3BJRDArSUh0Y2JpQWdJQ0FnSUdsbUlDaDNhVzVrYjNjdWFXNXVaWEpYYVdSMGFDQThQU0EzTURBcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1M2NtRndjR1Z5TG1Oc1lYTnpUR2x6ZEM1eVpXMXZkbVVvSjJOdmJuUmhhVzVsY2kwdGMyeHBaR1VuS1Z4dUlDQWdJQ0FnSUNCMGFHbHpMblJoWW5OWGNtRndjR1Z5TG1Oc1lYTnpUR2x6ZEM1aFpHUW9KM2R5WVhCd1pYSXRMV2hwWkdVbktWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcFhHNGdJSDFjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlVZWGh2Ym05dGVWUmhZbk5jYmlJc0ltbHRjRzl5ZENCSVpXRmtaWElnWm5KdmJTQW5MaTlEYkdGemMyVnpMMGhsWVdSbGNpZGNibWx0Y0c5eWRDQkliMjFsVW5WaWNtbGpjeUJtY205dElDY3VMME5zWVhOelpYTXZTRzl0WlZKMVluSnBZM01uWEc1cGJYQnZjblFnVkdGNGIyNXZiWGxVWVdKeklHWnliMjBnSnk0dlEyeGhjM05sY3k5VVlYaHZibTl0ZVZSaFluTW5YRzVwYlhCdmNuUWdURzloWkUxdmNtVWdabkp2YlNBbkxpOURiR0Z6YzJWekwweHZZV1JOYjNKbEoxeHVYRzVjYm1OdmJuTjBJR2hsWVdSbGNpQTlJRzVsZHlCSVpXRmtaWElvWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpZ25Mbk5wZEdVdGFHVmhaR1Z5SnlrcFhHNWNibWxtSUNoa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLQ2N1YUc5dFpTMXpaV04wYVc5dUxuSjFZbkpwWTNNbktTa2dlMXh1SUNCamIyNXpkQ0JvYjIxbFVuVmljbWxqY3lBOUlHNWxkeUJJYjIxbFVuVmljbWxqY3loa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLQ2N1YUc5dFpTMXpaV04wYVc5dUxuSjFZbkpwWTNNbktTd2dkSEoxWlNsY2JuMWNibHh1YVdZZ0tHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvSnk1MFlYaHZibTl0ZVY5ZmNtVnNZWFJsWkNjcEtTQjdYRzRnSUdOdmJuTjBJSFJoWW5NZ1BTQnVaWGNnVkdGNGIyNXZiWGxVWVdKektHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvSnk1MFlYaHZibTl0ZVY5ZmNtVnNZWFJsWkNjcEtWeHVmVnh1WEc1cFppQW9aRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2lnbkxuQmhaMlV0Y25WaWNtbGpjeWNwS1NCN1hHNGdJR052Ym5OMElIQmhaMlZTZFdKeWFXTnpJRDBnYm1WM0lFaHZiV1ZTZFdKeWFXTnpLR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb0p5NXdZV2RsTFhKMVluSnBZM01uS1N3Z1ptRnNjMlVwWEc1OVhHNWNibU52Ym5OMElGQjFZbXhwWTJGMGFXOXVURzloWkNBOUlHNWxkeUJNYjJGa1RXOXlaU2hrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtDY3VjSFZpYkdsallYUnBiMjVmWDJOdmJuUmhhVzVsY2ljcEtWeHVJaXdpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0J5WlhGMWFYSmxLQ2N1TDJ4cFlpOWhlR2x2Y3ljcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVkbUZ5SUhWMGFXeHpJRDBnY21WeGRXbHlaU2duTGk4dUxpOTFkR2xzY3ljcE8xeHVkbUZ5SUhObGRIUnNaU0E5SUhKbGNYVnBjbVVvSnk0dkxpNHZZMjl5WlM5elpYUjBiR1VuS1R0Y2JuWmhjaUJpZFdsc1pGVlNUQ0E5SUhKbGNYVnBjbVVvSnk0dkxpNHZhR1ZzY0dWeWN5OWlkV2xzWkZWU1RDY3BPMXh1ZG1GeUlIQmhjbk5sU0dWaFpHVnljeUE5SUhKbGNYVnBjbVVvSnk0dkxpNHZhR1ZzY0dWeWN5OXdZWEp6WlVobFlXUmxjbk1uS1R0Y2JuWmhjaUJwYzFWU1RGTmhiV1ZQY21sbmFXNGdQU0J5WlhGMWFYSmxLQ2N1THk0dUwyaGxiSEJsY25NdmFYTlZVa3hUWVcxbFQzSnBaMmx1SnlrN1hHNTJZWElnWTNKbFlYUmxSWEp5YjNJZ1BTQnlaWEYxYVhKbEtDY3VMaTlqYjNKbEwyTnlaV0YwWlVWeWNtOXlKeWs3WEc1MllYSWdZblJ2WVNBOUlDaDBlWEJsYjJZZ2QybHVaRzkzSUNFOVBTQW5kVzVrWldacGJtVmtKeUFtSmlCM2FXNWtiM2N1WW5SdllTQW1KaUIzYVc1a2IzY3VZblJ2WVM1aWFXNWtLSGRwYm1SdmR5a3BJSHg4SUhKbGNYVnBjbVVvSnk0dkxpNHZhR1ZzY0dWeWN5OWlkRzloSnlrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdlR2h5UVdSaGNIUmxjaWhqYjI1bWFXY3BJSHRjYmlBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUlHUnBjM0JoZEdOb1dHaHlVbVZ4ZFdWemRDaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNiaUFnSUNCMllYSWdjbVZ4ZFdWemRFUmhkR0VnUFNCamIyNW1hV2N1WkdGMFlUdGNiaUFnSUNCMllYSWdjbVZ4ZFdWemRFaGxZV1JsY25NZ1BTQmpiMjVtYVdjdWFHVmhaR1Z5Y3p0Y2JseHVJQ0FnSUdsbUlDaDFkR2xzY3k1cGMwWnZjbTFFWVhSaEtISmxjWFZsYzNSRVlYUmhLU2tnZTF4dUlDQWdJQ0FnWkdWc1pYUmxJSEpsY1hWbGMzUklaV0ZrWlhKeld5ZERiMjUwWlc1MExWUjVjR1VuWFRzZ0x5OGdUR1YwSUhSb1pTQmljbTkzYzJWeUlITmxkQ0JwZEZ4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCeVpYRjFaWE4wSUQwZ2JtVjNJRmhOVEVoMGRIQlNaWEYxWlhOMEtDazdYRzRnSUNBZ2RtRnlJR3h2WVdSRmRtVnVkQ0E5SUNkdmJuSmxZV1I1YzNSaGRHVmphR0Z1WjJVbk8xeHVJQ0FnSUhaaGNpQjRSRzl0WVdsdUlEMGdabUZzYzJVN1hHNWNiaUFnSUNBdkx5QkdiM0lnU1VVZ09DODVJRU5QVWxNZ2MzVndjRzl5ZEZ4dUlDQWdJQzh2SUU5dWJIa2djM1Z3Y0c5eWRITWdVRTlUVkNCaGJtUWdSMFZVSUdOaGJHeHpJR0Z1WkNCa2IyVnpiaWQwSUhKbGRIVnlibk1nZEdobElISmxjM0J2Ym5ObElHaGxZV1JsY25NdVhHNGdJQ0FnTHk4Z1JFOU9KMVFnWkc4Z2RHaHBjeUJtYjNJZ2RHVnpkR2x1WnlCaUwyTWdXRTFNU0hSMGNGSmxjWFZsYzNRZ2FYTWdiVzlqYTJWa0xDQnViM1FnV0VSdmJXRnBibEpsY1hWbGMzUXVYRzRnSUNBZ2FXWWdLSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQW5kR1Z6ZENjZ0ppWmNiaUFnSUNBZ0lDQWdkSGx3Wlc5bUlIZHBibVJ2ZHlBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlaY2JpQWdJQ0FnSUNBZ2QybHVaRzkzTGxoRWIyMWhhVzVTWlhGMVpYTjBJQ1ltSUNFb0ozZHBkR2hEY21Wa1pXNTBhV0ZzY3ljZ2FXNGdjbVZ4ZFdWemRDa2dKaVpjYmlBZ0lDQWdJQ0FnSVdselZWSk1VMkZ0WlU5eWFXZHBiaWhqYjI1bWFXY3VkWEpzS1NrZ2UxeHVJQ0FnSUNBZ2NtVnhkV1Z6ZENBOUlHNWxkeUIzYVc1a2IzY3VXRVJ2YldGcGJsSmxjWFZsYzNRb0tUdGNiaUFnSUNBZ0lHeHZZV1JGZG1WdWRDQTlJQ2R2Ym14dllXUW5PMXh1SUNBZ0lDQWdlRVJ2YldGcGJpQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNCeVpYRjFaWE4wTG05dWNISnZaM0psYzNNZ1BTQm1kVzVqZEdsdmJpQm9ZVzVrYkdWUWNtOW5jbVZ6Y3lncElIdDlPMXh1SUNBZ0lDQWdjbVZ4ZFdWemRDNXZiblJwYldWdmRYUWdQU0JtZFc1amRHbHZiaUJvWVc1a2JHVlVhVzFsYjNWMEtDa2dlMzA3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnU0ZSVVVDQmlZWE5wWXlCaGRYUm9aVzUwYVdOaGRHbHZibHh1SUNBZ0lHbG1JQ2hqYjI1bWFXY3VZWFYwYUNrZ2UxeHVJQ0FnSUNBZ2RtRnlJSFZ6WlhKdVlXMWxJRDBnWTI5dVptbG5MbUYxZEdndWRYTmxjbTVoYldVZ2ZId2dKeWM3WEc0Z0lDQWdJQ0IyWVhJZ2NHRnpjM2R2Y21RZ1BTQmpiMjVtYVdjdVlYVjBhQzV3WVhOemQyOXlaQ0I4ZkNBbkp6dGNiaUFnSUNBZ0lISmxjWFZsYzNSSVpXRmtaWEp6TGtGMWRHaHZjbWw2WVhScGIyNGdQU0FuUW1GemFXTWdKeUFySUdKMGIyRW9kWE5sY201aGJXVWdLeUFuT2ljZ0t5QndZWE56ZDI5eVpDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVnhkV1Z6ZEM1dmNHVnVLR052Ym1acFp5NXRaWFJvYjJRdWRHOVZjSEJsY2tOaGMyVW9LU3dnWW5WcGJHUlZVa3dvWTI5dVptbG5MblZ5YkN3Z1kyOXVabWxuTG5CaGNtRnRjeXdnWTI5dVptbG5MbkJoY21GdGMxTmxjbWxoYkdsNlpYSXBMQ0IwY25WbEtUdGNibHh1SUNBZ0lDOHZJRk5sZENCMGFHVWdjbVZ4ZFdWemRDQjBhVzFsYjNWMElHbHVJRTFUWEc0Z0lDQWdjbVZ4ZFdWemRDNTBhVzFsYjNWMElEMGdZMjl1Wm1sbkxuUnBiV1Z2ZFhRN1hHNWNiaUFnSUNBdkx5Qk1hWE4wWlc0Z1ptOXlJSEpsWVdSNUlITjBZWFJsWEc0Z0lDQWdjbVZ4ZFdWemRGdHNiMkZrUlhabGJuUmRJRDBnWm5WdVkzUnBiMjRnYUdGdVpHeGxURzloWkNncElIdGNiaUFnSUNBZ0lHbG1JQ2doY21WeGRXVnpkQ0I4ZkNBb2NtVnhkV1Z6ZEM1eVpXRmtlVk4wWVhSbElDRTlQU0EwSUNZbUlDRjRSRzl0WVdsdUtTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUZSb1pTQnlaWEYxWlhOMElHVnljbTl5WldRZ2IzVjBJR0Z1WkNCM1pTQmthV1J1SjNRZ1oyVjBJR0VnY21WemNHOXVjMlVzSUhSb2FYTWdkMmxzYkNCaVpWeHVJQ0FnSUNBZ0x5OGdhR0Z1Wkd4bFpDQmllU0J2Ym1WeWNtOXlJR2x1YzNSbFlXUmNiaUFnSUNBZ0lDOHZJRmRwZEdnZ2IyNWxJR1Y0WTJWd2RHbHZiam9nY21WeGRXVnpkQ0IwYUdGMElIVnphVzVuSUdacGJHVTZJSEJ5YjNSdlkyOXNMQ0J0YjNOMElHSnliM2R6WlhKelhHNGdJQ0FnSUNBdkx5QjNhV3hzSUhKbGRIVnliaUJ6ZEdGMGRYTWdZWE1nTUNCbGRtVnVJSFJvYjNWbmFDQnBkQ2R6SUdFZ2MzVmpZMlZ6YzJaMWJDQnlaWEYxWlhOMFhHNGdJQ0FnSUNCcFppQW9jbVZ4ZFdWemRDNXpkR0YwZFhNZ1BUMDlJREFnSmlZZ0lTaHlaWEYxWlhOMExuSmxjM0J2Ym5ObFZWSk1JQ1ltSUhKbGNYVmxjM1F1Y21WemNHOXVjMlZWVWt3dWFXNWtaWGhQWmlnblptbHNaVG9uS1NBOVBUMGdNQ2twSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBdkx5QlFjbVZ3WVhKbElIUm9aU0J5WlhOd2IyNXpaVnh1SUNBZ0lDQWdkbUZ5SUhKbGMzQnZibk5sU0dWaFpHVnljeUE5SUNkblpYUkJiR3hTWlhOd2IyNXpaVWhsWVdSbGNuTW5JR2x1SUhKbGNYVmxjM1FnUHlCd1lYSnpaVWhsWVdSbGNuTW9jbVZ4ZFdWemRDNW5aWFJCYkd4U1pYTndiMjV6WlVobFlXUmxjbk1vS1NrZ09pQnVkV3hzTzF4dUlDQWdJQ0FnZG1GeUlISmxjM0J2Ym5ObFJHRjBZU0E5SUNGamIyNW1hV2N1Y21WemNHOXVjMlZVZVhCbElIeDhJR052Ym1acFp5NXlaWE53YjI1elpWUjVjR1VnUFQwOUlDZDBaWGgwSnlBL0lISmxjWFZsYzNRdWNtVnpjRzl1YzJWVVpYaDBJRG9nY21WeGRXVnpkQzV5WlhOd2IyNXpaVHRjYmlBZ0lDQWdJSFpoY2lCeVpYTndiMjV6WlNBOUlIdGNiaUFnSUNBZ0lDQWdaR0YwWVRvZ2NtVnpjRzl1YzJWRVlYUmhMRnh1SUNBZ0lDQWdJQ0F2THlCSlJTQnpaVzVrY3lBeE1qSXpJR2x1YzNSbFlXUWdiMllnTWpBMElDaG9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZZWGhwYjNNdllYaHBiM012YVhOemRXVnpMekl3TVNsY2JpQWdJQ0FnSUNBZ2MzUmhkSFZ6T2lCeVpYRjFaWE4wTG5OMFlYUjFjeUE5UFQwZ01USXlNeUEvSURJd05DQTZJSEpsY1hWbGMzUXVjM1JoZEhWekxGeHVJQ0FnSUNBZ0lDQnpkR0YwZFhOVVpYaDBPaUJ5WlhGMVpYTjBMbk4wWVhSMWN5QTlQVDBnTVRJeU15QS9JQ2RPYnlCRGIyNTBaVzUwSnlBNklISmxjWFZsYzNRdWMzUmhkSFZ6VkdWNGRDeGNiaUFnSUNBZ0lDQWdhR1ZoWkdWeWN6b2djbVZ6Y0c5dWMyVklaV0ZrWlhKekxGeHVJQ0FnSUNBZ0lDQmpiMjVtYVdjNklHTnZibVpwWnl4Y2JpQWdJQ0FnSUNBZ2NtVnhkV1Z6ZERvZ2NtVnhkV1Z6ZEZ4dUlDQWdJQ0FnZlR0Y2JseHVJQ0FnSUNBZ2MyVjBkR3hsS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ3dnY21WemNHOXVjMlVwTzF4dVhHNGdJQ0FnSUNBdkx5QkRiR1ZoYmlCMWNDQnlaWEYxWlhOMFhHNGdJQ0FnSUNCeVpYRjFaWE4wSUQwZ2JuVnNiRHRjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdMeThnU0dGdVpHeGxJR3h2ZHlCc1pYWmxiQ0J1WlhSM2IzSnJJR1Z5Y205eWMxeHVJQ0FnSUhKbGNYVmxjM1F1YjI1bGNuSnZjaUE5SUdaMWJtTjBhVzl1SUdoaGJtUnNaVVZ5Y205eUtDa2dlMXh1SUNBZ0lDQWdMeThnVW1WaGJDQmxjbkp2Y25NZ1lYSmxJR2hwWkdSbGJpQm1jbTl0SUhWeklHSjVJSFJvWlNCaWNtOTNjMlZ5WEc0Z0lDQWdJQ0F2THlCdmJtVnljbTl5SUhOb2IzVnNaQ0J2Ym14NUlHWnBjbVVnYVdZZ2FYUW5jeUJoSUc1bGRIZHZjbXNnWlhKeWIzSmNiaUFnSUNBZ0lISmxhbVZqZENoamNtVmhkR1ZGY25KdmNpZ25UbVYwZDI5eWF5QkZjbkp2Y2ljc0lHTnZibVpwWnl3Z2JuVnNiQ3dnY21WeGRXVnpkQ2twTzF4dVhHNGdJQ0FnSUNBdkx5QkRiR1ZoYmlCMWNDQnlaWEYxWlhOMFhHNGdJQ0FnSUNCeVpYRjFaWE4wSUQwZ2JuVnNiRHRjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdMeThnU0dGdVpHeGxJSFJwYldWdmRYUmNiaUFnSUNCeVpYRjFaWE4wTG05dWRHbHRaVzkxZENBOUlHWjFibU4wYVc5dUlHaGhibVJzWlZScGJXVnZkWFFvS1NCN1hHNGdJQ0FnSUNCeVpXcGxZM1FvWTNKbFlYUmxSWEp5YjNJb0ozUnBiV1Z2ZFhRZ2IyWWdKeUFySUdOdmJtWnBaeTUwYVcxbGIzVjBJQ3NnSjIxeklHVjRZMlZsWkdWa0p5d2dZMjl1Wm1sbkxDQW5SVU5QVGs1QlFrOVNWRVZFSnl4Y2JpQWdJQ0FnSUNBZ2NtVnhkV1Z6ZENrcE8xeHVYRzRnSUNBZ0lDQXZMeUJEYkdWaGJpQjFjQ0J5WlhGMVpYTjBYRzRnSUNBZ0lDQnlaWEYxWlhOMElEMGdiblZzYkR0Y2JpQWdJQ0I5TzF4dVhHNGdJQ0FnTHk4Z1FXUmtJSGh6Y21ZZ2FHVmhaR1Z5WEc0Z0lDQWdMeThnVkdocGN5QnBjeUJ2Ym14NUlHUnZibVVnYVdZZ2NuVnVibWx1WnlCcGJpQmhJSE4wWVc1a1lYSmtJR0p5YjNkelpYSWdaVzUyYVhKdmJtMWxiblF1WEc0Z0lDQWdMeThnVTNCbFkybG1hV05oYkd4NUlHNXZkQ0JwWmlCM1pTZHlaU0JwYmlCaElIZGxZaUIzYjNKclpYSXNJRzl5SUhKbFlXTjBMVzVoZEdsMlpTNWNiaUFnSUNCcFppQW9kWFJwYkhNdWFYTlRkR0Z1WkdGeVpFSnliM2R6WlhKRmJuWW9LU2tnZTF4dUlDQWdJQ0FnZG1GeUlHTnZiMnRwWlhNZ1BTQnlaWEYxYVhKbEtDY3VMeTR1TDJobGJIQmxjbk12WTI5dmEybGxjeWNwTzF4dVhHNGdJQ0FnSUNBdkx5QkJaR1FnZUhOeVppQm9aV0ZrWlhKY2JpQWdJQ0FnSUhaaGNpQjRjM0ptVm1Gc2RXVWdQU0FvWTI5dVptbG5MbmRwZEdoRGNtVmtaVzUwYVdGc2N5QjhmQ0JwYzFWU1RGTmhiV1ZQY21sbmFXNG9ZMjl1Wm1sbkxuVnliQ2twSUNZbUlHTnZibVpwWnk1NGMzSm1RMjl2YTJsbFRtRnRaU0EvWEc0Z0lDQWdJQ0FnSUNBZ1kyOXZhMmxsY3k1eVpXRmtLR052Ym1acFp5NTRjM0ptUTI5dmEybGxUbUZ0WlNrZ09seHVJQ0FnSUNBZ0lDQWdJSFZ1WkdWbWFXNWxaRHRjYmx4dUlDQWdJQ0FnYVdZZ0tIaHpjbVpXWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhGMVpYTjBTR1ZoWkdWeWMxdGpiMjVtYVdjdWVITnlaa2hsWVdSbGNrNWhiV1ZkSUQwZ2VITnlabFpoYkhWbE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklFRmtaQ0JvWldGa1pYSnpJSFJ2SUhSb1pTQnlaWEYxWlhOMFhHNGdJQ0FnYVdZZ0tDZHpaWFJTWlhGMVpYTjBTR1ZoWkdWeUp5QnBiaUJ5WlhGMVpYTjBLU0I3WEc0Z0lDQWdJQ0IxZEdsc2N5NW1iM0pGWVdOb0tISmxjWFZsYzNSSVpXRmtaWEp6TENCbWRXNWpkR2x2YmlCelpYUlNaWEYxWlhOMFNHVmhaR1Z5S0haaGJDd2dhMlY1S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdjbVZ4ZFdWemRFUmhkR0VnUFQwOUlDZDFibVJsWm1sdVpXUW5JQ1ltSUd0bGVTNTBiMHh2ZDJWeVEyRnpaU2dwSUQwOVBTQW5ZMjl1ZEdWdWRDMTBlWEJsSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQzh2SUZKbGJXOTJaU0JEYjI1MFpXNTBMVlI1Y0dVZ2FXWWdaR0YwWVNCcGN5QjFibVJsWm1sdVpXUmNiaUFnSUNBZ0lDQWdJQ0JrWld4bGRHVWdjbVZ4ZFdWemRFaGxZV1JsY25OYmEyVjVYVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QlBkR2hsY25kcGMyVWdZV1JrSUdobFlXUmxjaUIwYnlCMGFHVWdjbVZ4ZFdWemRGeHVJQ0FnSUNBZ0lDQWdJSEpsY1hWbGMzUXVjMlYwVW1WeGRXVnpkRWhsWVdSbGNpaHJaWGtzSUhaaGJDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUVGa1pDQjNhWFJvUTNKbFpHVnVkR2xoYkhNZ2RHOGdjbVZ4ZFdWemRDQnBaaUJ1WldWa1pXUmNiaUFnSUNCcFppQW9ZMjl1Wm1sbkxuZHBkR2hEY21Wa1pXNTBhV0ZzY3lrZ2UxeHVJQ0FnSUNBZ2NtVnhkV1Z6ZEM1M2FYUm9RM0psWkdWdWRHbGhiSE1nUFNCMGNuVmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRUZrWkNCeVpYTndiMjV6WlZSNWNHVWdkRzhnY21WeGRXVnpkQ0JwWmlCdVpXVmtaV1JjYmlBZ0lDQnBaaUFvWTI5dVptbG5MbkpsYzNCdmJuTmxWSGx3WlNrZ2UxeHVJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnY21WeGRXVnpkQzV5WlhOd2IyNXpaVlI1Y0dVZ1BTQmpiMjVtYVdjdWNtVnpjRzl1YzJWVWVYQmxPMXh1SUNBZ0lDQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJQ0FnSUNBdkx5QkZlSEJsWTNSbFpDQkVUMDFGZUdObGNIUnBiMjRnZEdoeWIzZHVJR0o1SUdKeWIzZHpaWEp6SUc1dmRDQmpiMjF3WVhScFlteGxJRmhOVEVoMGRIQlNaWEYxWlhOMElFeGxkbVZzSURJdVhHNGdJQ0FnSUNBZ0lDOHZJRUoxZEN3Z2RHaHBjeUJqWVc0Z1ltVWdjM1Z3Y0hKbGMzTmxaQ0JtYjNJZ0oycHpiMjRuSUhSNWNHVWdZWE1nYVhRZ1kyRnVJR0psSUhCaGNuTmxaQ0JpZVNCa1pXWmhkV3gwSUNkMGNtRnVjMlp2Y20xU1pYTndiMjV6WlNjZ1puVnVZM1JwYjI0dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hqYjI1bWFXY3VjbVZ6Y0c5dWMyVlVlWEJsSUNFOVBTQW5hbk52YmljcElIdGNiaUFnSUNBZ0lDQWdJQ0IwYUhKdmR5QmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnU0dGdVpHeGxJSEJ5YjJkeVpYTnpJR2xtSUc1bFpXUmxaRnh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdZMjl1Wm1sbkxtOXVSRzkzYm14dllXUlFjbTluY21WemN5QTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ2NtVnhkV1Z6ZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0Nkd2NtOW5jbVZ6Y3ljc0lHTnZibVpwWnk1dmJrUnZkMjVzYjJGa1VISnZaM0psYzNNcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklFNXZkQ0JoYkd3Z1luSnZkM05sY25NZ2MzVndjRzl5ZENCMWNHeHZZV1FnWlhabGJuUnpYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQmpiMjVtYVdjdWIyNVZjR3h2WVdSUWNtOW5jbVZ6Y3lBOVBUMGdKMloxYm1OMGFXOXVKeUFtSmlCeVpYRjFaWE4wTG5Wd2JHOWhaQ2tnZTF4dUlDQWdJQ0FnY21WeGRXVnpkQzUxY0d4dllXUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25jSEp2WjNKbGMzTW5MQ0JqYjI1bWFXY3ViMjVWY0d4dllXUlFjbTluY21WemN5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLR052Ym1acFp5NWpZVzVqWld4VWIydGxiaWtnZTF4dUlDQWdJQ0FnTHk4Z1NHRnVaR3hsSUdOaGJtTmxiR3hoZEdsdmJseHVJQ0FnSUNBZ1kyOXVabWxuTG1OaGJtTmxiRlJ2YTJWdUxuQnliMjFwYzJVdWRHaGxiaWhtZFc1amRHbHZiaUJ2YmtOaGJtTmxiR1ZrS0dOaGJtTmxiQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JWEpsY1hWbGMzUXBJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnlaWEYxWlhOMExtRmliM0owS0NrN1hHNGdJQ0FnSUNBZ0lISmxhbVZqZENoallXNWpaV3dwTzF4dUlDQWdJQ0FnSUNBdkx5QkRiR1ZoYmlCMWNDQnlaWEYxWlhOMFhHNGdJQ0FnSUNBZ0lISmxjWFZsYzNRZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tISmxjWFZsYzNSRVlYUmhJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lISmxjWFZsYzNSRVlYUmhJRDBnYm5Wc2JEdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QlRaVzVrSUhSb1pTQnlaWEYxWlhOMFhHNGdJQ0FnY21WeGRXVnpkQzV6Wlc1a0tISmxjWFZsYzNSRVlYUmhLVHRjYmlBZ2ZTazdYRzU5TzF4dUlpd2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNTJZWElnZFhScGJITWdQU0J5WlhGMWFYSmxLQ2N1TDNWMGFXeHpKeWs3WEc1MllYSWdZbWx1WkNBOUlISmxjWFZwY21Vb0p5NHZhR1ZzY0dWeWN5OWlhVzVrSnlrN1hHNTJZWElnUVhocGIzTWdQU0J5WlhGMWFYSmxLQ2N1TDJOdmNtVXZRWGhwYjNNbktUdGNiblpoY2lCa1pXWmhkV3gwY3lBOUlISmxjWFZwY21Vb0p5NHZaR1ZtWVhWc2RITW5LVHRjYmx4dUx5b3FYRzRnS2lCRGNtVmhkR1VnWVc0Z2FXNXpkR0Z1WTJVZ2IyWWdRWGhwYjNOY2JpQXFYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnWkdWbVlYVnNkRU52Ym1acFp5QlVhR1VnWkdWbVlYVnNkQ0JqYjI1bWFXY2dabTl5SUhSb1pTQnBibk4wWVc1alpWeHVJQ29nUUhKbGRIVnliaUI3UVhocGIzTjlJRUVnYm1WM0lHbHVjM1JoYm1ObElHOW1JRUY0YVc5elhHNGdLaTljYm1aMWJtTjBhVzl1SUdOeVpXRjBaVWx1YzNSaGJtTmxLR1JsWm1GMWJIUkRiMjVtYVdjcElIdGNiaUFnZG1GeUlHTnZiblJsZUhRZ1BTQnVaWGNnUVhocGIzTW9aR1ZtWVhWc2RFTnZibVpwWnlrN1hHNGdJSFpoY2lCcGJuTjBZVzVqWlNBOUlHSnBibVFvUVhocGIzTXVjSEp2ZEc5MGVYQmxMbkpsY1hWbGMzUXNJR052Ym5SbGVIUXBPMXh1WEc0Z0lDOHZJRU52Y0hrZ1lYaHBiM011Y0hKdmRHOTBlWEJsSUhSdklHbHVjM1JoYm1ObFhHNGdJSFYwYVd4ekxtVjRkR1Z1WkNocGJuTjBZVzVqWlN3Z1FYaHBiM011Y0hKdmRHOTBlWEJsTENCamIyNTBaWGgwS1R0Y2JseHVJQ0F2THlCRGIzQjVJR052Ym5SbGVIUWdkRzhnYVc1emRHRnVZMlZjYmlBZ2RYUnBiSE11WlhoMFpXNWtLR2x1YzNSaGJtTmxMQ0JqYjI1MFpYaDBLVHRjYmx4dUlDQnlaWFIxY200Z2FXNXpkR0Z1WTJVN1hHNTlYRzVjYmk4dklFTnlaV0YwWlNCMGFHVWdaR1ZtWVhWc2RDQnBibk4wWVc1alpTQjBieUJpWlNCbGVIQnZjblJsWkZ4dWRtRnlJR0Y0YVc5eklEMGdZM0psWVhSbFNXNXpkR0Z1WTJVb1pHVm1ZWFZzZEhNcE8xeHVYRzR2THlCRmVIQnZjMlVnUVhocGIzTWdZMnhoYzNNZ2RHOGdZV3hzYjNjZ1kyeGhjM01nYVc1b1pYSnBkR0Z1WTJWY2JtRjRhVzl6TGtGNGFXOXpJRDBnUVhocGIzTTdYRzVjYmk4dklFWmhZM1J2Y25rZ1ptOXlJR055WldGMGFXNW5JRzVsZHlCcGJuTjBZVzVqWlhOY2JtRjRhVzl6TG1OeVpXRjBaU0E5SUdaMWJtTjBhVzl1SUdOeVpXRjBaU2hwYm5OMFlXNWpaVU52Ym1acFp5a2dlMXh1SUNCeVpYUjFjbTRnWTNKbFlYUmxTVzV6ZEdGdVkyVW9kWFJwYkhNdWJXVnlaMlVvWkdWbVlYVnNkSE1zSUdsdWMzUmhibU5sUTI5dVptbG5LU2s3WEc1OU8xeHVYRzR2THlCRmVIQnZjMlVnUTJGdVkyVnNJQ1lnUTJGdVkyVnNWRzlyWlc1Y2JtRjRhVzl6TGtOaGJtTmxiQ0E5SUhKbGNYVnBjbVVvSnk0dlkyRnVZMlZzTDBOaGJtTmxiQ2NwTzF4dVlYaHBiM011UTJGdVkyVnNWRzlyWlc0Z1BTQnlaWEYxYVhKbEtDY3VMMk5oYm1ObGJDOURZVzVqWld4VWIydGxiaWNwTzF4dVlYaHBiM011YVhORFlXNWpaV3dnUFNCeVpYRjFhWEpsS0NjdUwyTmhibU5sYkM5cGMwTmhibU5sYkNjcE8xeHVYRzR2THlCRmVIQnZjMlVnWVd4c0wzTndjbVZoWkZ4dVlYaHBiM011WVd4c0lEMGdablZ1WTNScGIyNGdZV3hzS0hCeWIyMXBjMlZ6S1NCN1hHNGdJSEpsZEhWeWJpQlFjbTl0YVhObExtRnNiQ2h3Y205dGFYTmxjeWs3WEc1OU8xeHVZWGhwYjNNdWMzQnlaV0ZrSUQwZ2NtVnhkV2x5WlNnbkxpOW9aV3h3WlhKekwzTndjbVZoWkNjcE8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR0Y0YVc5ek8xeHVYRzR2THlCQmJHeHZkeUIxYzJVZ2IyWWdaR1ZtWVhWc2RDQnBiWEJ2Y25RZ2MzbHVkR0Y0SUdsdUlGUjVjR1ZUWTNKcGNIUmNibTF2WkhWc1pTNWxlSEJ2Y25SekxtUmxabUYxYkhRZ1BTQmhlR2x2Y3p0Y2JpSXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVMeW9xWEc0Z0tpQkJJR0JEWVc1alpXeGdJR2x6SUdGdUlHOWlhbVZqZENCMGFHRjBJR2x6SUhSb2NtOTNiaUIzYUdWdUlHRnVJRzl3WlhKaGRHbHZiaUJwY3lCallXNWpaV3hsWkM1Y2JpQXFYRzRnS2lCQVkyeGhjM05jYmlBcUlFQndZWEpoYlNCN2MzUnlhVzVuUFgwZ2JXVnpjMkZuWlNCVWFHVWdiV1Z6YzJGblpTNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1EyRnVZMlZzS0cxbGMzTmhaMlVwSUh0Y2JpQWdkR2hwY3k1dFpYTnpZV2RsSUQwZ2JXVnpjMkZuWlR0Y2JuMWNibHh1UTJGdVkyVnNMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaeUE5SUdaMWJtTjBhVzl1SUhSdlUzUnlhVzVuS0NrZ2UxeHVJQ0J5WlhSMWNtNGdKME5oYm1ObGJDY2dLeUFvZEdocGN5NXRaWE56WVdkbElEOGdKem9nSnlBcklIUm9hWE11YldWemMyRm5aU0E2SUNjbktUdGNibjA3WEc1Y2JrTmhibU5sYkM1d2NtOTBiM1I1Y0dVdVgxOURRVTVEUlV4Zlh5QTlJSFJ5ZFdVN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdRMkZ1WTJWc08xeHVJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzUyWVhJZ1EyRnVZMlZzSUQwZ2NtVnhkV2x5WlNnbkxpOURZVzVqWld3bktUdGNibHh1THlvcVhHNGdLaUJCSUdCRFlXNWpaV3hVYjJ0bGJtQWdhWE1nWVc0Z2IySnFaV04wSUhSb1lYUWdZMkZ1SUdKbElIVnpaV1FnZEc4Z2NtVnhkV1Z6ZENCallXNWpaV3hzWVhScGIyNGdiMllnWVc0Z2IzQmxjbUYwYVc5dUxseHVJQ3BjYmlBcUlFQmpiR0Z6YzF4dUlDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdaWGhsWTNWMGIzSWdWR2hsSUdWNFpXTjFkRzl5SUdaMWJtTjBhVzl1TGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJEWVc1alpXeFViMnRsYmlobGVHVmpkWFJ2Y2lrZ2UxeHVJQ0JwWmlBb2RIbHdaVzltSUdWNFpXTjFkRzl5SUNFOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWduWlhobFkzVjBiM0lnYlhWemRDQmlaU0JoSUdaMWJtTjBhVzl1TGljcE8xeHVJQ0I5WEc1Y2JpQWdkbUZ5SUhKbGMyOXNkbVZRY205dGFYTmxPMXh1SUNCMGFHbHpMbkJ5YjIxcGMyVWdQU0J1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2YmlCd2NtOXRhWE5sUlhobFkzVjBiM0lvY21WemIyeDJaU2tnZTF4dUlDQWdJSEpsYzI5c2RtVlFjbTl0YVhObElEMGdjbVZ6YjJ4MlpUdGNiaUFnZlNrN1hHNWNiaUFnZG1GeUlIUnZhMlZ1SUQwZ2RHaHBjenRjYmlBZ1pYaGxZM1YwYjNJb1puVnVZM1JwYjI0Z1kyRnVZMlZzS0cxbGMzTmhaMlVwSUh0Y2JpQWdJQ0JwWmlBb2RHOXJaVzR1Y21WaGMyOXVLU0I3WEc0Z0lDQWdJQ0F2THlCRFlXNWpaV3hzWVhScGIyNGdhR0Z6SUdGc2NtVmhaSGtnWW1WbGJpQnlaWEYxWlhOMFpXUmNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYjJ0bGJpNXlaV0Z6YjI0Z1BTQnVaWGNnUTJGdVkyVnNLRzFsYzNOaFoyVXBPMXh1SUNBZ0lISmxjMjlzZG1WUWNtOXRhWE5sS0hSdmEyVnVMbkpsWVhOdmJpazdYRzRnSUgwcE8xeHVmVnh1WEc0dktpcGNiaUFxSUZSb2NtOTNjeUJoSUdCRFlXNWpaV3hnSUdsbUlHTmhibU5sYkd4aGRHbHZiaUJvWVhNZ1ltVmxiaUJ5WlhGMVpYTjBaV1F1WEc0Z0tpOWNia05oYm1ObGJGUnZhMlZ1TG5CeWIzUnZkSGx3WlM1MGFISnZkMGxtVW1WeGRXVnpkR1ZrSUQwZ1puVnVZM1JwYjI0Z2RHaHliM2RKWmxKbGNYVmxjM1JsWkNncElIdGNiaUFnYVdZZ0tIUm9hWE11Y21WaGMyOXVLU0I3WEc0Z0lDQWdkR2h5YjNjZ2RHaHBjeTV5WldGemIyNDdYRzRnSUgxY2JuMDdYRzVjYmk4cUtseHVJQ29nVW1WMGRYSnVjeUJoYmlCdlltcGxZM1FnZEdoaGRDQmpiMjUwWVdsdWN5QmhJRzVsZHlCZ1EyRnVZMlZzVkc5clpXNWdJR0Z1WkNCaElHWjFibU4wYVc5dUlIUm9ZWFFzSUhkb1pXNGdZMkZzYkdWa0xGeHVJQ29nWTJGdVkyVnNjeUIwYUdVZ1lFTmhibU5sYkZSdmEyVnVZQzVjYmlBcUwxeHVRMkZ1WTJWc1ZHOXJaVzR1YzI5MWNtTmxJRDBnWm5WdVkzUnBiMjRnYzI5MWNtTmxLQ2tnZTF4dUlDQjJZWElnWTJGdVkyVnNPMXh1SUNCMllYSWdkRzlyWlc0Z1BTQnVaWGNnUTJGdVkyVnNWRzlyWlc0b1puVnVZM1JwYjI0Z1pYaGxZM1YwYjNJb1l5a2dlMXh1SUNBZ0lHTmhibU5sYkNBOUlHTTdYRzRnSUgwcE8xeHVJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lIUnZhMlZ1T2lCMGIydGxiaXhjYmlBZ0lDQmpZVzVqWld3NklHTmhibU5sYkZ4dUlDQjlPMXh1ZlR0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQkRZVzVqWld4VWIydGxianRjYmlJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlCcGMwTmhibU5sYkNoMllXeDFaU2tnZTF4dUlDQnlaWFIxY200Z0lTRW9kbUZzZFdVZ0ppWWdkbUZzZFdVdVgxOURRVTVEUlV4Zlh5azdYRzU5TzF4dUlpd2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNTJZWElnWkdWbVlYVnNkSE1nUFNCeVpYRjFhWEpsS0NjdUx5NHVMMlJsWm1GMWJIUnpKeWs3WEc1MllYSWdkWFJwYkhNZ1BTQnlaWEYxYVhKbEtDY3VMeTR1TDNWMGFXeHpKeWs3WEc1MllYSWdTVzUwWlhKalpYQjBiM0pOWVc1aFoyVnlJRDBnY21WeGRXbHlaU2duTGk5SmJuUmxjbU5sY0hSdmNrMWhibUZuWlhJbktUdGNiblpoY2lCa2FYTndZWFJqYUZKbGNYVmxjM1FnUFNCeVpYRjFhWEpsS0NjdUwyUnBjM0JoZEdOb1VtVnhkV1Z6ZENjcE8xeHVYRzR2S2lwY2JpQXFJRU55WldGMFpTQmhJRzVsZHlCcGJuTjBZVzVqWlNCdlppQkJlR2x2YzF4dUlDcGNiaUFxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0JwYm5OMFlXNWpaVU52Ym1acFp5QlVhR1VnWkdWbVlYVnNkQ0JqYjI1bWFXY2dabTl5SUhSb1pTQnBibk4wWVc1alpWeHVJQ292WEc1bWRXNWpkR2x2YmlCQmVHbHZjeWhwYm5OMFlXNWpaVU52Ym1acFp5a2dlMXh1SUNCMGFHbHpMbVJsWm1GMWJIUnpJRDBnYVc1emRHRnVZMlZEYjI1bWFXYzdYRzRnSUhSb2FYTXVhVzUwWlhKalpYQjBiM0p6SUQwZ2UxeHVJQ0FnSUhKbGNYVmxjM1E2SUc1bGR5QkpiblJsY21ObGNIUnZjazFoYm1GblpYSW9LU3hjYmlBZ0lDQnlaWE53YjI1elpUb2dibVYzSUVsdWRHVnlZMlZ3ZEc5eVRXRnVZV2RsY2lncFhHNGdJSDA3WEc1OVhHNWNiaThxS2x4dUlDb2dSR2x6Y0dGMFkyZ2dZU0J5WlhGMVpYTjBYRzRnS2x4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHTnZibVpwWnlCVWFHVWdZMjl1Wm1sbklITndaV05wWm1saklHWnZjaUIwYUdseklISmxjWFZsYzNRZ0tHMWxjbWRsWkNCM2FYUm9JSFJvYVhNdVpHVm1ZWFZzZEhNcFhHNGdLaTljYmtGNGFXOXpMbkJ5YjNSdmRIbHdaUzV5WlhGMVpYTjBJRDBnWm5WdVkzUnBiMjRnY21WeGRXVnpkQ2hqYjI1bWFXY3BJSHRjYmlBZ0x5cGxjMnhwYm5RZ2JtOHRjR0Z5WVcwdGNtVmhjM05wWjI0Nk1Db3ZYRzRnSUM4dklFRnNiRzkzSUdadmNpQmhlR2x2Y3lnblpYaGhiWEJzWlM5MWNtd25XeXdnWTI5dVptbG5YU2tnWVNCc1lTQm1aWFJqYUNCQlVFbGNiaUFnYVdZZ0tIUjVjR1Z2WmlCamIyNW1hV2NnUFQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ1kyOXVabWxuSUQwZ2RYUnBiSE11YldWeVoyVW9lMXh1SUNBZ0lDQWdkWEpzT2lCaGNtZDFiV1Z1ZEhOYk1GMWNiaUFnSUNCOUxDQmhjbWQxYldWdWRITmJNVjBwTzF4dUlDQjlYRzVjYmlBZ1kyOXVabWxuSUQwZ2RYUnBiSE11YldWeVoyVW9aR1ZtWVhWc2RITXNJSHR0WlhSb2IyUTZJQ2RuWlhRbmZTd2dkR2hwY3k1a1pXWmhkV3gwY3l3Z1kyOXVabWxuS1R0Y2JpQWdZMjl1Wm1sbkxtMWxkR2h2WkNBOUlHTnZibVpwWnk1dFpYUm9iMlF1ZEc5TWIzZGxja05oYzJVb0tUdGNibHh1SUNBdkx5QkliMjlySUhWd0lHbHVkR1Z5WTJWd2RHOXljeUJ0YVdSa2JHVjNZWEpsWEc0Z0lIWmhjaUJqYUdGcGJpQTlJRnRrYVhOd1lYUmphRkpsY1hWbGMzUXNJSFZ1WkdWbWFXNWxaRjA3WEc0Z0lIWmhjaUJ3Y205dGFYTmxJRDBnVUhKdmJXbHpaUzV5WlhOdmJIWmxLR052Ym1acFp5azdYRzVjYmlBZ2RHaHBjeTVwYm5SbGNtTmxjSFJ2Y25NdWNtVnhkV1Z6ZEM1bWIzSkZZV05vS0daMWJtTjBhVzl1SUhWdWMyaHBablJTWlhGMVpYTjBTVzUwWlhKalpYQjBiM0p6S0dsdWRHVnlZMlZ3ZEc5eUtTQjdYRzRnSUNBZ1kyaGhhVzR1ZFc1emFHbG1kQ2hwYm5SbGNtTmxjSFJ2Y2k1bWRXeG1hV3hzWldRc0lHbHVkR1Z5WTJWd2RHOXlMbkpsYW1WamRHVmtLVHRjYmlBZ2ZTazdYRzVjYmlBZ2RHaHBjeTVwYm5SbGNtTmxjSFJ2Y25NdWNtVnpjRzl1YzJVdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlCd2RYTm9VbVZ6Y0c5dWMyVkpiblJsY21ObGNIUnZjbk1vYVc1MFpYSmpaWEIwYjNJcElIdGNiaUFnSUNCamFHRnBiaTV3ZFhOb0tHbHVkR1Z5WTJWd2RHOXlMbVoxYkdacGJHeGxaQ3dnYVc1MFpYSmpaWEIwYjNJdWNtVnFaV04wWldRcE8xeHVJQ0I5S1R0Y2JseHVJQ0IzYUdsc1pTQW9ZMmhoYVc0dWJHVnVaM1JvS1NCN1hHNGdJQ0FnY0hKdmJXbHpaU0E5SUhCeWIyMXBjMlV1ZEdobGJpaGphR0ZwYmk1emFHbG1kQ2dwTENCamFHRnBiaTV6YUdsbWRDZ3BLVHRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJ3Y205dGFYTmxPMXh1ZlR0Y2JseHVMeThnVUhKdmRtbGtaU0JoYkdsaGMyVnpJR1p2Y2lCemRYQndiM0owWldRZ2NtVnhkV1Z6ZENCdFpYUm9iMlJ6WEc1MWRHbHNjeTVtYjNKRllXTm9LRnNuWkdWc1pYUmxKeXdnSjJkbGRDY3NJQ2RvWldGa0p5d2dKMjl3ZEdsdmJuTW5YU3dnWm5WdVkzUnBiMjRnWm05eVJXRmphRTFsZEdodlpFNXZSR0YwWVNodFpYUm9iMlFwSUh0Y2JpQWdMeXBsYzJ4cGJuUWdablZ1WXkxdVlXMWxjem93S2k5Y2JpQWdRWGhwYjNNdWNISnZkRzkwZVhCbFcyMWxkR2h2WkYwZ1BTQm1kVzVqZEdsdmJpaDFjbXdzSUdOdmJtWnBaeWtnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5KbGNYVmxjM1FvZFhScGJITXViV1Z5WjJVb1kyOXVabWxuSUh4OElIdDlMQ0I3WEc0Z0lDQWdJQ0J0WlhSb2IyUTZJRzFsZEdodlpDeGNiaUFnSUNBZ0lIVnliRG9nZFhKc1hHNGdJQ0FnZlNrcE8xeHVJQ0I5TzF4dWZTazdYRzVjYm5WMGFXeHpMbVp2Y2tWaFkyZ29XeWR3YjNOMEp5d2dKM0IxZENjc0lDZHdZWFJqYUNkZExDQm1kVzVqZEdsdmJpQm1iM0pGWVdOb1RXVjBhRzlrVjJsMGFFUmhkR0VvYldWMGFHOWtLU0I3WEc0Z0lDOHFaWE5zYVc1MElHWjFibU10Ym1GdFpYTTZNQ292WEc0Z0lFRjRhVzl6TG5CeWIzUnZkSGx3WlZ0dFpYUm9iMlJkSUQwZ1puVnVZM1JwYjI0b2RYSnNMQ0JrWVhSaExDQmpiMjVtYVdjcElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXlaWEYxWlhOMEtIVjBhV3h6TG0xbGNtZGxLR052Ym1acFp5QjhmQ0I3ZlN3Z2UxeHVJQ0FnSUNBZ2JXVjBhRzlrT2lCdFpYUm9iMlFzWEc0Z0lDQWdJQ0IxY213NklIVnliQ3hjYmlBZ0lDQWdJR1JoZEdFNklHUmhkR0ZjYmlBZ0lDQjlLU2s3WEc0Z0lIMDdYRzU5S1R0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQkJlR2x2Y3p0Y2JpSXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVkbUZ5SUhWMGFXeHpJRDBnY21WeGRXbHlaU2duTGk4dUxpOTFkR2xzY3ljcE8xeHVYRzVtZFc1amRHbHZiaUJKYm5SbGNtTmxjSFJ2Y2sxaGJtRm5aWElvS1NCN1hHNGdJSFJvYVhNdWFHRnVaR3hsY25NZ1BTQmJYVHRjYm4xY2JseHVMeW9xWEc0Z0tpQkJaR1FnWVNCdVpYY2dhVzUwWlhKalpYQjBiM0lnZEc4Z2RHaGxJSE4wWVdOclhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ1puVnNabWxzYkdWa0lGUm9aU0JtZFc1amRHbHZiaUIwYnlCb1lXNWtiR1VnWUhSb1pXNWdJR1p2Y2lCaElHQlFjbTl0YVhObFlGeHVJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnY21WcVpXTjBaV1FnVkdobElHWjFibU4wYVc5dUlIUnZJR2hoYm1Sc1pTQmdjbVZxWldOMFlDQm1iM0lnWVNCZ1VISnZiV2x6WldCY2JpQXFYRzRnS2lCQWNtVjBkWEp1SUh0T2RXMWlaWEo5SUVGdUlFbEVJSFZ6WldRZ2RHOGdjbVZ0YjNabElHbHVkR1Z5WTJWd2RHOXlJR3hoZEdWeVhHNGdLaTljYmtsdWRHVnlZMlZ3ZEc5eVRXRnVZV2RsY2k1d2NtOTBiM1I1Y0dVdWRYTmxJRDBnWm5WdVkzUnBiMjRnZFhObEtHWjFiR1pwYkd4bFpDd2djbVZxWldOMFpXUXBJSHRjYmlBZ2RHaHBjeTVvWVc1a2JHVnljeTV3ZFhOb0tIdGNiaUFnSUNCbWRXeG1hV3hzWldRNklHWjFiR1pwYkd4bFpDeGNiaUFnSUNCeVpXcGxZM1JsWkRvZ2NtVnFaV04wWldSY2JpQWdmU2s3WEc0Z0lISmxkSFZ5YmlCMGFHbHpMbWhoYm1Sc1pYSnpMbXhsYm1kMGFDQXRJREU3WEc1OU8xeHVYRzR2S2lwY2JpQXFJRkpsYlc5MlpTQmhiaUJwYm5SbGNtTmxjSFJ2Y2lCbWNtOXRJSFJvWlNCemRHRmphMXh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQnBaQ0JVYUdVZ1NVUWdkR2hoZENCM1lYTWdjbVYwZFhKdVpXUWdZbmtnWUhWelpXQmNiaUFxTDF4dVNXNTBaWEpqWlhCMGIzSk5ZVzVoWjJWeUxuQnliM1J2ZEhsd1pTNWxhbVZqZENBOUlHWjFibU4wYVc5dUlHVnFaV04wS0dsa0tTQjdYRzRnSUdsbUlDaDBhR2x6TG1oaGJtUnNaWEp6VzJsa1hTa2dlMXh1SUNBZ0lIUm9hWE11YUdGdVpHeGxjbk5iYVdSZElEMGdiblZzYkR0Y2JpQWdmVnh1ZlR0Y2JseHVMeW9xWEc0Z0tpQkpkR1Z5WVhSbElHOTJaWElnWVd4c0lIUm9aU0J5WldkcGMzUmxjbVZrSUdsdWRHVnlZMlZ3ZEc5eWMxeHVJQ3BjYmlBcUlGUm9hWE1nYldWMGFHOWtJR2x6SUhCaGNuUnBZM1ZzWVhKc2VTQjFjMlZtZFd3Z1ptOXlJSE5yYVhCd2FXNW5JRzkyWlhJZ1lXNTVYRzRnS2lCcGJuUmxjbU5sY0hSdmNuTWdkR2hoZENCdFlYa2dhR0YyWlNCaVpXTnZiV1VnWUc1MWJHeGdJR05oYkd4cGJtY2dZR1ZxWldOMFlDNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQm1iaUJVYUdVZ1puVnVZM1JwYjI0Z2RHOGdZMkZzYkNCbWIzSWdaV0ZqYUNCcGJuUmxjbU5sY0hSdmNseHVJQ292WEc1SmJuUmxjbU5sY0hSdmNrMWhibUZuWlhJdWNISnZkRzkwZVhCbExtWnZja1ZoWTJnZ1BTQm1kVzVqZEdsdmJpQm1iM0pGWVdOb0tHWnVLU0I3WEc0Z0lIVjBhV3h6TG1admNrVmhZMmdvZEdocGN5NW9ZVzVrYkdWeWN5d2dablZ1WTNScGIyNGdabTl5UldGamFFaGhibVJzWlhJb2FDa2dlMXh1SUNBZ0lHbG1JQ2hvSUNFOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNCbWJpaG9LVHRjYmlBZ0lDQjlYRzRnSUgwcE8xeHVmVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCSmJuUmxjbU5sY0hSdmNrMWhibUZuWlhJN1hHNGlMQ0luZFhObElITjBjbWxqZENjN1hHNWNiblpoY2lCbGJtaGhibU5sUlhKeWIzSWdQU0J5WlhGMWFYSmxLQ2N1TDJWdWFHRnVZMlZGY25KdmNpY3BPMXh1WEc0dktpcGNiaUFxSUVOeVpXRjBaU0JoYmlCRmNuSnZjaUIzYVhSb0lIUm9aU0J6Y0dWamFXWnBaV1FnYldWemMyRm5aU3dnWTI5dVptbG5MQ0JsY25KdmNpQmpiMlJsTENCeVpYRjFaWE4wSUdGdVpDQnlaWE53YjI1elpTNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2JXVnpjMkZuWlNCVWFHVWdaWEp5YjNJZ2JXVnpjMkZuWlM1Y2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQmpiMjVtYVdjZ1ZHaGxJR052Ym1acFp5NWNiaUFxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JiWTI5a1pWMGdWR2hsSUdWeWNtOXlJR052WkdVZ0tHWnZjaUJsZUdGdGNHeGxMQ0FuUlVOUFRrNUJRazlTVkVWRUp5a3VYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnVzNKbGNYVmxjM1JkSUZSb1pTQnlaWEYxWlhOMExseHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRnR5WlhOd2IyNXpaVjBnVkdobElISmxjM0J2Ym5ObExseHVJQ29nUUhKbGRIVnlibk1nZTBWeWNtOXlmU0JVYUdVZ1kzSmxZWFJsWkNCbGNuSnZjaTVjYmlBcUwxeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpQmpjbVZoZEdWRmNuSnZjaWh0WlhOellXZGxMQ0JqYjI1bWFXY3NJR052WkdVc0lISmxjWFZsYzNRc0lISmxjM0J2Ym5ObEtTQjdYRzRnSUhaaGNpQmxjbkp2Y2lBOUlHNWxkeUJGY25KdmNpaHRaWE56WVdkbEtUdGNiaUFnY21WMGRYSnVJR1Z1YUdGdVkyVkZjbkp2Y2lobGNuSnZjaXdnWTI5dVptbG5MQ0JqYjJSbExDQnlaWEYxWlhOMExDQnlaWE53YjI1elpTazdYRzU5TzF4dUlpd2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNTJZWElnZFhScGJITWdQU0J5WlhGMWFYSmxLQ2N1THk0dUwzVjBhV3h6SnlrN1hHNTJZWElnZEhKaGJuTm1iM0p0UkdGMFlTQTlJSEpsY1hWcGNtVW9KeTR2ZEhKaGJuTm1iM0p0UkdGMFlTY3BPMXh1ZG1GeUlHbHpRMkZ1WTJWc0lEMGdjbVZ4ZFdseVpTZ25MaTR2WTJGdVkyVnNMMmx6UTJGdVkyVnNKeWs3WEc1MllYSWdaR1ZtWVhWc2RITWdQU0J5WlhGMWFYSmxLQ2N1TGk5a1pXWmhkV3gwY3ljcE8xeHVkbUZ5SUdselFXSnpiMngxZEdWVlVrd2dQU0J5WlhGMWFYSmxLQ2N1THk0dUwyaGxiSEJsY25NdmFYTkJZbk52YkhWMFpWVlNUQ2NwTzF4dWRtRnlJR052YldKcGJtVlZVa3h6SUQwZ2NtVnhkV2x5WlNnbkxpOHVMaTlvWld4d1pYSnpMMk52YldKcGJtVlZVa3h6SnlrN1hHNWNiaThxS2x4dUlDb2dWR2h5YjNkeklHRWdZRU5oYm1ObGJHQWdhV1lnWTJGdVkyVnNiR0YwYVc5dUlHaGhjeUJpWldWdUlISmxjWFZsYzNSbFpDNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z2RHaHliM2RKWmtOaGJtTmxiR3hoZEdsdmJsSmxjWFZsYzNSbFpDaGpiMjVtYVdjcElIdGNiaUFnYVdZZ0tHTnZibVpwWnk1allXNWpaV3hVYjJ0bGJpa2dlMXh1SUNBZ0lHTnZibVpwWnk1allXNWpaV3hVYjJ0bGJpNTBhSEp2ZDBsbVVtVnhkV1Z6ZEdWa0tDazdYRzRnSUgxY2JuMWNibHh1THlvcVhHNGdLaUJFYVhOd1lYUmphQ0JoSUhKbGNYVmxjM1FnZEc4Z2RHaGxJSE5sY25abGNpQjFjMmx1WnlCMGFHVWdZMjl1Wm1sbmRYSmxaQ0JoWkdGd2RHVnlMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQmpiMjVtYVdjZ1ZHaGxJR052Ym1acFp5QjBhR0YwSUdseklIUnZJR0psSUhWelpXUWdabTl5SUhSb1pTQnlaWEYxWlhOMFhHNGdLaUJBY21WMGRYSnVjeUI3VUhKdmJXbHpaWDBnVkdobElGQnliMjFwYzJVZ2RHOGdZbVVnWm5Wc1ptbHNiR1ZrWEc0Z0tpOWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdaR2x6Y0dGMFkyaFNaWEYxWlhOMEtHTnZibVpwWnlrZ2UxeHVJQ0IwYUhKdmQwbG1RMkZ1WTJWc2JHRjBhVzl1VW1WeGRXVnpkR1ZrS0dOdmJtWnBaeWs3WEc1Y2JpQWdMeThnVTNWd2NHOXlkQ0JpWVhObFZWSk1JR052Ym1acFoxeHVJQ0JwWmlBb1kyOXVabWxuTG1KaGMyVlZVa3dnSmlZZ0lXbHpRV0p6YjJ4MWRHVlZVa3dvWTI5dVptbG5MblZ5YkNrcElIdGNiaUFnSUNCamIyNW1hV2N1ZFhKc0lEMGdZMjl0WW1sdVpWVlNUSE1vWTI5dVptbG5MbUpoYzJWVlVrd3NJR052Ym1acFp5NTFjbXdwTzF4dUlDQjlYRzVjYmlBZ0x5OGdSVzV6ZFhKbElHaGxZV1JsY25NZ1pYaHBjM1JjYmlBZ1kyOXVabWxuTG1obFlXUmxjbk1nUFNCamIyNW1hV2N1YUdWaFpHVnljeUI4ZkNCN2ZUdGNibHh1SUNBdkx5QlVjbUZ1YzJadmNtMGdjbVZ4ZFdWemRDQmtZWFJoWEc0Z0lHTnZibVpwWnk1a1lYUmhJRDBnZEhKaGJuTm1iM0p0UkdGMFlTaGNiaUFnSUNCamIyNW1hV2N1WkdGMFlTeGNiaUFnSUNCamIyNW1hV2N1YUdWaFpHVnljeXhjYmlBZ0lDQmpiMjVtYVdjdWRISmhibk5tYjNKdFVtVnhkV1Z6ZEZ4dUlDQXBPMXh1WEc0Z0lDOHZJRVpzWVhSMFpXNGdhR1ZoWkdWeWMxeHVJQ0JqYjI1bWFXY3VhR1ZoWkdWeWN5QTlJSFYwYVd4ekxtMWxjbWRsS0Z4dUlDQWdJR052Ym1acFp5NW9aV0ZrWlhKekxtTnZiVzF2YmlCOGZDQjdmU3hjYmlBZ0lDQmpiMjVtYVdjdWFHVmhaR1Z5YzF0amIyNW1hV2N1YldWMGFHOWtYU0I4ZkNCN2ZTeGNiaUFnSUNCamIyNW1hV2N1YUdWaFpHVnljeUI4ZkNCN2ZWeHVJQ0FwTzF4dVhHNGdJSFYwYVd4ekxtWnZja1ZoWTJnb1hHNGdJQ0FnV3lka1pXeGxkR1VuTENBbloyVjBKeXdnSjJobFlXUW5MQ0FuY0c5emRDY3NJQ2R3ZFhRbkxDQW5jR0YwWTJnbkxDQW5ZMjl0Ylc5dUoxMHNYRzRnSUNBZ1puVnVZM1JwYjI0Z1kyeGxZVzVJWldGa1pYSkRiMjVtYVdjb2JXVjBhRzlrS1NCN1hHNGdJQ0FnSUNCa1pXeGxkR1VnWTI5dVptbG5MbWhsWVdSbGNuTmJiV1YwYUc5a1hUdGNiaUFnSUNCOVhHNGdJQ2s3WEc1Y2JpQWdkbUZ5SUdGa1lYQjBaWElnUFNCamIyNW1hV2N1WVdSaGNIUmxjaUI4ZkNCa1pXWmhkV3gwY3k1aFpHRndkR1Z5TzF4dVhHNGdJSEpsZEhWeWJpQmhaR0Z3ZEdWeUtHTnZibVpwWnlrdWRHaGxiaWhtZFc1amRHbHZiaUJ2YmtGa1lYQjBaWEpTWlhOdmJIVjBhVzl1S0hKbGMzQnZibk5sS1NCN1hHNGdJQ0FnZEdoeWIzZEpaa05oYm1ObGJHeGhkR2x2YmxKbGNYVmxjM1JsWkNoamIyNW1hV2NwTzF4dVhHNGdJQ0FnTHk4Z1ZISmhibk5tYjNKdElISmxjM0J2Ym5ObElHUmhkR0ZjYmlBZ0lDQnlaWE53YjI1elpTNWtZWFJoSUQwZ2RISmhibk5tYjNKdFJHRjBZU2hjYmlBZ0lDQWdJSEpsYzNCdmJuTmxMbVJoZEdFc1hHNGdJQ0FnSUNCeVpYTndiMjV6WlM1b1pXRmtaWEp6TEZ4dUlDQWdJQ0FnWTI5dVptbG5MblJ5WVc1elptOXliVkpsYzNCdmJuTmxYRzRnSUNBZ0tUdGNibHh1SUNBZ0lISmxkSFZ5YmlCeVpYTndiMjV6WlR0Y2JpQWdmU3dnWm5WdVkzUnBiMjRnYjI1QlpHRndkR1Z5VW1WcVpXTjBhVzl1S0hKbFlYTnZiaWtnZTF4dUlDQWdJR2xtSUNnaGFYTkRZVzVqWld3b2NtVmhjMjl1S1NrZ2UxeHVJQ0FnSUNBZ2RHaHliM2RKWmtOaGJtTmxiR3hoZEdsdmJsSmxjWFZsYzNSbFpDaGpiMjVtYVdjcE8xeHVYRzRnSUNBZ0lDQXZMeUJVY21GdWMyWnZjbTBnY21WemNHOXVjMlVnWkdGMFlWeHVJQ0FnSUNBZ2FXWWdLSEpsWVhOdmJpQW1KaUJ5WldGemIyNHVjbVZ6Y0c5dWMyVXBJSHRjYmlBZ0lDQWdJQ0FnY21WaGMyOXVMbkpsYzNCdmJuTmxMbVJoZEdFZ1BTQjBjbUZ1YzJadmNtMUVZWFJoS0Z4dUlDQWdJQ0FnSUNBZ0lISmxZWE52Ymk1eVpYTndiMjV6WlM1a1lYUmhMRnh1SUNBZ0lDQWdJQ0FnSUhKbFlYTnZiaTV5WlhOd2IyNXpaUzVvWldGa1pYSnpMRnh1SUNBZ0lDQWdJQ0FnSUdOdmJtWnBaeTUwY21GdWMyWnZjbTFTWlhOd2IyNXpaVnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQlFjbTl0YVhObExuSmxhbVZqZENoeVpXRnpiMjRwTzF4dUlDQjlLVHRjYm4wN1hHNGlMQ0luZFhObElITjBjbWxqZENjN1hHNWNiaThxS2x4dUlDb2dWWEJrWVhSbElHRnVJRVZ5Y205eUlIZHBkR2dnZEdobElITndaV05wWm1sbFpDQmpiMjVtYVdjc0lHVnljbTl5SUdOdlpHVXNJR0Z1WkNCeVpYTndiMjV6WlM1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTBWeWNtOXlmU0JsY25KdmNpQlVhR1VnWlhKeWIzSWdkRzhnZFhCa1lYUmxMbHh1SUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUdOdmJtWnBaeUJVYUdVZ1kyOXVabWxuTGx4dUlDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlGdGpiMlJsWFNCVWFHVWdaWEp5YjNJZ1kyOWtaU0FvWm05eUlHVjRZVzF3YkdVc0lDZEZRMDlPVGtGQ1QxSlVSVVFuS1M1Y2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQmJjbVZ4ZFdWemRGMGdWR2hsSUhKbGNYVmxjM1F1WEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1czSmxjM0J2Ym5ObFhTQlVhR1VnY21WemNHOXVjMlV1WEc0Z0tpQkFjbVYwZFhKdWN5QjdSWEp5YjNKOUlGUm9aU0JsY25KdmNpNWNiaUFxTDF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlCbGJtaGhibU5sUlhKeWIzSW9aWEp5YjNJc0lHTnZibVpwWnl3Z1kyOWtaU3dnY21WeGRXVnpkQ3dnY21WemNHOXVjMlVwSUh0Y2JpQWdaWEp5YjNJdVkyOXVabWxuSUQwZ1kyOXVabWxuTzF4dUlDQnBaaUFvWTI5a1pTa2dlMXh1SUNBZ0lHVnljbTl5TG1OdlpHVWdQU0JqYjJSbE8xeHVJQ0I5WEc0Z0lHVnljbTl5TG5KbGNYVmxjM1FnUFNCeVpYRjFaWE4wTzF4dUlDQmxjbkp2Y2k1eVpYTndiMjV6WlNBOUlISmxjM0J2Ym5ObE8xeHVJQ0J5WlhSMWNtNGdaWEp5YjNJN1hHNTlPMXh1SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdZM0psWVhSbFJYSnliM0lnUFNCeVpYRjFhWEpsS0NjdUwyTnlaV0YwWlVWeWNtOXlKeWs3WEc1Y2JpOHFLbHh1SUNvZ1VtVnpiMngyWlNCdmNpQnlaV3BsWTNRZ1lTQlFjbTl0YVhObElHSmhjMlZrSUc5dUlISmxjM0J2Ym5ObElITjBZWFIxY3k1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCeVpYTnZiSFpsSUVFZ1puVnVZM1JwYjI0Z2RHaGhkQ0J5WlhOdmJIWmxjeUIwYUdVZ2NISnZiV2x6WlM1Y2JpQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJSEpsYW1WamRDQkJJR1oxYm1OMGFXOXVJSFJvWVhRZ2NtVnFaV04wY3lCMGFHVWdjSEp2YldselpTNWNiaUFxSUVCd1lYSmhiU0I3YjJKcVpXTjBmU0J5WlhOd2IyNXpaU0JVYUdVZ2NtVnpjRzl1YzJVdVhHNGdLaTljYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnYzJWMGRHeGxLSEpsYzI5c2RtVXNJSEpsYW1WamRDd2djbVZ6Y0c5dWMyVXBJSHRjYmlBZ2RtRnlJSFpoYkdsa1lYUmxVM1JoZEhWeklEMGdjbVZ6Y0c5dWMyVXVZMjl1Wm1sbkxuWmhiR2xrWVhSbFUzUmhkSFZ6TzF4dUlDQXZMeUJPYjNSbE9pQnpkR0YwZFhNZ2FYTWdibTkwSUdWNGNHOXpaV1FnWW5rZ1dFUnZiV0ZwYmxKbGNYVmxjM1JjYmlBZ2FXWWdLQ0Z5WlhOd2IyNXpaUzV6ZEdGMGRYTWdmSHdnSVhaaGJHbGtZWFJsVTNSaGRIVnpJSHg4SUhaaGJHbGtZWFJsVTNSaGRIVnpLSEpsYzNCdmJuTmxMbk4wWVhSMWN5a3BJSHRjYmlBZ0lDQnlaWE52YkhabEtISmxjM0J2Ym5ObEtUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnlaV3BsWTNRb1kzSmxZWFJsUlhKeWIzSW9YRzRnSUNBZ0lDQW5VbVZ4ZFdWemRDQm1ZV2xzWldRZ2QybDBhQ0J6ZEdGMGRYTWdZMjlrWlNBbklDc2djbVZ6Y0c5dWMyVXVjM1JoZEhWekxGeHVJQ0FnSUNBZ2NtVnpjRzl1YzJVdVkyOXVabWxuTEZ4dUlDQWdJQ0FnYm5Wc2JDeGNiaUFnSUNBZ0lISmxjM0J2Ym5ObExuSmxjWFZsYzNRc1hHNGdJQ0FnSUNCeVpYTndiMjV6WlZ4dUlDQWdJQ2twTzF4dUlDQjlYRzU5TzF4dUlpd2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNTJZWElnZFhScGJITWdQU0J5WlhGMWFYSmxLQ2N1THk0dUwzVjBhV3h6SnlrN1hHNWNiaThxS2x4dUlDb2dWSEpoYm5ObWIzSnRJSFJvWlNCa1lYUmhJR1p2Y2lCaElISmxjWFZsYzNRZ2IzSWdZU0J5WlhOd2IyNXpaVnh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZGTjBjbWx1WjMwZ1pHRjBZU0JVYUdVZ1pHRjBZU0IwYnlCaVpTQjBjbUZ1YzJadmNtMWxaRnh1SUNvZ1FIQmhjbUZ0SUh0QmNuSmhlWDBnYUdWaFpHVnljeUJVYUdVZ2FHVmhaR1Z5Y3lCbWIzSWdkR2hsSUhKbGNYVmxjM1FnYjNJZ2NtVnpjRzl1YzJWY2JpQXFJRUJ3WVhKaGJTQjdRWEp5WVhsOFJuVnVZM1JwYjI1OUlHWnVjeUJCSUhOcGJtZHNaU0JtZFc1amRHbHZiaUJ2Y2lCQmNuSmhlU0J2WmlCbWRXNWpkR2x2Ym5OY2JpQXFJRUJ5WlhSMWNtNXpJSHNxZlNCVWFHVWdjbVZ6ZFd4MGFXNW5JSFJ5WVc1elptOXliV1ZrSUdSaGRHRmNiaUFxTDF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlCMGNtRnVjMlp2Y20xRVlYUmhLR1JoZEdFc0lHaGxZV1JsY25Nc0lHWnVjeWtnZTF4dUlDQXZLbVZ6YkdsdWRDQnVieTF3WVhKaGJTMXlaV0Z6YzJsbmJqb3dLaTljYmlBZ2RYUnBiSE11Wm05eVJXRmphQ2htYm5Nc0lHWjFibU4wYVc5dUlIUnlZVzV6Wm05eWJTaG1iaWtnZTF4dUlDQWdJR1JoZEdFZ1BTQm1iaWhrWVhSaExDQm9aV0ZrWlhKektUdGNiaUFnZlNrN1hHNWNiaUFnY21WMGRYSnVJR1JoZEdFN1hHNTlPMXh1SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdkWFJwYkhNZ1BTQnlaWEYxYVhKbEtDY3VMM1YwYVd4ekp5azdYRzUyWVhJZ2JtOXliV0ZzYVhwbFNHVmhaR1Z5VG1GdFpTQTlJSEpsY1hWcGNtVW9KeTR2YUdWc2NHVnljeTl1YjNKdFlXeHBlbVZJWldGa1pYSk9ZVzFsSnlrN1hHNWNiblpoY2lCRVJVWkJWVXhVWDBOUFRsUkZUbFJmVkZsUVJTQTlJSHRjYmlBZ0owTnZiblJsYm5RdFZIbHdaU2M2SUNkaGNIQnNhV05oZEdsdmJpOTRMWGQzZHkxbWIzSnRMWFZ5YkdWdVkyOWtaV1FuWEc1OU8xeHVYRzVtZFc1amRHbHZiaUJ6WlhSRGIyNTBaVzUwVkhsd1pVbG1WVzV6WlhRb2FHVmhaR1Z5Y3l3Z2RtRnNkV1VwSUh0Y2JpQWdhV1lnS0NGMWRHbHNjeTVwYzFWdVpHVm1hVzVsWkNob1pXRmtaWEp6S1NBbUppQjFkR2xzY3k1cGMxVnVaR1ZtYVc1bFpDaG9aV0ZrWlhKeld5ZERiMjUwWlc1MExWUjVjR1VuWFNrcElIdGNiaUFnSUNCb1pXRmtaWEp6V3lkRGIyNTBaVzUwTFZSNWNHVW5YU0E5SUhaaGJIVmxPMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdkbGRFUmxabUYxYkhSQlpHRndkR1Z5S0NrZ2UxeHVJQ0IyWVhJZ1lXUmhjSFJsY2p0Y2JpQWdhV1lnS0hSNWNHVnZaaUJZVFV4SWRIUndVbVZ4ZFdWemRDQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBdkx5QkdiM0lnWW5KdmQzTmxjbk1nZFhObElGaElVaUJoWkdGd2RHVnlYRzRnSUNBZ1lXUmhjSFJsY2lBOUlISmxjWFZwY21Vb0p5NHZZV1JoY0hSbGNuTXZlR2h5SnlrN1hHNGdJSDBnWld4elpTQnBaaUFvZEhsd1pXOW1JSEJ5YjJObGMzTWdJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0x5OGdSbTl5SUc1dlpHVWdkWE5sSUVoVVZGQWdZV1JoY0hSbGNseHVJQ0FnSUdGa1lYQjBaWElnUFNCeVpYRjFhWEpsS0NjdUwyRmtZWEIwWlhKekwyaDBkSEFuS1R0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnWVdSaGNIUmxjanRjYm4xY2JseHVkbUZ5SUdSbFptRjFiSFJ6SUQwZ2UxeHVJQ0JoWkdGd2RHVnlPaUJuWlhSRVpXWmhkV3gwUVdSaGNIUmxjaWdwTEZ4dVhHNGdJSFJ5WVc1elptOXliVkpsY1hWbGMzUTZJRnRtZFc1amRHbHZiaUIwY21GdWMyWnZjbTFTWlhGMVpYTjBLR1JoZEdFc0lHaGxZV1JsY25NcElIdGNiaUFnSUNCdWIzSnRZV3hwZW1WSVpXRmtaWEpPWVcxbEtHaGxZV1JsY25Nc0lDZERiMjUwWlc1MExWUjVjR1VuS1R0Y2JpQWdJQ0JwWmlBb2RYUnBiSE11YVhOR2IzSnRSR0YwWVNoa1lYUmhLU0I4ZkZ4dUlDQWdJQ0FnZFhScGJITXVhWE5CY25KaGVVSjFabVpsY2loa1lYUmhLU0I4ZkZ4dUlDQWdJQ0FnZFhScGJITXVhWE5DZFdabVpYSW9aR0YwWVNrZ2ZIeGNiaUFnSUNBZ0lIVjBhV3h6TG1selUzUnlaV0Z0S0dSaGRHRXBJSHg4WEc0Z0lDQWdJQ0IxZEdsc2N5NXBjMFpwYkdVb1pHRjBZU2tnZkh4Y2JpQWdJQ0FnSUhWMGFXeHpMbWx6UW14dllpaGtZWFJoS1Z4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR1JoZEdFN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoMWRHbHNjeTVwYzBGeWNtRjVRblZtWm1WeVZtbGxkeWhrWVhSaEtTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHUmhkR0V1WW5WbVptVnlPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9kWFJwYkhNdWFYTlZVa3hUWldGeVkyaFFZWEpoYlhNb1pHRjBZU2twSUh0Y2JpQWdJQ0FnSUhObGRFTnZiblJsYm5SVWVYQmxTV1pWYm5ObGRDaG9aV0ZrWlhKekxDQW5ZWEJ3YkdsallYUnBiMjR2ZUMxM2QzY3RabTl5YlMxMWNteGxibU52WkdWa08yTm9ZWEp6WlhROWRYUm1MVGduS1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUJrWVhSaExuUnZVM1J5YVc1bktDazdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaDFkR2xzY3k1cGMwOWlhbVZqZENoa1lYUmhLU2tnZTF4dUlDQWdJQ0FnYzJWMFEyOXVkR1Z1ZEZSNWNHVkpabFZ1YzJWMEtHaGxZV1JsY25Nc0lDZGhjSEJzYVdOaGRHbHZiaTlxYzI5dU8yTm9ZWEp6WlhROWRYUm1MVGduS1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUJLVTA5T0xuTjBjbWx1WjJsbWVTaGtZWFJoS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHUmhkR0U3WEc0Z0lIMWRMRnh1WEc0Z0lIUnlZVzV6Wm05eWJWSmxjM0J2Ym5ObE9pQmJablZ1WTNScGIyNGdkSEpoYm5ObWIzSnRVbVZ6Y0c5dWMyVW9aR0YwWVNrZ2UxeHVJQ0FnSUM4cVpYTnNhVzUwSUc1dkxYQmhjbUZ0TFhKbFlYTnphV2R1T2pBcUwxeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ1pHRjBZU0E5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUdSaGRHRWdQU0JLVTA5T0xuQmhjbk5sS0dSaGRHRXBPMXh1SUNBZ0lDQWdmU0JqWVhSamFDQW9aU2tnZXlBdktpQkpaMjV2Y21VZ0tpOGdmVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnWkdGMFlUdGNiaUFnZlYwc1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVFZ2RHbHRaVzkxZENCcGJpQnRhV3hzYVhObFkyOXVaSE1nZEc4Z1lXSnZjblFnWVNCeVpYRjFaWE4wTGlCSlppQnpaWFFnZEc4Z01DQW9aR1ZtWVhWc2RDa2dZVnh1SUNBZ0tpQjBhVzFsYjNWMElHbHpJRzV2ZENCamNtVmhkR1ZrTGx4dUlDQWdLaTljYmlBZ2RHbHRaVzkxZERvZ01DeGNibHh1SUNCNGMzSm1RMjl2YTJsbFRtRnRaVG9nSjFoVFVrWXRWRTlMUlU0bkxGeHVJQ0I0YzNKbVNHVmhaR1Z5VG1GdFpUb2dKMWd0V0ZOU1JpMVVUMHRGVGljc1hHNWNiaUFnYldGNFEyOXVkR1Z1ZEV4bGJtZDBhRG9nTFRFc1hHNWNiaUFnZG1Gc2FXUmhkR1ZUZEdGMGRYTTZJR1oxYm1OMGFXOXVJSFpoYkdsa1lYUmxVM1JoZEhWektITjBZWFIxY3lrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ6ZEdGMGRYTWdQajBnTWpBd0lDWW1JSE4wWVhSMWN5QThJRE13TUR0Y2JpQWdmVnh1ZlR0Y2JseHVaR1ZtWVhWc2RITXVhR1ZoWkdWeWN5QTlJSHRjYmlBZ1kyOXRiVzl1T2lCN1hHNGdJQ0FnSjBGalkyVndkQ2M2SUNkaGNIQnNhV05oZEdsdmJpOXFjMjl1TENCMFpYaDBMM0JzWVdsdUxDQXFMeW9uWEc0Z0lIMWNibjA3WEc1Y2JuVjBhV3h6TG1admNrVmhZMmdvV3lka1pXeGxkR1VuTENBbloyVjBKeXdnSjJobFlXUW5YU3dnWm5WdVkzUnBiMjRnWm05eVJXRmphRTFsZEdodlpFNXZSR0YwWVNodFpYUm9iMlFwSUh0Y2JpQWdaR1ZtWVhWc2RITXVhR1ZoWkdWeWMxdHRaWFJvYjJSZElEMGdlMzA3WEc1OUtUdGNibHh1ZFhScGJITXVabTl5UldGamFDaGJKM0J2YzNRbkxDQW5jSFYwSnl3Z0ozQmhkR05vSjEwc0lHWjFibU4wYVc5dUlHWnZja1ZoWTJoTlpYUm9iMlJYYVhSb1JHRjBZU2h0WlhSb2IyUXBJSHRjYmlBZ1pHVm1ZWFZzZEhNdWFHVmhaR1Z5YzF0dFpYUm9iMlJkSUQwZ2RYUnBiSE11YldWeVoyVW9SRVZHUVZWTVZGOURUMDVVUlU1VVgxUlpVRVVwTzF4dWZTazdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWkdWbVlYVnNkSE03WEc0aUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0Z1ltbHVaQ2htYml3Z2RHaHBjMEZ5WnlrZ2UxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdkM0poY0NncElIdGNiaUFnSUNCMllYSWdZWEpuY3lBOUlHNWxkeUJCY25KaGVTaGhjbWQxYldWdWRITXViR1Z1WjNSb0tUdGNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHRnlaM011YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lHRnlaM05iYVYwZ1BTQmhjbWQxYldWdWRITmJhVjA3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCbWJpNWhjSEJzZVNoMGFHbHpRWEpuTENCaGNtZHpLVHRjYmlBZ2ZUdGNibjA3WEc0aUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JpOHZJR0owYjJFZ2NHOXNlV1pwYkd3Z1ptOXlJRWxGUERFd0lHTnZkWEowWlhONUlHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOWtZWFpwWkdOb1lXMWlaWEp6TDBKaGMyVTJOQzVxYzF4dVhHNTJZWElnWTJoaGNuTWdQU0FuUVVKRFJFVkdSMGhKU2t0TVRVNVBVRkZTVTFSVlZsZFlXVnBoWW1Oa1pXWm5hR2xxYTJ4dGJtOXdjWEp6ZEhWMmQzaDVlakF4TWpNME5UWTNPRGtyTHowbk8xeHVYRzVtZFc1amRHbHZiaUJGS0NrZ2UxeHVJQ0IwYUdsekxtMWxjM05oWjJVZ1BTQW5VM1J5YVc1bklHTnZiblJoYVc1eklHRnVJR2x1ZG1Gc2FXUWdZMmhoY21GamRHVnlKenRjYm4xY2JrVXVjSEp2ZEc5MGVYQmxJRDBnYm1WM0lFVnljbTl5TzF4dVJTNXdjbTkwYjNSNWNHVXVZMjlrWlNBOUlEVTdYRzVGTG5CeWIzUnZkSGx3WlM1dVlXMWxJRDBnSjBsdWRtRnNhV1JEYUdGeVlXTjBaWEpGY25KdmNpYzdYRzVjYm1aMWJtTjBhVzl1SUdKMGIyRW9hVzV3ZFhRcElIdGNiaUFnZG1GeUlITjBjaUE5SUZOMGNtbHVaeWhwYm5CMWRDazdYRzRnSUhaaGNpQnZkWFJ3ZFhRZ1BTQW5KenRjYmlBZ1ptOXlJQ2hjYmlBZ0lDQXZMeUJwYm1sMGFXRnNhWHBsSUhKbGMzVnNkQ0JoYm1RZ1kyOTFiblJsY2x4dUlDQWdJSFpoY2lCaWJHOWpheXdnWTJoaGNrTnZaR1VzSUdsa2VDQTlJREFzSUcxaGNDQTlJR05vWVhKek8xeHVJQ0FnSUM4dklHbG1JSFJvWlNCdVpYaDBJSE4wY2lCcGJtUmxlQ0JrYjJWeklHNXZkQ0JsZUdsemREcGNiaUFnSUNBdkx5QWdJR05vWVc1blpTQjBhR1VnYldGd2NHbHVaeUIwWVdKc1pTQjBieUJjSWoxY0lseHVJQ0FnSUM4dklDQWdZMmhsWTJzZ2FXWWdaQ0JvWVhNZ2JtOGdabkpoWTNScGIyNWhiQ0JrYVdkcGRITmNiaUFnSUNCemRISXVZMmhoY2tGMEtHbGtlQ0I4SURBcElIeDhJQ2h0WVhBZ1BTQW5QU2NzSUdsa2VDQWxJREVwTzF4dUlDQWdJQzh2SUZ3aU9DQXRJR2xrZUNBbElERWdLaUE0WENJZ1oyVnVaWEpoZEdWeklIUm9aU0J6WlhGMVpXNWpaU0F5TENBMExDQTJMQ0E0WEc0Z0lDQWdiM1YwY0hWMElDczlJRzFoY0M1amFHRnlRWFFvTmpNZ0ppQmliRzlqYXlBK1BpQTRJQzBnYVdSNElDVWdNU0FxSURncFhHNGdJQ2tnZTF4dUlDQWdJR05vWVhKRGIyUmxJRDBnYzNSeUxtTm9ZWEpEYjJSbFFYUW9hV1I0SUNzOUlETWdMeUEwS1R0Y2JpQWdJQ0JwWmlBb1kyaGhja052WkdVZ1BpQXdlRVpHS1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JTZ3BPMXh1SUNBZ0lIMWNiaUFnSUNCaWJHOWpheUE5SUdKc2IyTnJJRHc4SURnZ2ZDQmphR0Z5UTI5a1pUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z2IzVjBjSFYwTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR0owYjJFN1hHNGlMQ0luZFhObElITjBjbWxqZENjN1hHNWNiblpoY2lCMWRHbHNjeUE5SUhKbGNYVnBjbVVvSnk0dkxpNHZkWFJwYkhNbktUdGNibHh1Wm5WdVkzUnBiMjRnWlc1amIyUmxLSFpoYkNrZ2UxeHVJQ0J5WlhSMWNtNGdaVzVqYjJSbFZWSkpRMjl0Y0c5dVpXNTBLSFpoYkNrdVhHNGdJQ0FnY21Wd2JHRmpaU2d2SlRRd0wyZHBMQ0FuUUNjcExseHVJQ0FnSUhKbGNHeGhZMlVvTHlVelFTOW5hU3dnSnpvbktTNWNiaUFnSUNCeVpYQnNZV05sS0M4bE1qUXZaeXdnSnlRbktTNWNiaUFnSUNCeVpYQnNZV05sS0M4bE1rTXZaMmtzSUNjc0p5a3VYRzRnSUNBZ2NtVndiR0ZqWlNndkpUSXdMMmNzSUNjckp5a3VYRzRnSUNBZ2NtVndiR0ZqWlNndkpUVkNMMmRwTENBbld5Y3BMbHh1SUNBZ0lISmxjR3hoWTJVb0x5VTFSQzluYVN3Z0oxMG5LVHRjYm4xY2JseHVMeW9xWEc0Z0tpQkNkV2xzWkNCaElGVlNUQ0JpZVNCaGNIQmxibVJwYm1jZ2NHRnlZVzF6SUhSdklIUm9aU0JsYm1SY2JpQXFYRzRnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnZFhKc0lGUm9aU0JpWVhObElHOW1JSFJvWlNCMWNtd2dLR1V1Wnk0c0lHaDBkSEE2THk5M2QzY3VaMjl2WjJ4bExtTnZiU2xjYmlBcUlFQndZWEpoYlNCN2IySnFaV04wZlNCYmNHRnlZVzF6WFNCVWFHVWdjR0Z5WVcxeklIUnZJR0psSUdGd2NHVnVaR1ZrWEc0Z0tpQkFjbVYwZFhKdWN5QjdjM1J5YVc1bmZTQlVhR1VnWm05eWJXRjBkR1ZrSUhWeWJGeHVJQ292WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUdKMWFXeGtWVkpNS0hWeWJDd2djR0Z5WVcxekxDQndZWEpoYlhOVFpYSnBZV3hwZW1WeUtTQjdYRzRnSUM4cVpYTnNhVzUwSUc1dkxYQmhjbUZ0TFhKbFlYTnphV2R1T2pBcUwxeHVJQ0JwWmlBb0lYQmhjbUZ0Y3lrZ2UxeHVJQ0FnSUhKbGRIVnliaUIxY213N1hHNGdJSDFjYmx4dUlDQjJZWElnYzJWeWFXRnNhWHBsWkZCaGNtRnRjenRjYmlBZ2FXWWdLSEJoY21GdGMxTmxjbWxoYkdsNlpYSXBJSHRjYmlBZ0lDQnpaWEpwWVd4cGVtVmtVR0Z5WVcxeklEMGdjR0Z5WVcxelUyVnlhV0ZzYVhwbGNpaHdZWEpoYlhNcE8xeHVJQ0I5SUdWc2MyVWdhV1lnS0hWMGFXeHpMbWx6VlZKTVUyVmhjbU5vVUdGeVlXMXpLSEJoY21GdGN5a3BJSHRjYmlBZ0lDQnpaWEpwWVd4cGVtVmtVR0Z5WVcxeklEMGdjR0Z5WVcxekxuUnZVM1J5YVc1bktDazdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdkbUZ5SUhCaGNuUnpJRDBnVzEwN1hHNWNiaUFnSUNCMWRHbHNjeTVtYjNKRllXTm9LSEJoY21GdGN5d2dablZ1WTNScGIyNGdjMlZ5YVdGc2FYcGxLSFpoYkN3Z2EyVjVLU0I3WEc0Z0lDQWdJQ0JwWmlBb2RtRnNJRDA5UFNCdWRXeHNJSHg4SUhSNWNHVnZaaUIyWVd3Z1BUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLSFYwYVd4ekxtbHpRWEp5WVhrb2RtRnNLU2tnZTF4dUlDQWdJQ0FnSUNCclpYa2dQU0JyWlhrZ0t5QW5XMTBuTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnZG1Gc0lEMGdXM1poYkYwN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lIVjBhV3h6TG1admNrVmhZMmdvZG1Gc0xDQm1kVzVqZEdsdmJpQndZWEp6WlZaaGJIVmxLSFlwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFYwYVd4ekxtbHpSR0YwWlNoMktTa2dlMXh1SUNBZ0lDQWdJQ0FnSUhZZ1BTQjJMblJ2U1ZOUFUzUnlhVzVuS0NrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9kWFJwYkhNdWFYTlBZbXBsWTNRb2Rpa3BJSHRjYmlBZ0lDQWdJQ0FnSUNCMklEMGdTbE5QVGk1emRISnBibWRwWm5rb2RpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY0dGeWRITXVjSFZ6YUNobGJtTnZaR1VvYTJWNUtTQXJJQ2M5SnlBcklHVnVZMjlrWlNoMktTazdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJSE5sY21saGJHbDZaV1JRWVhKaGJYTWdQU0J3WVhKMGN5NXFiMmx1S0NjbUp5azdYRzRnSUgxY2JseHVJQ0JwWmlBb2MyVnlhV0ZzYVhwbFpGQmhjbUZ0Y3lrZ2UxeHVJQ0FnSUhWeWJDQXJQU0FvZFhKc0xtbHVaR1Y0VDJZb0p6OG5LU0E5UFQwZ0xURWdQeUFuUHljZ09pQW5KaWNwSUNzZ2MyVnlhV0ZzYVhwbFpGQmhjbUZ0Y3p0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCMWNtdzdYRzU5TzF4dUlpd2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNHZLaXBjYmlBcUlFTnlaV0YwWlhNZ1lTQnVaWGNnVlZKTUlHSjVJR052YldKcGJtbHVaeUIwYUdVZ2MzQmxZMmxtYVdWa0lGVlNUSE5jYmlBcVhHNGdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdZbUZ6WlZWU1RDQlVhR1VnWW1GelpTQlZVa3hjYmlBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCeVpXeGhkR2wyWlZWU1RDQlVhR1VnY21Wc1lYUnBkbVVnVlZKTVhHNGdLaUJBY21WMGRYSnVjeUI3YzNSeWFXNW5mU0JVYUdVZ1kyOXRZbWx1WldRZ1ZWSk1YRzRnS2k5Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0Z1kyOXRZbWx1WlZWU1RITW9ZbUZ6WlZWU1RDd2djbVZzWVhScGRtVlZVa3dwSUh0Y2JpQWdjbVYwZFhKdUlISmxiR0YwYVhabFZWSk1YRzRnSUNBZ1B5QmlZWE5sVlZKTUxuSmxjR3hoWTJVb0wxeGNMeXNrTHl3Z0p5Y3BJQ3NnSnk4bklDc2djbVZzWVhScGRtVlZVa3d1Y21Wd2JHRmpaU2d2WGx4Y0x5c3ZMQ0FuSnlsY2JpQWdJQ0E2SUdKaGMyVlZVa3c3WEc1OU8xeHVJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzUyWVhJZ2RYUnBiSE1nUFNCeVpYRjFhWEpsS0NjdUx5NHVMM1YwYVd4ekp5azdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnS0Z4dUlDQjFkR2xzY3k1cGMxTjBZVzVrWVhKa1FuSnZkM05sY2tWdWRpZ3BJRDljYmx4dUlDQXZMeUJUZEdGdVpHRnlaQ0JpY205M2MyVnlJR1Z1ZG5NZ2MzVndjRzl5ZENCa2IyTjFiV1Z1ZEM1amIyOXJhV1ZjYmlBZ0tHWjFibU4wYVc5dUlITjBZVzVrWVhKa1FuSnZkM05sY2tWdWRpZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ2QzSnBkR1U2SUdaMWJtTjBhVzl1SUhkeWFYUmxLRzVoYldVc0lIWmhiSFZsTENCbGVIQnBjbVZ6TENCd1lYUm9MQ0JrYjIxaGFXNHNJSE5sWTNWeVpTa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1kyOXZhMmxsSUQwZ1cxMDdYRzRnSUNBZ0lDQWdJR052YjJ0cFpTNXdkWE5vS0c1aGJXVWdLeUFuUFNjZ0t5QmxibU52WkdWVlVrbERiMjF3YjI1bGJuUW9kbUZzZFdVcEtUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2RYUnBiSE11YVhOT2RXMWlaWElvWlhod2FYSmxjeWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjlyYVdVdWNIVnphQ2duWlhod2FYSmxjejBuSUNzZ2JtVjNJRVJoZEdVb1pYaHdhWEpsY3lrdWRHOUhUVlJUZEhKcGJtY29LU2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnBaaUFvZFhScGJITXVhWE5UZEhKcGJtY29jR0YwYUNrcElIdGNiaUFnSUNBZ0lDQWdJQ0JqYjI5cmFXVXVjSFZ6YUNnbmNHRjBhRDBuSUNzZ2NHRjBhQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnBaaUFvZFhScGJITXVhWE5UZEhKcGJtY29aRzl0WVdsdUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdOdmIydHBaUzV3ZFhOb0tDZGtiMjFoYVc0OUp5QXJJR1J2YldGcGJpazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCcFppQW9jMlZqZFhKbElEMDlQU0IwY25WbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnWTI5dmEybGxMbkIxYzJnb0ozTmxZM1Z5WlNjcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnWkc5amRXMWxiblF1WTI5dmEybGxJRDBnWTI5dmEybGxMbXB2YVc0b0p6c2dKeWs3WEc0Z0lDQWdJQ0I5TEZ4dVhHNGdJQ0FnSUNCeVpXRmtPaUJtZFc1amRHbHZiaUJ5WldGa0tHNWhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJRzFoZEdOb0lEMGdaRzlqZFcxbGJuUXVZMjl2YTJsbExtMWhkR05vS0c1bGR5QlNaV2RGZUhBb0p5aGVmRHRjWEZ4Y2N5b3BLQ2NnS3lCdVlXMWxJQ3NnSnlrOUtGdGVPMTBxS1NjcEtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDaHRZWFJqYUNBL0lHUmxZMjlrWlZWU1NVTnZiWEJ2Ym1WdWRDaHRZWFJqYUZzelhTa2dPaUJ1ZFd4c0tUdGNiaUFnSUNBZ0lIMHNYRzVjYmlBZ0lDQWdJSEpsYlc5MlpUb2dablZ1WTNScGIyNGdjbVZ0YjNabEtHNWhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUzY21sMFpTaHVZVzFsTENBbkp5d2dSR0YwWlM1dWIzY29LU0F0SURnMk5EQXdNREF3S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dUlDQjlLU2dwSURwY2JseHVJQ0F2THlCT2IyNGdjM1JoYm1SaGNtUWdZbkp2ZDNObGNpQmxibllnS0hkbFlpQjNiM0pyWlhKekxDQnlaV0ZqZEMxdVlYUnBkbVVwSUd4aFkyc2dibVZsWkdWa0lITjFjSEJ2Y25RdVhHNGdJQ2htZFc1amRHbHZiaUJ1YjI1VGRHRnVaR0Z5WkVKeWIzZHpaWEpGYm5Zb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUhkeWFYUmxPaUJtZFc1amRHbHZiaUIzY21sMFpTZ3BJSHQ5TEZ4dUlDQWdJQ0FnY21WaFpEb2dablZ1WTNScGIyNGdjbVZoWkNncElIc2djbVYwZFhKdUlHNTFiR3c3SUgwc1hHNGdJQ0FnSUNCeVpXMXZkbVU2SUdaMWJtTjBhVzl1SUhKbGJXOTJaU2dwSUh0OVhHNGdJQ0FnZlR0Y2JpQWdmU2tvS1Z4dUtUdGNiaUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNibHh1THlvcVhHNGdLaUJFWlhSbGNtMXBibVZ6SUhkb1pYUm9aWElnZEdobElITndaV05wWm1sbFpDQlZVa3dnYVhNZ1lXSnpiMngxZEdWY2JpQXFYRzRnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnZFhKc0lGUm9aU0JWVWt3Z2RHOGdkR1Z6ZEZ4dUlDb2dRSEpsZEhWeWJuTWdlMkp2YjJ4bFlXNTlJRlJ5ZFdVZ2FXWWdkR2hsSUhOd1pXTnBabWxsWkNCVlVrd2dhWE1nWVdKemIyeDFkR1VzSUc5MGFHVnlkMmx6WlNCbVlXeHpaVnh1SUNvdlhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUlHbHpRV0p6YjJ4MWRHVlZVa3dvZFhKc0tTQjdYRzRnSUM4dklFRWdWVkpNSUdseklHTnZibk5wWkdWeVpXUWdZV0p6YjJ4MWRHVWdhV1lnYVhRZ1ltVm5hVzV6SUhkcGRHZ2dYQ0k4YzJOb1pXMWxQam92TDF3aUlHOXlJRndpTHk5Y0lpQW9jSEp2ZEc5amIyd3RjbVZzWVhScGRtVWdWVkpNS1M1Y2JpQWdMeThnVWtaRElETTVPRFlnWkdWbWFXNWxjeUJ6WTJobGJXVWdibUZ0WlNCaGN5QmhJSE5sY1hWbGJtTmxJRzltSUdOb1lYSmhZM1JsY25NZ1ltVm5hVzV1YVc1bklIZHBkR2dnWVNCc1pYUjBaWElnWVc1a0lHWnZiR3h2ZDJWa1hHNGdJQzh2SUdKNUlHRnVlU0JqYjIxaWFXNWhkR2x2YmlCdlppQnNaWFIwWlhKekxDQmthV2RwZEhNc0lIQnNkWE1zSUhCbGNtbHZaQ3dnYjNJZ2FIbHdhR1Z1TGx4dUlDQnlaWFIxY200Z0wxNG9XMkV0ZWwxYllTMTZYRnhrWEZ3clhGd3RYRnd1WFNvNktUOWNYQzljWEM4dmFTNTBaWE4wS0hWeWJDazdYRzU5TzF4dUlpd2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNTJZWElnZFhScGJITWdQU0J5WlhGMWFYSmxLQ2N1THk0dUwzVjBhV3h6SnlrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdLRnh1SUNCMWRHbHNjeTVwYzFOMFlXNWtZWEprUW5KdmQzTmxja1Z1ZGlncElEOWNibHh1SUNBdkx5QlRkR0Z1WkdGeVpDQmljbTkzYzJWeUlHVnVkbk1nYUdGMlpTQm1kV3hzSUhOMWNIQnZjblFnYjJZZ2RHaGxJRUZRU1hNZ2JtVmxaR1ZrSUhSdklIUmxjM1JjYmlBZ0x5OGdkMmhsZEdobGNpQjBhR1VnY21WeGRXVnpkQ0JWVWt3Z2FYTWdiMllnZEdobElITmhiV1VnYjNKcFoybHVJR0Z6SUdOMWNuSmxiblFnYkc5allYUnBiMjR1WEc0Z0lDaG1kVzVqZEdsdmJpQnpkR0Z1WkdGeVpFSnliM2R6WlhKRmJuWW9LU0I3WEc0Z0lDQWdkbUZ5SUcxemFXVWdQU0F2S0cxemFXVjhkSEpwWkdWdWRDa3ZhUzUwWlhOMEtHNWhkbWxuWVhSdmNpNTFjMlZ5UVdkbGJuUXBPMXh1SUNBZ0lIWmhjaUIxY214UVlYSnphVzVuVG05a1pTQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0oyRW5LVHRjYmlBZ0lDQjJZWElnYjNKcFoybHVWVkpNTzF4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnS2lCUVlYSnpaU0JoSUZWU1RDQjBieUJrYVhOamIzWmxjaUJwZENkeklHTnZiWEJ2Ym1WdWRITmNiaUFnSUNBcVhHNGdJQ0FnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnZFhKc0lGUm9aU0JWVWt3Z2RHOGdZbVVnY0dGeWMyVmtYRzRnSUNBZ0tpQkFjbVYwZFhKdWN5QjdUMkpxWldOMGZWeHVJQ0FnSUNvdlhHNGdJQ0FnWm5WdVkzUnBiMjRnY21WemIyeDJaVlZTVENoMWNtd3BJSHRjYmlBZ0lDQWdJSFpoY2lCb2NtVm1JRDBnZFhKc08xeHVYRzRnSUNBZ0lDQnBaaUFvYlhOcFpTa2dlMXh1SUNBZ0lDQWdJQ0F2THlCSlJTQnVaV1ZrY3lCaGRIUnlhV0oxZEdVZ2MyVjBJSFIzYVdObElIUnZJRzV2Y20xaGJHbDZaU0J3Y205d1pYSjBhV1Z6WEc0Z0lDQWdJQ0FnSUhWeWJGQmhjbk5wYm1kT2IyUmxMbk5sZEVGMGRISnBZblYwWlNnbmFISmxaaWNzSUdoeVpXWXBPMXh1SUNBZ0lDQWdJQ0JvY21WbUlEMGdkWEpzVUdGeWMybHVaMDV2WkdVdWFISmxaanRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnZFhKc1VHRnljMmx1WjA1dlpHVXVjMlYwUVhSMGNtbGlkWFJsS0Nkb2NtVm1KeXdnYUhKbFppazdYRzVjYmlBZ0lDQWdJQzh2SUhWeWJGQmhjbk5wYm1kT2IyUmxJSEJ5YjNacFpHVnpJSFJvWlNCVmNteFZkR2xzY3lCcGJuUmxjbVpoWTJVZ0xTQm9kSFJ3T2k4dmRYSnNMbk53WldNdWQyaGhkSGRuTG05eVp5OGpkWEpzZFhScGJITmNiaUFnSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lHaHlaV1k2SUhWeWJGQmhjbk5wYm1kT2IyUmxMbWh5WldZc1hHNGdJQ0FnSUNBZ0lIQnliM1J2WTI5c09pQjFjbXhRWVhKemFXNW5UbTlrWlM1d2NtOTBiMk52YkNBL0lIVnliRkJoY25OcGJtZE9iMlJsTG5CeWIzUnZZMjlzTG5KbGNHeGhZMlVvTHpva0x5d2dKeWNwSURvZ0p5Y3NYRzRnSUNBZ0lDQWdJR2h2YzNRNklIVnliRkJoY25OcGJtZE9iMlJsTG1odmMzUXNYRzRnSUNBZ0lDQWdJSE5sWVhKamFEb2dkWEpzVUdGeWMybHVaMDV2WkdVdWMyVmhjbU5vSUQ4Z2RYSnNVR0Z5YzJsdVowNXZaR1V1YzJWaGNtTm9MbkpsY0d4aFkyVW9MMTVjWEQ4dkxDQW5KeWtnT2lBbkp5eGNiaUFnSUNBZ0lDQWdhR0Z6YURvZ2RYSnNVR0Z5YzJsdVowNXZaR1V1YUdGemFDQS9JSFZ5YkZCaGNuTnBibWRPYjJSbExtaGhjMmd1Y21Wd2JHRmpaU2d2WGlNdkxDQW5KeWtnT2lBbkp5eGNiaUFnSUNBZ0lDQWdhRzl6ZEc1aGJXVTZJSFZ5YkZCaGNuTnBibWRPYjJSbExtaHZjM1J1WVcxbExGeHVJQ0FnSUNBZ0lDQndiM0owT2lCMWNteFFZWEp6YVc1blRtOWtaUzV3YjNKMExGeHVJQ0FnSUNBZ0lDQndZWFJvYm1GdFpUb2dLSFZ5YkZCaGNuTnBibWRPYjJSbExuQmhkR2h1WVcxbExtTm9ZWEpCZENnd0tTQTlQVDBnSnk4bktTQS9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxY214UVlYSnphVzVuVG05a1pTNXdZWFJvYm1GdFpTQTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuTHljZ0t5QjFjbXhRWVhKemFXNW5UbTlrWlM1d1lYUm9ibUZ0WlZ4dUlDQWdJQ0FnZlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J2Y21sbmFXNVZVa3dnUFNCeVpYTnZiSFpsVlZKTUtIZHBibVJ2ZHk1c2IyTmhkR2x2Ymk1b2NtVm1LVHRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ29nUkdWMFpYSnRhVzVsSUdsbUlHRWdWVkpNSUhOb1lYSmxjeUIwYUdVZ2MyRnRaU0J2Y21sbmFXNGdZWE1nZEdobElHTjFjbkpsYm5RZ2JHOWpZWFJwYjI1Y2JpQWdJQ0FxWEc0Z0lDQWdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdjbVZ4ZFdWemRGVlNUQ0JVYUdVZ1ZWSk1JSFJ2SUhSbGMzUmNiaUFnSUNBcUlFQnlaWFIxY201eklIdGliMjlzWldGdWZTQlVjblZsSUdsbUlGVlNUQ0J6YUdGeVpYTWdkR2hsSUhOaGJXVWdiM0pwWjJsdUxDQnZkR2hsY25kcGMyVWdabUZzYzJWY2JpQWdJQ0FxTDF4dUlDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQnBjMVZTVEZOaGJXVlBjbWxuYVc0b2NtVnhkV1Z6ZEZWU1RDa2dlMXh1SUNBZ0lDQWdkbUZ5SUhCaGNuTmxaQ0E5SUNoMWRHbHNjeTVwYzFOMGNtbHVaeWh5WlhGMVpYTjBWVkpNS1NrZ1B5QnlaWE52YkhabFZWSk1LSEpsY1hWbGMzUlZVa3dwSURvZ2NtVnhkV1Z6ZEZWU1REdGNiaUFnSUNBZ0lISmxkSFZ5YmlBb2NHRnljMlZrTG5CeWIzUnZZMjlzSUQwOVBTQnZjbWxuYVc1VlVrd3VjSEp2ZEc5amIyd2dKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lIQmhjbk5sWkM1b2IzTjBJRDA5UFNCdmNtbG5hVzVWVWt3dWFHOXpkQ2s3WEc0Z0lDQWdmVHRjYmlBZ2ZTa29LU0E2WEc1Y2JpQWdMeThnVG05dUlITjBZVzVrWVhKa0lHSnliM2R6WlhJZ1pXNTJjeUFvZDJWaUlIZHZjbXRsY25Nc0lISmxZV04wTFc1aGRHbDJaU2tnYkdGamF5QnVaV1ZrWldRZ2MzVndjRzl5ZEM1Y2JpQWdLR1oxYm1OMGFXOXVJRzV2YmxOMFlXNWtZWEprUW5KdmQzTmxja1Z1ZGlncElIdGNiaUFnSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnYVhOVlVreFRZVzFsVDNKcFoybHVLQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnZlR0Y2JpQWdmU2tvS1Z4dUtUdGNiaUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNibHh1ZG1GeUlIVjBhV3h6SUQwZ2NtVnhkV2x5WlNnbkxpNHZkWFJwYkhNbktUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaUJ1YjNKdFlXeHBlbVZJWldGa1pYSk9ZVzFsS0dobFlXUmxjbk1zSUc1dmNtMWhiR2w2WldST1lXMWxLU0I3WEc0Z0lIVjBhV3h6TG1admNrVmhZMmdvYUdWaFpHVnljeXdnWm5WdVkzUnBiMjRnY0hKdlkyVnpjMGhsWVdSbGNpaDJZV3gxWlN3Z2JtRnRaU2tnZTF4dUlDQWdJR2xtSUNodVlXMWxJQ0U5UFNCdWIzSnRZV3hwZW1Wa1RtRnRaU0FtSmlCdVlXMWxMblJ2VlhCd1pYSkRZWE5sS0NrZ1BUMDlJRzV2Y20xaGJHbDZaV1JPWVcxbExuUnZWWEJ3WlhKRFlYTmxLQ2twSUh0Y2JpQWdJQ0FnSUdobFlXUmxjbk5iYm05eWJXRnNhWHBsWkU1aGJXVmRJRDBnZG1Gc2RXVTdYRzRnSUNBZ0lDQmtaV3hsZEdVZ2FHVmhaR1Z5YzF0dVlXMWxYVHRjYmlBZ0lDQjlYRzRnSUgwcE8xeHVmVHRjYmlJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWRtRnlJSFYwYVd4eklEMGdjbVZ4ZFdseVpTZ25MaTh1TGk5MWRHbHNjeWNwTzF4dVhHNHZMeUJJWldGa1pYSnpJSGRvYjNObElHUjFjR3hwWTJGMFpYTWdZWEpsSUdsbmJtOXlaV1FnWW5rZ2JtOWtaVnh1THk4Z1l5NW1MaUJvZEhSd2N6b3ZMMjV2WkdWcWN5NXZjbWN2WVhCcEwyaDBkSEF1YUhSdGJDTm9kSFJ3WDIxbGMzTmhaMlZmYUdWaFpHVnljMXh1ZG1GeUlHbG5ibTl5WlVSMWNHeHBZMkYwWlU5bUlEMGdXMXh1SUNBbllXZGxKeXdnSjJGMWRHaHZjbWw2WVhScGIyNG5MQ0FuWTI5dWRHVnVkQzFzWlc1bmRHZ25MQ0FuWTI5dWRHVnVkQzEwZVhCbEp5d2dKMlYwWVdjbkxGeHVJQ0FuWlhod2FYSmxjeWNzSUNkbWNtOXRKeXdnSjJodmMzUW5MQ0FuYVdZdGJXOWthV1pwWldRdGMybHVZMlVuTENBbmFXWXRkVzV0YjJScFptbGxaQzF6YVc1alpTY3NYRzRnSUNkc1lYTjBMVzF2WkdsbWFXVmtKeXdnSjJ4dlkyRjBhVzl1Snl3Z0oyMWhlQzFtYjNKM1lYSmtjeWNzSUNkd2NtOTRlUzFoZFhSb2IzSnBlbUYwYVc5dUp5eGNiaUFnSjNKbFptVnlaWEluTENBbmNtVjBjbmt0WVdaMFpYSW5MQ0FuZFhObGNpMWhaMlZ1ZENkY2JsMDdYRzVjYmk4cUtseHVJQ29nVUdGeWMyVWdhR1ZoWkdWeWN5QnBiblJ2SUdGdUlHOWlhbVZqZEZ4dUlDcGNiaUFxSUdCZ1lGeHVJQ29nUkdGMFpUb2dWMlZrTENBeU55QkJkV2NnTWpBeE5DQXdPRG8xT0RvME9TQkhUVlJjYmlBcUlFTnZiblJsYm5RdFZIbHdaVG9nWVhCd2JHbGpZWFJwYjI0dmFuTnZibHh1SUNvZ1EyOXVibVZqZEdsdmJqb2dhMlZsY0MxaGJHbDJaVnh1SUNvZ1ZISmhibk5tWlhJdFJXNWpiMlJwYm1jNklHTm9kVzVyWldSY2JpQXFJR0JnWUZ4dUlDcGNiaUFxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0JvWldGa1pYSnpJRWhsWVdSbGNuTWdibVZsWkdsdVp5QjBieUJpWlNCd1lYSnpaV1JjYmlBcUlFQnlaWFIxY201eklIdFBZbXBsWTNSOUlFaGxZV1JsY25NZ2NHRnljMlZrSUdsdWRHOGdZVzRnYjJKcVpXTjBYRzRnS2k5Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0Z2NHRnljMlZJWldGa1pYSnpLR2hsWVdSbGNuTXBJSHRjYmlBZ2RtRnlJSEJoY25ObFpDQTlJSHQ5TzF4dUlDQjJZWElnYTJWNU8xeHVJQ0IyWVhJZ2RtRnNPMXh1SUNCMllYSWdhVHRjYmx4dUlDQnBaaUFvSVdobFlXUmxjbk1wSUhzZ2NtVjBkWEp1SUhCaGNuTmxaRHNnZlZ4dVhHNGdJSFYwYVd4ekxtWnZja1ZoWTJnb2FHVmhaR1Z5Y3k1emNHeHBkQ2duWEZ4dUp5a3NJR1oxYm1OMGFXOXVJSEJoY25ObGNpaHNhVzVsS1NCN1hHNGdJQ0FnYVNBOUlHeHBibVV1YVc1a1pYaFBaaWduT2ljcE8xeHVJQ0FnSUd0bGVTQTlJSFYwYVd4ekxuUnlhVzBvYkdsdVpTNXpkV0p6ZEhJb01Dd2dhU2twTG5SdlRHOTNaWEpEWVhObEtDazdYRzRnSUNBZ2RtRnNJRDBnZFhScGJITXVkSEpwYlNoc2FXNWxMbk4xWW5OMGNpaHBJQ3NnTVNrcE8xeHVYRzRnSUNBZ2FXWWdLR3RsZVNrZ2UxeHVJQ0FnSUNBZ2FXWWdLSEJoY25ObFpGdHJaWGxkSUNZbUlHbG5ibTl5WlVSMWNHeHBZMkYwWlU5bUxtbHVaR1Y0VDJZb2EyVjVLU0ErUFNBd0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHbG1JQ2hyWlhrZ1BUMDlJQ2R6WlhRdFkyOXZhMmxsSnlrZ2UxeHVJQ0FnSUNBZ0lDQndZWEp6WldSYmEyVjVYU0E5SUNod1lYSnpaV1JiYTJWNVhTQS9JSEJoY25ObFpGdHJaWGxkSURvZ1cxMHBMbU52Ym1OaGRDaGJkbUZzWFNrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCd1lYSnpaV1JiYTJWNVhTQTlJSEJoY25ObFpGdHJaWGxkSUQ4Z2NHRnljMlZrVzJ0bGVWMGdLeUFuTENBbklDc2dkbUZzSURvZ2RtRnNPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlNrN1hHNWNiaUFnY21WMGRYSnVJSEJoY25ObFpEdGNibjA3WEc0aUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JpOHFLbHh1SUNvZ1UzbHVkR0ZqZEdsaklITjFaMkZ5SUdadmNpQnBiblp2YTJsdVp5QmhJR1oxYm1OMGFXOXVJR0Z1WkNCbGVIQmhibVJwYm1jZ1lXNGdZWEp5WVhrZ1ptOXlJR0Z5WjNWdFpXNTBjeTVjYmlBcVhHNGdLaUJEYjIxdGIyNGdkWE5sSUdOaGMyVWdkMjkxYkdRZ1ltVWdkRzhnZFhObElHQkdkVzVqZEdsdmJpNXdjbTkwYjNSNWNHVXVZWEJ3YkhsZ0xseHVJQ3BjYmlBcUlDQmdZR0JxYzF4dUlDb2dJR1oxYm1OMGFXOXVJR1lvZUN3Z2VTd2dlaWtnZTMxY2JpQXFJQ0IyWVhJZ1lYSm5jeUE5SUZzeExDQXlMQ0F6WFR0Y2JpQXFJQ0JtTG1Gd2NHeDVLRzUxYkd3c0lHRnlaM01wTzF4dUlDb2dJR0JnWUZ4dUlDcGNiaUFxSUZkcGRHZ2dZSE53Y21WaFpHQWdkR2hwY3lCbGVHRnRjR3hsSUdOaGJpQmlaU0J5WlMxM2NtbDBkR1Z1TGx4dUlDcGNiaUFxSUNCZ1lHQnFjMXh1SUNvZ0lITndjbVZoWkNobWRXNWpkR2x2YmloNExDQjVMQ0I2S1NCN2ZTa29XekVzSURJc0lETmRLVHRjYmlBcUlDQmdZR0JjYmlBcVhHNGdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0JqWVd4c1ltRmphMXh1SUNvZ1FISmxkSFZ5Ym5NZ2UwWjFibU4wYVc5dWZWeHVJQ292WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUhOd2NtVmhaQ2hqWVd4c1ltRmpheWtnZTF4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0Z2QzSmhjQ2hoY25JcElIdGNiaUFnSUNCeVpYUjFjbTRnWTJGc2JHSmhZMnN1WVhCd2JIa29iblZzYkN3Z1lYSnlLVHRjYmlBZ2ZUdGNibjA3WEc0aUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JuWmhjaUJpYVc1a0lEMGdjbVZ4ZFdseVpTZ25MaTlvWld4d1pYSnpMMkpwYm1RbktUdGNiblpoY2lCcGMwSjFabVpsY2lBOUlISmxjWFZwY21Vb0oybHpMV0oxWm1abGNpY3BPMXh1WEc0dkttZHNiMkpoYkNCMGIxTjBjbWx1WnpwMGNuVmxLaTljYmx4dUx5OGdkWFJwYkhNZ2FYTWdZU0JzYVdKeVlYSjVJRzltSUdkbGJtVnlhV01nYUdWc2NHVnlJR1oxYm1OMGFXOXVjeUJ1YjI0dGMzQmxZMmxtYVdNZ2RHOGdZWGhwYjNOY2JseHVkbUZ5SUhSdlUzUnlhVzVuSUQwZ1QySnFaV04wTG5CeWIzUnZkSGx3WlM1MGIxTjBjbWx1Wnp0Y2JseHVMeW9xWEc0Z0tpQkVaWFJsY20xcGJtVWdhV1lnWVNCMllXeDFaU0JwY3lCaGJpQkJjbkpoZVZ4dUlDcGNiaUFxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0IyWVd3Z1ZHaGxJSFpoYkhWbElIUnZJSFJsYzNSY2JpQXFJRUJ5WlhSMWNtNXpJSHRpYjI5c1pXRnVmU0JVY25WbElHbG1JSFpoYkhWbElHbHpJR0Z1SUVGeWNtRjVMQ0J2ZEdobGNuZHBjMlVnWm1Gc2MyVmNiaUFxTDF4dVpuVnVZM1JwYjI0Z2FYTkJjbkpoZVNoMllXd3BJSHRjYmlBZ2NtVjBkWEp1SUhSdlUzUnlhVzVuTG1OaGJHd29kbUZzS1NBOVBUMGdKMXR2WW1wbFkzUWdRWEp5WVhsZEp6dGNibjFjYmx4dUx5b3FYRzRnS2lCRVpYUmxjbTFwYm1VZ2FXWWdZU0IyWVd4MVpTQnBjeUJoYmlCQmNuSmhlVUoxWm1abGNseHVJQ3BjYmlBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCMllXd2dWR2hsSUhaaGJIVmxJSFJ2SUhSbGMzUmNiaUFxSUVCeVpYUjFjbTV6SUh0aWIyOXNaV0Z1ZlNCVWNuVmxJR2xtSUhaaGJIVmxJR2x6SUdGdUlFRnljbUY1UW5WbVptVnlMQ0J2ZEdobGNuZHBjMlVnWm1Gc2MyVmNiaUFxTDF4dVpuVnVZM1JwYjI0Z2FYTkJjbkpoZVVKMVptWmxjaWgyWVd3cElIdGNiaUFnY21WMGRYSnVJSFJ2VTNSeWFXNW5MbU5oYkd3b2RtRnNLU0E5UFQwZ0oxdHZZbXBsWTNRZ1FYSnlZWGxDZFdabVpYSmRKenRjYm4xY2JseHVMeW9xWEc0Z0tpQkVaWFJsY20xcGJtVWdhV1lnWVNCMllXeDFaU0JwY3lCaElFWnZjbTFFWVhSaFhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUhaaGJDQlVhR1VnZG1Gc2RXVWdkRzhnZEdWemRGeHVJQ29nUUhKbGRIVnlibk1nZTJKdmIyeGxZVzU5SUZSeWRXVWdhV1lnZG1Gc2RXVWdhWE1nWVc0Z1JtOXliVVJoZEdFc0lHOTBhR1Z5ZDJselpTQm1ZV3h6WlZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJwYzBadmNtMUVZWFJoS0haaGJDa2dlMXh1SUNCeVpYUjFjbTRnS0hSNWNHVnZaaUJHYjNKdFJHRjBZU0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJQ1ltSUNoMllXd2dhVzV6ZEdGdVkyVnZaaUJHYjNKdFJHRjBZU2s3WEc1OVhHNWNiaThxS2x4dUlDb2dSR1YwWlhKdGFXNWxJR2xtSUdFZ2RtRnNkV1VnYVhNZ1lTQjJhV1YzSUc5dUlHRnVJRUZ5Y21GNVFuVm1abVZ5WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJSFpoYkNCVWFHVWdkbUZzZFdVZ2RHOGdkR1Z6ZEZ4dUlDb2dRSEpsZEhWeWJuTWdlMkp2YjJ4bFlXNTlJRlJ5ZFdVZ2FXWWdkbUZzZFdVZ2FYTWdZU0IyYVdWM0lHOXVJR0Z1SUVGeWNtRjVRblZtWm1WeUxDQnZkR2hsY25kcGMyVWdabUZzYzJWY2JpQXFMMXh1Wm5WdVkzUnBiMjRnYVhOQmNuSmhlVUoxWm1abGNsWnBaWGNvZG1Gc0tTQjdYRzRnSUhaaGNpQnlaWE4xYkhRN1hHNGdJR2xtSUNnb2RIbHdaVzltSUVGeWNtRjVRblZtWm1WeUlDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ0ppWWdLRUZ5Y21GNVFuVm1abVZ5TG1selZtbGxkeWtwSUh0Y2JpQWdJQ0J5WlhOMWJIUWdQU0JCY25KaGVVSjFabVpsY2k1cGMxWnBaWGNvZG1Gc0tUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnlaWE4xYkhRZ1BTQW9kbUZzS1NBbUppQW9kbUZzTG1KMVptWmxjaWtnSmlZZ0tIWmhiQzVpZFdabVpYSWdhVzV6ZEdGdVkyVnZaaUJCY25KaGVVSjFabVpsY2lrN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYm4xY2JseHVMeW9xWEc0Z0tpQkVaWFJsY20xcGJtVWdhV1lnWVNCMllXeDFaU0JwY3lCaElGTjBjbWx1WjF4dUlDcGNiaUFxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0IyWVd3Z1ZHaGxJSFpoYkhWbElIUnZJSFJsYzNSY2JpQXFJRUJ5WlhSMWNtNXpJSHRpYjI5c1pXRnVmU0JVY25WbElHbG1JSFpoYkhWbElHbHpJR0VnVTNSeWFXNW5MQ0J2ZEdobGNuZHBjMlVnWm1Gc2MyVmNiaUFxTDF4dVpuVnVZM1JwYjI0Z2FYTlRkSEpwYm1jb2RtRnNLU0I3WEc0Z0lISmxkSFZ5YmlCMGVYQmxiMllnZG1Gc0lEMDlQU0FuYzNSeWFXNW5KenRjYm4xY2JseHVMeW9xWEc0Z0tpQkVaWFJsY20xcGJtVWdhV1lnWVNCMllXeDFaU0JwY3lCaElFNTFiV0psY2x4dUlDcGNiaUFxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0IyWVd3Z1ZHaGxJSFpoYkhWbElIUnZJSFJsYzNSY2JpQXFJRUJ5WlhSMWNtNXpJSHRpYjI5c1pXRnVmU0JVY25WbElHbG1JSFpoYkhWbElHbHpJR0VnVG5WdFltVnlMQ0J2ZEdobGNuZHBjMlVnWm1Gc2MyVmNiaUFxTDF4dVpuVnVZM1JwYjI0Z2FYTk9kVzFpWlhJb2RtRnNLU0I3WEc0Z0lISmxkSFZ5YmlCMGVYQmxiMllnZG1Gc0lEMDlQU0FuYm5WdFltVnlKenRjYm4xY2JseHVMeW9xWEc0Z0tpQkVaWFJsY20xcGJtVWdhV1lnWVNCMllXeDFaU0JwY3lCMWJtUmxabWx1WldSY2JpQXFYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnZG1Gc0lGUm9aU0IyWVd4MVpTQjBieUIwWlhOMFhHNGdLaUJBY21WMGRYSnVjeUI3WW05dmJHVmhibjBnVkhKMVpTQnBaaUIwYUdVZ2RtRnNkV1VnYVhNZ2RXNWtaV1pwYm1Wa0xDQnZkR2hsY25kcGMyVWdabUZzYzJWY2JpQXFMMXh1Wm5WdVkzUnBiMjRnYVhOVmJtUmxabWx1WldRb2RtRnNLU0I3WEc0Z0lISmxkSFZ5YmlCMGVYQmxiMllnZG1Gc0lEMDlQU0FuZFc1a1pXWnBibVZrSnp0Y2JuMWNibHh1THlvcVhHNGdLaUJFWlhSbGNtMXBibVVnYVdZZ1lTQjJZV3gxWlNCcGN5QmhiaUJQWW1wbFkzUmNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2RtRnNJRlJvWlNCMllXeDFaU0IwYnlCMFpYTjBYRzRnS2lCQWNtVjBkWEp1Y3lCN1ltOXZiR1ZoYm4wZ1ZISjFaU0JwWmlCMllXeDFaU0JwY3lCaGJpQlBZbXBsWTNRc0lHOTBhR1Z5ZDJselpTQm1ZV3h6WlZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJwYzA5aWFtVmpkQ2gyWVd3cElIdGNiaUFnY21WMGRYSnVJSFpoYkNBaFBUMGdiblZzYkNBbUppQjBlWEJsYjJZZ2RtRnNJRDA5UFNBbmIySnFaV04wSnp0Y2JuMWNibHh1THlvcVhHNGdLaUJFWlhSbGNtMXBibVVnYVdZZ1lTQjJZV3gxWlNCcGN5QmhJRVJoZEdWY2JpQXFYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnZG1Gc0lGUm9aU0IyWVd4MVpTQjBieUIwWlhOMFhHNGdLaUJBY21WMGRYSnVjeUI3WW05dmJHVmhibjBnVkhKMVpTQnBaaUIyWVd4MVpTQnBjeUJoSUVSaGRHVXNJRzkwYUdWeWQybHpaU0JtWVd4elpWeHVJQ292WEc1bWRXNWpkR2x2YmlCcGMwUmhkR1VvZG1Gc0tTQjdYRzRnSUhKbGRIVnliaUIwYjFOMGNtbHVaeTVqWVd4c0tIWmhiQ2tnUFQwOUlDZGJiMkpxWldOMElFUmhkR1ZkSnp0Y2JuMWNibHh1THlvcVhHNGdLaUJFWlhSbGNtMXBibVVnYVdZZ1lTQjJZV3gxWlNCcGN5QmhJRVpwYkdWY2JpQXFYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnZG1Gc0lGUm9aU0IyWVd4MVpTQjBieUIwWlhOMFhHNGdLaUJBY21WMGRYSnVjeUI3WW05dmJHVmhibjBnVkhKMVpTQnBaaUIyWVd4MVpTQnBjeUJoSUVacGJHVXNJRzkwYUdWeWQybHpaU0JtWVd4elpWeHVJQ292WEc1bWRXNWpkR2x2YmlCcGMwWnBiR1VvZG1Gc0tTQjdYRzRnSUhKbGRIVnliaUIwYjFOMGNtbHVaeTVqWVd4c0tIWmhiQ2tnUFQwOUlDZGJiMkpxWldOMElFWnBiR1ZkSnp0Y2JuMWNibHh1THlvcVhHNGdLaUJFWlhSbGNtMXBibVVnYVdZZ1lTQjJZV3gxWlNCcGN5QmhJRUpzYjJKY2JpQXFYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnZG1Gc0lGUm9aU0IyWVd4MVpTQjBieUIwWlhOMFhHNGdLaUJBY21WMGRYSnVjeUI3WW05dmJHVmhibjBnVkhKMVpTQnBaaUIyWVd4MVpTQnBjeUJoSUVKc2IySXNJRzkwYUdWeWQybHpaU0JtWVd4elpWeHVJQ292WEc1bWRXNWpkR2x2YmlCcGMwSnNiMklvZG1Gc0tTQjdYRzRnSUhKbGRIVnliaUIwYjFOMGNtbHVaeTVqWVd4c0tIWmhiQ2tnUFQwOUlDZGJiMkpxWldOMElFSnNiMkpkSnp0Y2JuMWNibHh1THlvcVhHNGdLaUJFWlhSbGNtMXBibVVnYVdZZ1lTQjJZV3gxWlNCcGN5QmhJRVoxYm1OMGFXOXVYRzRnS2x4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlIWmhiQ0JVYUdVZ2RtRnNkV1VnZEc4Z2RHVnpkRnh1SUNvZ1FISmxkSFZ5Ym5NZ2UySnZiMnhsWVc1OUlGUnlkV1VnYVdZZ2RtRnNkV1VnYVhNZ1lTQkdkVzVqZEdsdmJpd2diM1JvWlhKM2FYTmxJR1poYkhObFhHNGdLaTljYm1aMWJtTjBhVzl1SUdselJuVnVZM1JwYjI0b2RtRnNLU0I3WEc0Z0lISmxkSFZ5YmlCMGIxTjBjbWx1Wnk1allXeHNLSFpoYkNrZ1BUMDlJQ2RiYjJKcVpXTjBJRVoxYm1OMGFXOXVYU2M3WEc1OVhHNWNiaThxS2x4dUlDb2dSR1YwWlhKdGFXNWxJR2xtSUdFZ2RtRnNkV1VnYVhNZ1lTQlRkSEpsWVcxY2JpQXFYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnZG1Gc0lGUm9aU0IyWVd4MVpTQjBieUIwWlhOMFhHNGdLaUJBY21WMGRYSnVjeUI3WW05dmJHVmhibjBnVkhKMVpTQnBaaUIyWVd4MVpTQnBjeUJoSUZOMGNtVmhiU3dnYjNSb1pYSjNhWE5sSUdaaGJITmxYRzRnS2k5Y2JtWjFibU4wYVc5dUlHbHpVM1J5WldGdEtIWmhiQ2tnZTF4dUlDQnlaWFIxY200Z2FYTlBZbXBsWTNRb2RtRnNLU0FtSmlCcGMwWjFibU4wYVc5dUtIWmhiQzV3YVhCbEtUdGNibjFjYmx4dUx5b3FYRzRnS2lCRVpYUmxjbTFwYm1VZ2FXWWdZU0IyWVd4MVpTQnBjeUJoSUZWU1RGTmxZWEpqYUZCaGNtRnRjeUJ2WW1wbFkzUmNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2RtRnNJRlJvWlNCMllXeDFaU0IwYnlCMFpYTjBYRzRnS2lCQWNtVjBkWEp1Y3lCN1ltOXZiR1ZoYm4wZ1ZISjFaU0JwWmlCMllXeDFaU0JwY3lCaElGVlNURk5sWVhKamFGQmhjbUZ0Y3lCdlltcGxZM1FzSUc5MGFHVnlkMmx6WlNCbVlXeHpaVnh1SUNvdlhHNW1kVzVqZEdsdmJpQnBjMVZTVEZObFlYSmphRkJoY21GdGN5aDJZV3dwSUh0Y2JpQWdjbVYwZFhKdUlIUjVjR1Z2WmlCVlVreFRaV0Z5WTJoUVlYSmhiWE1nSVQwOUlDZDFibVJsWm1sdVpXUW5JQ1ltSUhaaGJDQnBibk4wWVc1alpXOW1JRlZTVEZObFlYSmphRkJoY21GdGN6dGNibjFjYmx4dUx5b3FYRzRnS2lCVWNtbHRJR1Y0WTJWemN5QjNhR2wwWlhOd1lXTmxJRzltWmlCMGFHVWdZbVZuYVc1dWFXNW5JR0Z1WkNCbGJtUWdiMllnWVNCemRISnBibWRjYmlBcVhHNGdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdjM1J5SUZSb1pTQlRkSEpwYm1jZ2RHOGdkSEpwYlZ4dUlDb2dRSEpsZEhWeWJuTWdlMU4wY21sdVozMGdWR2hsSUZOMGNtbHVaeUJtY21WbFpDQnZaaUJsZUdObGMzTWdkMmhwZEdWemNHRmpaVnh1SUNvdlhHNW1kVzVqZEdsdmJpQjBjbWx0S0hOMGNpa2dlMXh1SUNCeVpYUjFjbTRnYzNSeUxuSmxjR3hoWTJVb0wxNWNYSE1xTHl3Z0p5Y3BMbkpsY0d4aFkyVW9MMXhjY3lva0x5d2dKeWNwTzF4dWZWeHVYRzR2S2lwY2JpQXFJRVJsZEdWeWJXbHVaU0JwWmlCM1pTZHlaU0J5ZFc1dWFXNW5JR2x1SUdFZ2MzUmhibVJoY21RZ1luSnZkM05sY2lCbGJuWnBjbTl1YldWdWRGeHVJQ3BjYmlBcUlGUm9hWE1nWVd4c2IzZHpJR0Y0YVc5eklIUnZJSEoxYmlCcGJpQmhJSGRsWWlCM2IzSnJaWElzSUdGdVpDQnlaV0ZqZEMxdVlYUnBkbVV1WEc0Z0tpQkNiM1JvSUdWdWRtbHliMjV0Wlc1MGN5QnpkWEJ3YjNKMElGaE5URWgwZEhCU1pYRjFaWE4wTENCaWRYUWdibTkwSUdaMWJHeDVJSE4wWVc1a1lYSmtJR2RzYjJKaGJITXVYRzRnS2x4dUlDb2dkMlZpSUhkdmNtdGxjbk02WEc0Z0tpQWdkSGx3Wlc5bUlIZHBibVJ2ZHlBdFBpQjFibVJsWm1sdVpXUmNiaUFxSUNCMGVYQmxiMllnWkc5amRXMWxiblFnTFQ0Z2RXNWtaV1pwYm1Wa1hHNGdLbHh1SUNvZ2NtVmhZM1F0Ym1GMGFYWmxPbHh1SUNvZ0lHNWhkbWxuWVhSdmNpNXdjbTlrZFdOMElDMCtJQ2RTWldGamRFNWhkR2wyWlNkY2JpQXFMMXh1Wm5WdVkzUnBiMjRnYVhOVGRHRnVaR0Z5WkVKeWIzZHpaWEpGYm5Zb0tTQjdYRzRnSUdsbUlDaDBlWEJsYjJZZ2JtRjJhV2RoZEc5eUlDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQnVZWFpwWjJGMGIzSXVjSEp2WkhWamRDQTlQVDBnSjFKbFlXTjBUbUYwYVhabEp5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lIUjVjR1Z2WmlCM2FXNWtiM2NnSVQwOUlDZDFibVJsWm1sdVpXUW5JQ1ltWEc0Z0lDQWdkSGx3Wlc5bUlHUnZZM1Z0Wlc1MElDRTlQU0FuZFc1a1pXWnBibVZrSjF4dUlDQXBPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFbDBaWEpoZEdVZ2IzWmxjaUJoYmlCQmNuSmhlU0J2Y2lCaGJpQlBZbXBsWTNRZ2FXNTJiMnRwYm1jZ1lTQm1kVzVqZEdsdmJpQm1iM0lnWldGamFDQnBkR1Z0TGx4dUlDcGNiaUFxSUVsbUlHQnZZbXBnSUdseklHRnVJRUZ5Y21GNUlHTmhiR3hpWVdOcklIZHBiR3dnWW1VZ1kyRnNiR1ZrSUhCaGMzTnBibWRjYmlBcUlIUm9aU0IyWVd4MVpTd2dhVzVrWlhnc0lHRnVaQ0JqYjIxd2JHVjBaU0JoY25KaGVTQm1iM0lnWldGamFDQnBkR1Z0TGx4dUlDcGNiaUFxSUVsbUlDZHZZbW9uSUdseklHRnVJRTlpYW1WamRDQmpZV3hzWW1GamF5QjNhV3hzSUdKbElHTmhiR3hsWkNCd1lYTnphVzVuWEc0Z0tpQjBhR1VnZG1Gc2RXVXNJR3RsZVN3Z1lXNWtJR052YlhCc1pYUmxJRzlpYW1WamRDQm1iM0lnWldGamFDQndjbTl3WlhKMGVTNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEh4QmNuSmhlWDBnYjJKcUlGUm9aU0J2WW1wbFkzUWdkRzhnYVhSbGNtRjBaVnh1SUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ1ptNGdWR2hsSUdOaGJHeGlZV05ySUhSdklHbHVkbTlyWlNCbWIzSWdaV0ZqYUNCcGRHVnRYRzRnS2k5Y2JtWjFibU4wYVc5dUlHWnZja1ZoWTJnb2IySnFMQ0JtYmlrZ2UxeHVJQ0F2THlCRWIyNG5kQ0JpYjNSb1pYSWdhV1lnYm04Z2RtRnNkV1VnY0hKdmRtbGtaV1JjYmlBZ2FXWWdLRzlpYWlBOVBUMGdiblZzYkNCOGZDQjBlWEJsYjJZZ2IySnFJRDA5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lISmxkSFZ5Ymp0Y2JpQWdmVnh1WEc0Z0lDOHZJRVp2Y21ObElHRnVJR0Z5Y21GNUlHbG1JRzV2ZENCaGJISmxZV1I1SUhOdmJXVjBhR2x1WnlCcGRHVnlZV0pzWlZ4dUlDQnBaaUFvZEhsd1pXOW1JRzlpYWlBaFBUMGdKMjlpYW1WamRDY3BJSHRjYmlBZ0lDQXZLbVZ6YkdsdWRDQnVieTF3WVhKaGJTMXlaV0Z6YzJsbmJqb3dLaTljYmlBZ0lDQnZZbW9nUFNCYmIySnFYVHRjYmlBZ2ZWeHVYRzRnSUdsbUlDaHBjMEZ5Y21GNUtHOWlhaWtwSUh0Y2JpQWdJQ0F2THlCSmRHVnlZWFJsSUc5MlpYSWdZWEp5WVhrZ2RtRnNkV1Z6WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SURBc0lHd2dQU0J2WW1vdWJHVnVaM1JvT3lCcElEd2diRHNnYVNzcktTQjdYRzRnSUNBZ0lDQm1iaTVqWVd4c0tHNTFiR3dzSUc5aWFsdHBYU3dnYVN3Z2IySnFLVHRjYmlBZ0lDQjlYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdMeThnU1hSbGNtRjBaU0J2ZG1WeUlHOWlhbVZqZENCclpYbHpYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2EyVjVJR2x1SUc5aWFpa2dlMXh1SUNBZ0lDQWdhV1lnS0U5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNodlltb3NJR3RsZVNrcElIdGNiaUFnSUNBZ0lDQWdabTR1WTJGc2JDaHVkV3hzTENCdlltcGJhMlY1WFN3Z2EyVjVMQ0J2WW1vcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVhHNHZLaXBjYmlBcUlFRmpZMlZ3ZEhNZ2RtRnlZWEpuY3lCbGVIQmxZM1JwYm1jZ1pXRmphQ0JoY21kMWJXVnVkQ0IwYnlCaVpTQmhiaUJ2WW1wbFkzUXNJSFJvWlc1Y2JpQXFJR2x0YlhWMFlXSnNlU0J0WlhKblpYTWdkR2hsSUhCeWIzQmxjblJwWlhNZ2IyWWdaV0ZqYUNCdlltcGxZM1FnWVc1a0lISmxkSFZ5Ym5NZ2NtVnpkV3gwTGx4dUlDcGNiaUFxSUZkb1pXNGdiWFZzZEdsd2JHVWdiMkpxWldOMGN5QmpiMjUwWVdsdUlIUm9aU0J6WVcxbElHdGxlU0IwYUdVZ2JHRjBaWElnYjJKcVpXTjBJR2x1WEc0Z0tpQjBhR1VnWVhKbmRXMWxiblJ6SUd4cGMzUWdkMmxzYkNCMFlXdGxJSEJ5WldObFpHVnVZMlV1WEc0Z0tseHVJQ29nUlhoaGJYQnNaVHBjYmlBcVhHNGdLaUJnWUdCcWMxeHVJQ29nZG1GeUlISmxjM1ZzZENBOUlHMWxjbWRsS0h0bWIyODZJREV5TTMwc0lIdG1iMjg2SURRMU5uMHBPMXh1SUNvZ1kyOXVjMjlzWlM1c2IyY29jbVZ6ZFd4MExtWnZieWs3SUM4dklHOTFkSEIxZEhNZ05EVTJYRzRnS2lCZ1lHQmNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IySnFNU0JQWW1wbFkzUWdkRzhnYldWeVoyVmNiaUFxSUVCeVpYUjFjbTV6SUh0UFltcGxZM1I5SUZKbGMzVnNkQ0J2WmlCaGJHd2diV1Z5WjJVZ2NISnZjR1Z5ZEdsbGMxeHVJQ292WEc1bWRXNWpkR2x2YmlCdFpYSm5aU2d2S2lCdlltb3hMQ0J2WW1veUxDQnZZbW96TENBdUxpNGdLaThwSUh0Y2JpQWdkbUZ5SUhKbGMzVnNkQ0E5SUh0OU8xeHVJQ0JtZFc1amRHbHZiaUJoYzNOcFoyNVdZV3gxWlNoMllXd3NJR3RsZVNrZ2UxeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2NtVnpkV3gwVzJ0bGVWMGdQVDA5SUNkdlltcGxZM1FuSUNZbUlIUjVjR1Z2WmlCMllXd2dQVDA5SUNkdlltcGxZM1FuS1NCN1hHNGdJQ0FnSUNCeVpYTjFiSFJiYTJWNVhTQTlJRzFsY21kbEtISmxjM1ZzZEZ0clpYbGRMQ0IyWVd3cE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0J5WlhOMWJIUmJhMlY1WFNBOUlIWmhiRHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Dd2diQ0E5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2c3SUdrZ1BDQnNPeUJwS3lzcElIdGNiaUFnSUNCbWIzSkZZV05vS0dGeVozVnRaVzUwYzF0cFhTd2dZWE56YVdkdVZtRnNkV1VwTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1JYaDBaVzVrY3lCdlltcGxZM1FnWVNCaWVTQnRkWFJoWW14NUlHRmtaR2x1WnlCMGJ5QnBkQ0IwYUdVZ2NISnZjR1Z5ZEdsbGN5QnZaaUJ2WW1wbFkzUWdZaTVjYmlBcVhHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdZU0JVYUdVZ2IySnFaV04wSUhSdklHSmxJR1Y0ZEdWdVpHVmtYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnWWlCVWFHVWdiMkpxWldOMElIUnZJR052Y0hrZ2NISnZjR1Z5ZEdsbGN5Qm1jbTl0WEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2RHaHBjMEZ5WnlCVWFHVWdiMkpxWldOMElIUnZJR0pwYm1RZ1puVnVZM1JwYjI0Z2RHOWNiaUFxSUVCeVpYUjFjbTRnZTA5aWFtVmpkSDBnVkdobElISmxjM1ZzZEdsdVp5QjJZV3gxWlNCdlppQnZZbXBsWTNRZ1lWeHVJQ292WEc1bWRXNWpkR2x2YmlCbGVIUmxibVFvWVN3Z1lpd2dkR2hwYzBGeVp5a2dlMXh1SUNCbWIzSkZZV05vS0dJc0lHWjFibU4wYVc5dUlHRnpjMmxuYmxaaGJIVmxLSFpoYkN3Z2EyVjVLU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTkJjbWNnSmlZZ2RIbHdaVzltSUhaaGJDQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ1lWdHJaWGxkSUQwZ1ltbHVaQ2gyWVd3c0lIUm9hWE5CY21jcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JoVzJ0bGVWMGdQU0IyWVd3N1hHNGdJQ0FnZlZ4dUlDQjlLVHRjYmlBZ2NtVjBkWEp1SUdFN1hHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnZTF4dUlDQnBjMEZ5Y21GNU9pQnBjMEZ5Y21GNUxGeHVJQ0JwYzBGeWNtRjVRblZtWm1WeU9pQnBjMEZ5Y21GNVFuVm1abVZ5TEZ4dUlDQnBjMEoxWm1abGNqb2dhWE5DZFdabVpYSXNYRzRnSUdselJtOXliVVJoZEdFNklHbHpSbTl5YlVSaGRHRXNYRzRnSUdselFYSnlZWGxDZFdabVpYSldhV1YzT2lCcGMwRnljbUY1UW5WbVptVnlWbWxsZHl4Y2JpQWdhWE5UZEhKcGJtYzZJR2x6VTNSeWFXNW5MRnh1SUNCcGMwNTFiV0psY2pvZ2FYTk9kVzFpWlhJc1hHNGdJR2x6VDJKcVpXTjBPaUJwYzA5aWFtVmpkQ3hjYmlBZ2FYTlZibVJsWm1sdVpXUTZJR2x6Vlc1a1pXWnBibVZrTEZ4dUlDQnBjMFJoZEdVNklHbHpSR0YwWlN4Y2JpQWdhWE5HYVd4bE9pQnBjMFpwYkdVc1hHNGdJR2x6UW14dllqb2dhWE5DYkc5aUxGeHVJQ0JwYzBaMWJtTjBhVzl1T2lCcGMwWjFibU4wYVc5dUxGeHVJQ0JwYzFOMGNtVmhiVG9nYVhOVGRISmxZVzBzWEc0Z0lHbHpWVkpNVTJWaGNtTm9VR0Z5WVcxek9pQnBjMVZTVEZObFlYSmphRkJoY21GdGN5eGNiaUFnYVhOVGRHRnVaR0Z5WkVKeWIzZHpaWEpGYm5ZNklHbHpVM1JoYm1SaGNtUkNjbTkzYzJWeVJXNTJMRnh1SUNCbWIzSkZZV05vT2lCbWIzSkZZV05vTEZ4dUlDQnRaWEpuWlRvZ2JXVnlaMlVzWEc0Z0lHVjRkR1Z1WkRvZ1pYaDBaVzVrTEZ4dUlDQjBjbWx0T2lCMGNtbHRYRzU5TzF4dUlpd2lMeW9oWEc0Z0tpQkVaWFJsY20xcGJtVWdhV1lnWVc0Z2IySnFaV04wSUdseklHRWdRblZtWm1WeVhHNGdLbHh1SUNvZ1FHRjFkR2h2Y2lBZ0lFWmxjbTl6Y3lCQlltOTFhMmhoWkdscVpXZ2dQR2gwZEhCek9pOHZabVZ5YjNOekxtOXlaejVjYmlBcUlFQnNhV05sYm5ObElDQk5TVlJjYmlBcUwxeHVYRzR2THlCVWFHVWdYMmx6UW5WbVptVnlJR05vWldOcklHbHpJR1p2Y2lCVFlXWmhjbWtnTlMwM0lITjFjSEJ2Y25Rc0lHSmxZMkYxYzJVZ2FYUW5jeUJ0YVhOemFXNW5YRzR2THlCUFltcGxZM1F1Y0hKdmRHOTBlWEJsTG1OdmJuTjBjblZqZEc5eUxpQlNaVzF2ZG1VZ2RHaHBjeUJsZG1WdWRIVmhiR3g1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUNodlltb3BJSHRjYmlBZ2NtVjBkWEp1SUc5aWFpQWhQU0J1ZFd4c0lDWW1JQ2hwYzBKMVptWmxjaWh2WW1vcElIeDhJR2x6VTJ4dmQwSjFabVpsY2lodlltb3BJSHg4SUNFaGIySnFMbDlwYzBKMVptWmxjaWxjYm4xY2JseHVablZ1WTNScGIyNGdhWE5DZFdabVpYSWdLRzlpYWlrZ2UxeHVJQ0J5WlhSMWNtNGdJU0Z2WW1vdVkyOXVjM1J5ZFdOMGIzSWdKaVlnZEhsd1pXOW1JRzlpYWk1amIyNXpkSEoxWTNSdmNpNXBjMEoxWm1abGNpQTlQVDBnSjJaMWJtTjBhVzl1SnlBbUppQnZZbW91WTI5dWMzUnlkV04wYjNJdWFYTkNkV1ptWlhJb2IySnFLVnh1ZlZ4dVhHNHZMeUJHYjNJZ1RtOWtaU0IyTUM0eE1DQnpkWEJ3YjNKMExpQlNaVzF2ZG1VZ2RHaHBjeUJsZG1WdWRIVmhiR3g1TGx4dVpuVnVZM1JwYjI0Z2FYTlRiRzkzUW5WbVptVnlJQ2h2WW1vcElIdGNiaUFnY21WMGRYSnVJSFI1Y0dWdlppQnZZbW91Y21WaFpFWnNiMkYwVEVVZ1BUMDlJQ2RtZFc1amRHbHZiaWNnSmlZZ2RIbHdaVzltSUc5aWFpNXpiR2xqWlNBOVBUMGdKMloxYm1OMGFXOXVKeUFtSmlCcGMwSjFabVpsY2lodlltb3VjMnhwWTJVb01Dd2dNQ2twWEc1OVhHNGlMQ0l2THlCemFHbHRJR1p2Y2lCMWMybHVaeUJ3Y205alpYTnpJR2x1SUdKeWIzZHpaWEpjYm5aaGNpQndjbTlqWlhOeklEMGdiVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdmVHRjYmx4dUx5OGdZMkZqYUdWa0lHWnliMjBnZDJoaGRHVjJaWElnWjJ4dlltRnNJR2x6SUhCeVpYTmxiblFnYzI4Z2RHaGhkQ0IwWlhOMElISjFibTVsY25NZ2RHaGhkQ0J6ZEhWaUlHbDBYRzR2THlCa2IyNG5kQ0JpY21WaGF5QjBhR2x1WjNNdUlDQkNkWFFnZDJVZ2JtVmxaQ0IwYnlCM2NtRndJR2wwSUdsdUlHRWdkSEo1SUdOaGRHTm9JR2x1SUdOaGMyVWdhWFFnYVhOY2JpOHZJSGR5WVhCd1pXUWdhVzRnYzNSeWFXTjBJRzF2WkdVZ1kyOWtaU0IzYUdsamFDQmtiMlZ6YmlkMElHUmxabWx1WlNCaGJua2daMnh2WW1Gc2N5NGdJRWwwSjNNZ2FXNXphV1JsSUdGY2JpOHZJR1oxYm1OMGFXOXVJR0psWTJGMWMyVWdkSEo1TDJOaGRHTm9aWE1nWkdWdmNIUnBiV2w2WlNCcGJpQmpaWEowWVdsdUlHVnVaMmx1WlhNdVhHNWNiblpoY2lCallXTm9aV1JUWlhSVWFXMWxiM1YwTzF4dWRtRnlJR05oWTJobFpFTnNaV0Z5VkdsdFpXOTFkRHRjYmx4dVpuVnVZM1JwYjI0Z1pHVm1ZWFZzZEZObGRGUnBiVzkxZENncElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjNObGRGUnBiV1Z2ZFhRZ2FHRnpJRzV2ZENCaVpXVnVJR1JsWm1sdVpXUW5LVHRjYm4xY2JtWjFibU4wYVc5dUlHUmxabUYxYkhSRGJHVmhjbFJwYldWdmRYUWdLQ2tnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25ZMnhsWVhKVWFXMWxiM1YwSUdoaGN5QnViM1FnWW1WbGJpQmtaV1pwYm1Wa0p5azdYRzU5WEc0b1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2MyVjBWR2x0Wlc5MWRDQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGamFHVmtVMlYwVkdsdFpXOTFkQ0E5SUhObGRGUnBiV1Z2ZFhRN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVdOb1pXUlRaWFJVYVcxbGIzVjBJRDBnWkdWbVlYVnNkRk5sZEZScGJXOTFkRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUNBZ1kyRmphR1ZrVTJWMFZHbHRaVzkxZENBOUlHUmxabUYxYkhSVFpYUlVhVzF2ZFhRN1hHNGdJQ0FnZlZ4dUlDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdZMnhsWVhKVWFXMWxiM1YwSUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZV05vWldSRGJHVmhjbFJwYldWdmRYUWdQU0JqYkdWaGNsUnBiV1Z2ZFhRN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVdOb1pXUkRiR1ZoY2xScGJXVnZkWFFnUFNCa1pXWmhkV3gwUTJ4bFlYSlVhVzFsYjNWME8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmpZWFJqYUNBb1pTa2dlMXh1SUNBZ0lDQWdJQ0JqWVdOb1pXUkRiR1ZoY2xScGJXVnZkWFFnUFNCa1pXWmhkV3gwUTJ4bFlYSlVhVzFsYjNWME8xeHVJQ0FnSUgxY2JuMGdLQ2twWEc1bWRXNWpkR2x2YmlCeWRXNVVhVzFsYjNWMEtHWjFiaWtnZTF4dUlDQWdJR2xtSUNoallXTm9aV1JUWlhSVWFXMWxiM1YwSUQwOVBTQnpaWFJVYVcxbGIzVjBLU0I3WEc0Z0lDQWdJQ0FnSUM4dmJtOXliV0ZzSUdWdWRtbHliMjFsYm5SeklHbHVJSE5oYm1VZ2MybDBkV0YwYVc5dWMxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyVjBWR2x0Wlc5MWRDaG1kVzRzSURBcE8xeHVJQ0FnSUgxY2JpQWdJQ0F2THlCcFppQnpaWFJVYVcxbGIzVjBJSGRoYzI0bmRDQmhkbUZwYkdGaWJHVWdZblYwSUhkaGN5QnNZWFIwWlhJZ1pHVm1hVzVsWkZ4dUlDQWdJR2xtSUNnb1kyRmphR1ZrVTJWMFZHbHRaVzkxZENBOVBUMGdaR1ZtWVhWc2RGTmxkRlJwYlc5MWRDQjhmQ0FoWTJGamFHVmtVMlYwVkdsdFpXOTFkQ2tnSmlZZ2MyVjBWR2x0Wlc5MWRDa2dlMXh1SUNBZ0lDQWdJQ0JqWVdOb1pXUlRaWFJVYVcxbGIzVjBJRDBnYzJWMFZHbHRaVzkxZER0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhObGRGUnBiV1Z2ZFhRb1puVnVMQ0F3S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0x5OGdkMmhsYmlCM2FHVnVJSE52YldWaWIyUjVJR2hoY3lCelkzSmxkMlZrSUhkcGRHZ2djMlYwVkdsdFpXOTFkQ0JpZFhRZ2JtOGdTUzVGTGlCdFlXUmtibVZ6YzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWTJGamFHVmtVMlYwVkdsdFpXOTFkQ2htZFc0c0lEQXBPMXh1SUNBZ0lIMGdZMkYwWTJnb1pTbDdYRzRnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCWGFHVnVJSGRsSUdGeVpTQnBiaUJKTGtVdUlHSjFkQ0IwYUdVZ2MyTnlhWEIwSUdoaGN5QmlaV1Z1SUdWMllXeGxaQ0J6YnlCSkxrVXVJR1J2WlhOdUozUWdkSEoxYzNRZ2RHaGxJR2RzYjJKaGJDQnZZbXBsWTNRZ2QyaGxiaUJqWVd4c1pXUWdibTl5YldGc2JIbGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJqWVdOb1pXUlRaWFJVYVcxbGIzVjBMbU5oYkd3b2JuVnNiQ3dnWm5WdUxDQXdLVHRjYmlBZ0lDQWdJQ0FnZlNCallYUmphQ2hsS1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhOaGJXVWdZWE1nWVdKdmRtVWdZblYwSUhkb1pXNGdhWFFuY3lCaElIWmxjbk5wYjI0Z2IyWWdTUzVGTGlCMGFHRjBJRzExYzNRZ2FHRjJaU0IwYUdVZ1oyeHZZbUZzSUc5aWFtVmpkQ0JtYjNJZ0ozUm9hWE1uTENCb2IzQm1kV3hzZVNCdmRYSWdZMjl1ZEdWNGRDQmpiM0p5WldOMElHOTBhR1Z5ZDJselpTQnBkQ0IzYVd4c0lIUm9jbTkzSUdFZ1oyeHZZbUZzSUdWeWNtOXlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWTJGamFHVmtVMlYwVkdsdFpXOTFkQzVqWVd4c0tIUm9hWE1zSUdaMWJpd2dNQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JseHVmVnh1Wm5WdVkzUnBiMjRnY25WdVEyeGxZWEpVYVcxbGIzVjBLRzFoY210bGNpa2dlMXh1SUNBZ0lHbG1JQ2hqWVdOb1pXUkRiR1ZoY2xScGJXVnZkWFFnUFQwOUlHTnNaV0Z5VkdsdFpXOTFkQ2tnZTF4dUlDQWdJQ0FnSUNBdkwyNXZjbTFoYkNCbGJuWnBjbTl0Wlc1MGN5QnBiaUJ6WVc1bElITnBkSFZoZEdsdmJuTmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHTnNaV0Z5VkdsdFpXOTFkQ2h0WVhKclpYSXBPMXh1SUNBZ0lIMWNiaUFnSUNBdkx5QnBaaUJqYkdWaGNsUnBiV1Z2ZFhRZ2QyRnpiaWQwSUdGMllXbHNZV0pzWlNCaWRYUWdkMkZ6SUd4aGRIUmxjaUJrWldacGJtVmtYRzRnSUNBZ2FXWWdLQ2hqWVdOb1pXUkRiR1ZoY2xScGJXVnZkWFFnUFQwOUlHUmxabUYxYkhSRGJHVmhjbFJwYldWdmRYUWdmSHdnSVdOaFkyaGxaRU5zWldGeVZHbHRaVzkxZENrZ0ppWWdZMnhsWVhKVWFXMWxiM1YwS1NCN1hHNGdJQ0FnSUNBZ0lHTmhZMmhsWkVOc1pXRnlWR2x0Wlc5MWRDQTlJR05zWldGeVZHbHRaVzkxZER0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOc1pXRnlWR2x0Wlc5MWRDaHRZWEpyWlhJcE8xeHVJQ0FnSUgxY2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQXZMeUIzYUdWdUlIZG9aVzRnYzI5dFpXSnZaSGtnYUdGeklITmpjbVYzWldRZ2QybDBhQ0J6WlhSVWFXMWxiM1YwSUdKMWRDQnVieUJKTGtVdUlHMWhaR1J1WlhOelhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCallXTm9aV1JEYkdWaGNsUnBiV1Z2ZFhRb2JXRnlhMlZ5S1R0Y2JpQWdJQ0I5SUdOaGRHTm9JQ2hsS1h0Y2JpQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRmRvWlc0Z2QyVWdZWEpsSUdsdUlFa3VSUzRnWW5WMElIUm9aU0J6WTNKcGNIUWdhR0Z6SUdKbFpXNGdaWFpoYkdWa0lITnZJRWt1UlM0Z1pHOWxjMjRuZENBZ2RISjFjM1FnZEdobElHZHNiMkpoYkNCdlltcGxZM1FnZDJobGJpQmpZV3hzWldRZ2JtOXliV0ZzYkhsY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmpZV05vWldSRGJHVmhjbFJwYldWdmRYUXVZMkZzYkNodWRXeHNMQ0J0WVhKclpYSXBPMXh1SUNBZ0lDQWdJQ0I5SUdOaGRHTm9JQ2hsS1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhOaGJXVWdZWE1nWVdKdmRtVWdZblYwSUhkb1pXNGdhWFFuY3lCaElIWmxjbk5wYjI0Z2IyWWdTUzVGTGlCMGFHRjBJRzExYzNRZ2FHRjJaU0IwYUdVZ1oyeHZZbUZzSUc5aWFtVmpkQ0JtYjNJZ0ozUm9hWE1uTENCb2IzQm1kV3hzZVNCdmRYSWdZMjl1ZEdWNGRDQmpiM0p5WldOMElHOTBhR1Z5ZDJselpTQnBkQ0IzYVd4c0lIUm9jbTkzSUdFZ1oyeHZZbUZzSUdWeWNtOXlMbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdVMjl0WlNCMlpYSnphVzl1Y3lCdlppQkpMa1V1SUdoaGRtVWdaR2xtWm1WeVpXNTBJSEoxYkdWeklHWnZjaUJqYkdWaGNsUnBiV1Z2ZFhRZ2RuTWdjMlYwVkdsdFpXOTFkRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOaFkyaGxaRU5zWldGeVZHbHRaVzkxZEM1allXeHNLSFJvYVhNc0lHMWhjbXRsY2lrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNibHh1WEc1OVhHNTJZWElnY1hWbGRXVWdQU0JiWFR0Y2JuWmhjaUJrY21GcGJtbHVaeUE5SUdaaGJITmxPMXh1ZG1GeUlHTjFjbkpsYm5SUmRXVjFaVHRjYm5aaGNpQnhkV1YxWlVsdVpHVjRJRDBnTFRFN1hHNWNibVoxYm1OMGFXOXVJR05zWldGdVZYQk9aWGgwVkdsamF5Z3BJSHRjYmlBZ0lDQnBaaUFvSVdSeVlXbHVhVzVuSUh4OElDRmpkWEp5Wlc1MFVYVmxkV1VwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmlBZ0lDQmtjbUZwYm1sdVp5QTlJR1poYkhObE8xeHVJQ0FnSUdsbUlDaGpkWEp5Wlc1MFVYVmxkV1V1YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUhGMVpYVmxJRDBnWTNWeWNtVnVkRkYxWlhWbExtTnZibU5oZENoeGRXVjFaU2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdjWFZsZFdWSmJtUmxlQ0E5SUMweE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2NYVmxkV1V1YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUdSeVlXbHVVWFZsZFdVb0tUdGNiaUFnSUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdSeVlXbHVVWFZsZFdVb0tTQjdYRzRnSUNBZ2FXWWdLR1J5WVdsdWFXNW5LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzRnSUNBZ2RtRnlJSFJwYldWdmRYUWdQU0J5ZFc1VWFXMWxiM1YwS0dOc1pXRnVWWEJPWlhoMFZHbGpheWs3WEc0Z0lDQWdaSEpoYVc1cGJtY2dQU0IwY25WbE8xeHVYRzRnSUNBZ2RtRnlJR3hsYmlBOUlIRjFaWFZsTG14bGJtZDBhRHRjYmlBZ0lDQjNhR2xzWlNoc1pXNHBJSHRjYmlBZ0lDQWdJQ0FnWTNWeWNtVnVkRkYxWlhWbElEMGdjWFZsZFdVN1hHNGdJQ0FnSUNBZ0lIRjFaWFZsSUQwZ1cxMDdYRzRnSUNBZ0lDQWdJSGRvYVd4bElDZ3JLM0YxWlhWbFNXNWtaWGdnUENCc1pXNHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqZFhKeVpXNTBVWFZsZFdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpkWEp5Wlc1MFVYVmxkV1ZiY1hWbGRXVkpibVJsZUYwdWNuVnVLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY1hWbGRXVkpibVJsZUNBOUlDMHhPMXh1SUNBZ0lDQWdJQ0JzWlc0Z1BTQnhkV1YxWlM1c1pXNW5kR2c3WEc0Z0lDQWdmVnh1SUNBZ0lHTjFjbkpsYm5SUmRXVjFaU0E5SUc1MWJHdzdYRzRnSUNBZ1pISmhhVzVwYm1jZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0J5ZFc1RGJHVmhjbFJwYldWdmRYUW9kR2x0Wlc5MWRDazdYRzU5WEc1Y2JuQnliMk5sYzNNdWJtVjRkRlJwWTJzZ1BTQm1kVzVqZEdsdmJpQW9ablZ1S1NCN1hHNGdJQ0FnZG1GeUlHRnlaM01nUFNCdVpYY2dRWEp5WVhrb1lYSm5kVzFsYm5SekxteGxibWQwYUNBdElERXBPMXh1SUNBZ0lHbG1JQ2hoY21kMWJXVnVkSE11YkdWdVozUm9JRDRnTVNrZ2UxeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTVRzZ2FTQThJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWVhKbmMxdHBJQzBnTVYwZ1BTQmhjbWQxYldWdWRITmJhVjA3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjWFZsZFdVdWNIVnphQ2h1WlhjZ1NYUmxiU2htZFc0c0lHRnlaM01wS1R0Y2JpQWdJQ0JwWmlBb2NYVmxkV1V1YkdWdVozUm9JRDA5UFNBeElDWW1JQ0ZrY21GcGJtbHVaeWtnZTF4dUlDQWdJQ0FnSUNCeWRXNVVhVzFsYjNWMEtHUnlZV2x1VVhWbGRXVXBPMXh1SUNBZ0lIMWNibjA3WEc1Y2JpOHZJSFk0SUd4cGEyVnpJSEJ5WldScFkzUnBZbXhsSUc5aWFtVmpkSE5jYm1aMWJtTjBhVzl1SUVsMFpXMG9ablZ1TENCaGNuSmhlU2tnZTF4dUlDQWdJSFJvYVhNdVpuVnVJRDBnWm5WdU8xeHVJQ0FnSUhSb2FYTXVZWEp5WVhrZ1BTQmhjbkpoZVR0Y2JuMWNia2wwWlcwdWNISnZkRzkwZVhCbExuSjFiaUE5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCMGFHbHpMbVoxYmk1aGNIQnNlU2h1ZFd4c0xDQjBhR2x6TG1GeWNtRjVLVHRjYm4wN1hHNXdjbTlqWlhOekxuUnBkR3hsSUQwZ0oySnliM2R6WlhJbk8xeHVjSEp2WTJWemN5NWljbTkzYzJWeUlEMGdkSEoxWlR0Y2JuQnliMk5sYzNNdVpXNTJJRDBnZTMwN1hHNXdjbTlqWlhOekxtRnlaM1lnUFNCYlhUdGNibkJ5YjJObGMzTXVkbVZ5YzJsdmJpQTlJQ2NuT3lBdkx5QmxiWEIwZVNCemRISnBibWNnZEc4Z1lYWnZhV1FnY21WblpYaHdJR2x6YzNWbGMxeHVjSEp2WTJWemN5NTJaWEp6YVc5dWN5QTlJSHQ5TzF4dVhHNW1kVzVqZEdsdmJpQnViMjl3S0NrZ2UzMWNibHh1Y0hKdlkyVnpjeTV2YmlBOUlHNXZiM0E3WEc1d2NtOWpaWE56TG1Ga1pFeHBjM1JsYm1WeUlEMGdibTl2Y0R0Y2JuQnliMk5sYzNNdWIyNWpaU0E5SUc1dmIzQTdYRzV3Y205alpYTnpMbTltWmlBOUlHNXZiM0E3WEc1d2NtOWpaWE56TG5KbGJXOTJaVXhwYzNSbGJtVnlJRDBnYm05dmNEdGNibkJ5YjJObGMzTXVjbVZ0YjNabFFXeHNUR2x6ZEdWdVpYSnpJRDBnYm05dmNEdGNibkJ5YjJObGMzTXVaVzFwZENBOUlHNXZiM0E3WEc1d2NtOWpaWE56TG5CeVpYQmxibVJNYVhOMFpXNWxjaUE5SUc1dmIzQTdYRzV3Y205alpYTnpMbkJ5WlhCbGJtUlBibU5sVEdsemRHVnVaWElnUFNCdWIyOXdPMXh1WEc1d2NtOWpaWE56TG14cGMzUmxibVZ5Y3lBOUlHWjFibU4wYVc5dUlDaHVZVzFsS1NCN0lISmxkSFZ5YmlCYlhTQjlYRzVjYm5CeWIyTmxjM011WW1sdVpHbHVaeUE5SUdaMWJtTjBhVzl1SUNodVlXMWxLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZHdjbTlqWlhOekxtSnBibVJwYm1jZ2FYTWdibTkwSUhOMWNIQnZjblJsWkNjcE8xeHVmVHRjYmx4dWNISnZZMlZ6Y3k1amQyUWdQU0JtZFc1amRHbHZiaUFvS1NCN0lISmxkSFZ5YmlBbkx5Y2dmVHRjYm5CeWIyTmxjM011WTJoa2FYSWdQU0JtZFc1amRHbHZiaUFvWkdseUtTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Nkd2NtOWpaWE56TG1Ob1pHbHlJR2x6SUc1dmRDQnpkWEJ3YjNKMFpXUW5LVHRjYm4wN1hHNXdjbTlqWlhOekxuVnRZWE5ySUQwZ1puVnVZM1JwYjI0b0tTQjdJSEpsZEhWeWJpQXdPeUI5TzF4dUlpd2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNTJZWElnY21Wd2JHRmpaU0E5SUZOMGNtbHVaeTV3Y205MGIzUjVjR1V1Y21Wd2JHRmpaVHRjYm5aaGNpQndaWEpqWlc1MFZIZGxiblJwWlhNZ1BTQXZKVEl3TDJjN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdlMXh1SUNBZ0lDZGtaV1poZFd4MEp6b2dKMUpHUXpNNU9EWW5MRnh1SUNBZ0lHWnZjbTFoZEhSbGNuTTZJSHRjYmlBZ0lDQWdJQ0FnVWtaRE1UY3pPRG9nWm5WdVkzUnBiMjRnS0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVndiR0ZqWlM1allXeHNLSFpoYkhWbExDQndaWEpqWlc1MFZIZGxiblJwWlhNc0lDY3JKeWs3WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lGSkdRek01T0RZNklHWjFibU4wYVc5dUlDaDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFpoYkhWbE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNiaUFnSUNCU1JrTXhOek00T2lBblVrWkRNVGN6T0Njc1hHNGdJQ0FnVWtaRE16azROam9nSjFKR1F6TTVPRFluWEc1OU8xeHVJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzUyWVhJZ2MzUnlhVzVuYVdaNUlEMGdjbVZ4ZFdseVpTZ25MaTl6ZEhKcGJtZHBabmtuS1R0Y2JuWmhjaUJ3WVhKelpTQTlJSEpsY1hWcGNtVW9KeTR2Y0dGeWMyVW5LVHRjYm5aaGNpQm1iM0p0WVhSeklEMGdjbVZ4ZFdseVpTZ25MaTltYjNKdFlYUnpKeWs3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UxeHVJQ0FnSUdadmNtMWhkSE02SUdadmNtMWhkSE1zWEc0Z0lDQWdjR0Z5YzJVNklIQmhjbk5sTEZ4dUlDQWdJSE4wY21sdVoybG1lVG9nYzNSeWFXNW5hV1o1WEc1OU8xeHVJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzUyWVhJZ2RYUnBiSE1nUFNCeVpYRjFhWEpsS0NjdUwzVjBhV3h6SnlrN1hHNWNiblpoY2lCb1lYTWdQU0JQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbWhoYzA5M2JsQnliM0JsY25SNU8xeHVYRzUyWVhJZ1pHVm1ZWFZzZEhNZ1BTQjdYRzRnSUNBZ1lXeHNiM2RFYjNSek9pQm1ZV3h6WlN4Y2JpQWdJQ0JoYkd4dmQxQnliM1J2ZEhsd1pYTTZJR1poYkhObExGeHVJQ0FnSUdGeWNtRjVUR2x0YVhRNklESXdMRnh1SUNBZ0lHUmxZMjlrWlhJNklIVjBhV3h6TG1SbFkyOWtaU3hjYmlBZ0lDQmtaV3hwYldsMFpYSTZJQ2NtSnl4Y2JpQWdJQ0JrWlhCMGFEb2dOU3hjYmlBZ0lDQndZWEpoYldWMFpYSk1hVzFwZERvZ01UQXdNQ3hjYmlBZ0lDQndiR0ZwYms5aWFtVmpkSE02SUdaaGJITmxMRnh1SUNBZ0lITjBjbWxqZEU1MWJHeElZVzVrYkdsdVp6b2dabUZzYzJWY2JuMDdYRzVjYm5aaGNpQndZWEp6WlZaaGJIVmxjeUE5SUdaMWJtTjBhVzl1SUhCaGNuTmxVWFZsY25sVGRISnBibWRXWVd4MVpYTW9jM1J5TENCdmNIUnBiMjV6S1NCN1hHNGdJQ0FnZG1GeUlHOWlhaUE5SUh0OU8xeHVJQ0FnSUhaaGNpQmpiR1ZoYmxOMGNpQTlJRzl3ZEdsdmJuTXVhV2R1YjNKbFVYVmxjbmxRY21WbWFYZ2dQeUJ6ZEhJdWNtVndiR0ZqWlNndlhseGNQeThzSUNjbktTQTZJSE4wY2p0Y2JpQWdJQ0IyWVhJZ2JHbHRhWFFnUFNCdmNIUnBiMjV6TG5CaGNtRnRaWFJsY2t4cGJXbDBJRDA5UFNCSmJtWnBibWwwZVNBL0lIVnVaR1ZtYVc1bFpDQTZJRzl3ZEdsdmJuTXVjR0Z5WVcxbGRHVnlUR2x0YVhRN1hHNGdJQ0FnZG1GeUlIQmhjblJ6SUQwZ1kyeGxZVzVUZEhJdWMzQnNhWFFvYjNCMGFXOXVjeTVrWld4cGJXbDBaWElzSUd4cGJXbDBLVHRjYmx4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnY0dGeWRITXViR1Z1WjNSb095QXJLMmtwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSEJoY25RZ1BTQndZWEowYzF0cFhUdGNibHh1SUNBZ0lDQWdJQ0IyWVhJZ1luSmhZMnRsZEVWeGRXRnNjMUJ2Y3lBOUlIQmhjblF1YVc1a1pYaFBaaWduWFQwbktUdGNiaUFnSUNBZ0lDQWdkbUZ5SUhCdmN5QTlJR0p5WVdOclpYUkZjWFZoYkhOUWIzTWdQVDA5SUMweElEOGdjR0Z5ZEM1cGJtUmxlRTltS0NjOUp5a2dPaUJpY21GamEyVjBSWEYxWVd4elVHOXpJQ3NnTVR0Y2JseHVJQ0FnSUNBZ0lDQjJZWElnYTJWNUxDQjJZV3c3WEc0Z0lDQWdJQ0FnSUdsbUlDaHdiM01nUFQwOUlDMHhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnJaWGtnUFNCdmNIUnBiMjV6TG1SbFkyOWtaWElvY0dGeWRDd2daR1ZtWVhWc2RITXVaR1ZqYjJSbGNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllXd2dQU0J2Y0hScGIyNXpMbk4wY21samRFNTFiR3hJWVc1a2JHbHVaeUEvSUc1MWJHd2dPaUFuSnp0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3RsZVNBOUlHOXdkR2x2Ym5NdVpHVmpiMlJsY2lod1lYSjBMbk5zYVdObEtEQXNJSEJ2Y3lrc0lHUmxabUYxYkhSekxtUmxZMjlrWlhJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc0lEMGdiM0IwYVc5dWN5NWtaV052WkdWeUtIQmhjblF1YzJ4cFkyVW9jRzl6SUNzZ01Ta3NJR1JsWm1GMWJIUnpMbVJsWTI5a1pYSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaG9ZWE11WTJGc2JDaHZZbW9zSUd0bGVTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHOWlhbHRyWlhsZElEMGdXMTB1WTI5dVkyRjBLRzlpYWx0clpYbGRLUzVqYjI1allYUW9kbUZzS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzlpYWx0clpYbGRJRDBnZG1Gc08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUc5aWFqdGNibjA3WEc1Y2JuWmhjaUJ3WVhKelpVOWlhbVZqZENBOUlHWjFibU4wYVc5dUlDaGphR0ZwYml3Z2RtRnNMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lDQWdkbUZ5SUd4bFlXWWdQU0IyWVd3N1hHNWNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdZMmhoYVc0dWJHVnVaM1JvSUMwZ01Uc2dhU0ErUFNBd095QXRMV2twSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJRzlpYWp0Y2JpQWdJQ0FnSUNBZ2RtRnlJSEp2YjNRZ1BTQmphR0ZwYmx0cFhUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2NtOXZkQ0E5UFQwZ0oxdGRKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiMkpxSUQwZ1cxMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCdlltb2dQU0J2WW1vdVkyOXVZMkYwS0d4bFlXWXBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2IySnFJRDBnYjNCMGFXOXVjeTV3YkdGcGJrOWlhbVZqZEhNZ1B5QlBZbXBsWTNRdVkzSmxZWFJsS0c1MWJHd3BJRG9nZTMwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1kyeGxZVzVTYjI5MElEMGdjbTl2ZEM1amFHRnlRWFFvTUNrZ1BUMDlJQ2RiSnlBbUppQnliMjkwTG1Ob1lYSkJkQ2h5YjI5MExteGxibWQwYUNBdElERXBJRDA5UFNBblhTY2dQeUJ5YjI5MExuTnNhV05sS0RFc0lDMHhLU0E2SUhKdmIzUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdhVzVrWlhnZ1BTQndZWEp6WlVsdWRDaGpiR1ZoYmxKdmIzUXNJREV3S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBaGFYTk9ZVTRvYVc1a1pYZ3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKaVlnY205dmRDQWhQVDBnWTJ4bFlXNVNiMjkwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSmlZZ1UzUnlhVzVuS0dsdVpHVjRLU0E5UFQwZ1kyeGxZVzVTYjI5MFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0ppWWdhVzVrWlhnZ1BqMGdNRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1ltSUNodmNIUnBiMjV6TG5CaGNuTmxRWEp5WVhseklDWW1JR2x1WkdWNElEdzlJRzl3ZEdsdmJuTXVZWEp5WVhsTWFXMXBkQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzlpYWlBOUlGdGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzlpYWx0cGJtUmxlRjBnUFNCc1pXRm1PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdlltcGJZMnhsWVc1U2IyOTBYU0E5SUd4bFlXWTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JzWldGbUlEMGdiMkpxTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQnNaV0ZtTzF4dWZUdGNibHh1ZG1GeUlIQmhjbk5sUzJWNWN5QTlJR1oxYm1OMGFXOXVJSEJoY25ObFVYVmxjbmxUZEhKcGJtZExaWGx6S0dkcGRtVnVTMlY1TENCMllXd3NJRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQnBaaUFvSVdkcGRtVnVTMlY1S1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCVWNtRnVjMlp2Y20wZ1pHOTBJRzV2ZEdGMGFXOXVJSFJ2SUdKeVlXTnJaWFFnYm05MFlYUnBiMjVjYmlBZ0lDQjJZWElnYTJWNUlEMGdiM0IwYVc5dWN5NWhiR3h2ZDBSdmRITWdQeUJuYVhabGJrdGxlUzV5WlhCc1lXTmxLQzljWEM0b1cxNHVXMTByS1M5bkxDQW5XeVF4WFNjcElEb2daMmwyWlc1TFpYazdYRzVjYmlBZ0lDQXZMeUJVYUdVZ2NtVm5aWGdnWTJoMWJtdHpYRzVjYmlBZ0lDQjJZWElnWW5KaFkydGxkSE1nUFNBdktGeGNXMXRlVzF4Y1hWMHFYU2t2TzF4dUlDQWdJSFpoY2lCamFHbHNaQ0E5SUM4b1hGeGJXMTViWEZ4ZFhTcGRLUzluTzF4dVhHNGdJQ0FnTHk4Z1IyVjBJSFJvWlNCd1lYSmxiblJjYmx4dUlDQWdJSFpoY2lCelpXZHRaVzUwSUQwZ1luSmhZMnRsZEhNdVpYaGxZeWhyWlhrcE8xeHVJQ0FnSUhaaGNpQndZWEpsYm5RZ1BTQnpaV2R0Wlc1MElEOGdhMlY1TG5Oc2FXTmxLREFzSUhObFoyMWxiblF1YVc1a1pYZ3BJRG9nYTJWNU8xeHVYRzRnSUNBZ0x5OGdVM1JoYzJnZ2RHaGxJSEJoY21WdWRDQnBaaUJwZENCbGVHbHpkSE5jYmx4dUlDQWdJSFpoY2lCclpYbHpJRDBnVzEwN1hHNGdJQ0FnYVdZZ0tIQmhjbVZ1ZENrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJKWmlCM1pTQmhjbVZ1SjNRZ2RYTnBibWNnY0d4aGFXNGdiMkpxWldOMGN5d2diM0IwYVc5dVlXeHNlU0J3Y21WbWFYZ2dhMlY1YzF4dUlDQWdJQ0FnSUNBdkx5QjBhR0YwSUhkdmRXeGtJRzkyWlhKM2NtbDBaU0J2WW1wbFkzUWdjSEp2ZEc5MGVYQmxJSEJ5YjNCbGNuUnBaWE5jYmlBZ0lDQWdJQ0FnYVdZZ0tDRnZjSFJwYjI1ekxuQnNZV2x1VDJKcVpXTjBjeUFtSmlCb1lYTXVZMkZzYkNoUFltcGxZM1F1Y0hKdmRHOTBlWEJsTENCd1lYSmxiblFwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXOXdkR2x2Ym5NdVlXeHNiM2RRY205MGIzUjVjR1Z6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2EyVjVjeTV3ZFhOb0tIQmhjbVZ1ZENrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1RHOXZjQ0IwYUhKdmRXZG9JR05vYVd4a2NtVnVJR0Z3Y0dWdVpHbHVaeUIwYnlCMGFHVWdZWEp5WVhrZ2RXNTBhV3dnZDJVZ2FHbDBJR1JsY0hSb1hHNWNiaUFnSUNCMllYSWdhU0E5SURBN1hHNGdJQ0FnZDJocGJHVWdLQ2h6WldkdFpXNTBJRDBnWTJocGJHUXVaWGhsWXloclpYa3BLU0FoUFQwZ2JuVnNiQ0FtSmlCcElEd2diM0IwYVc5dWN5NWtaWEIwYUNrZ2UxeHVJQ0FnSUNBZ0lDQnBJQ3M5SURFN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doYjNCMGFXOXVjeTV3YkdGcGJrOWlhbVZqZEhNZ0ppWWdhR0Z6TG1OaGJHd29UMkpxWldOMExuQnliM1J2ZEhsd1pTd2djMlZuYldWdWRGc3hYUzV6YkdsalpTZ3hMQ0F0TVNrcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JVzl3ZEdsdmJuTXVZV3hzYjNkUWNtOTBiM1I1Y0dWektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHdGxlWE11Y0hWemFDaHpaV2R0Wlc1MFd6RmRLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJKWmlCMGFHVnlaU2R6SUdFZ2NtVnRZV2x1WkdWeUxDQnFkWE4wSUdGa1pDQjNhR0YwWlhabGNpQnBjeUJzWldaMFhHNWNiaUFnSUNCcFppQW9jMlZuYldWdWRDa2dlMXh1SUNBZ0lDQWdJQ0JyWlhsekxuQjFjMmdvSjFzbklDc2dhMlY1TG5Oc2FXTmxLSE5sWjIxbGJuUXVhVzVrWlhncElDc2dKMTBuS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdjR0Z5YzJWUFltcGxZM1FvYTJWNWN5d2dkbUZzTENCdmNIUnBiMjV6S1R0Y2JuMDdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnS0hOMGNpd2diM0IwY3lrZ2UxeHVJQ0FnSUhaaGNpQnZjSFJwYjI1eklEMGdiM0IwY3lBL0lIVjBhV3h6TG1GemMybG5iaWg3ZlN3Z2IzQjBjeWtnT2lCN2ZUdGNibHh1SUNBZ0lHbG1JQ2h2Y0hScGIyNXpMbVJsWTI5a1pYSWdJVDA5SUc1MWJHd2dKaVlnYjNCMGFXOXVjeTVrWldOdlpHVnlJQ0U5UFNCMWJtUmxabWx1WldRZ0ppWWdkSGx3Wlc5bUlHOXdkR2x2Ym5NdVpHVmpiMlJsY2lBaFBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZEVaV052WkdWeUlHaGhjeUIwYnlCaVpTQmhJR1oxYm1OMGFXOXVMaWNwTzF4dUlDQWdJSDFjYmx4dUlDQWdJRzl3ZEdsdmJuTXVhV2R1YjNKbFVYVmxjbmxRY21WbWFYZ2dQU0J2Y0hScGIyNXpMbWxuYm05eVpWRjFaWEo1VUhKbFptbDRJRDA5UFNCMGNuVmxPMXh1SUNBZ0lHOXdkR2x2Ym5NdVpHVnNhVzFwZEdWeUlEMGdkSGx3Wlc5bUlHOXdkR2x2Ym5NdVpHVnNhVzFwZEdWeUlEMDlQU0FuYzNSeWFXNW5KeUI4ZkNCMWRHbHNjeTVwYzFKbFowVjRjQ2h2Y0hScGIyNXpMbVJsYkdsdGFYUmxjaWtnUHlCdmNIUnBiMjV6TG1SbGJHbHRhWFJsY2lBNklHUmxabUYxYkhSekxtUmxiR2x0YVhSbGNqdGNiaUFnSUNCdmNIUnBiMjV6TG1SbGNIUm9JRDBnZEhsd1pXOW1JRzl3ZEdsdmJuTXVaR1Z3ZEdnZ1BUMDlJQ2R1ZFcxaVpYSW5JRDhnYjNCMGFXOXVjeTVrWlhCMGFDQTZJR1JsWm1GMWJIUnpMbVJsY0hSb08xeHVJQ0FnSUc5d2RHbHZibk11WVhKeVlYbE1hVzFwZENBOUlIUjVjR1Z2WmlCdmNIUnBiMjV6TG1GeWNtRjVUR2x0YVhRZ1BUMDlJQ2R1ZFcxaVpYSW5JRDhnYjNCMGFXOXVjeTVoY25KaGVVeHBiV2wwSURvZ1pHVm1ZWFZzZEhNdVlYSnlZWGxNYVcxcGREdGNiaUFnSUNCdmNIUnBiMjV6TG5CaGNuTmxRWEp5WVhseklEMGdiM0IwYVc5dWN5NXdZWEp6WlVGeWNtRjVjeUFoUFQwZ1ptRnNjMlU3WEc0Z0lDQWdiM0IwYVc5dWN5NWtaV052WkdWeUlEMGdkSGx3Wlc5bUlHOXdkR2x2Ym5NdVpHVmpiMlJsY2lBOVBUMGdKMloxYm1OMGFXOXVKeUEvSUc5d2RHbHZibk11WkdWamIyUmxjaUE2SUdSbFptRjFiSFJ6TG1SbFkyOWtaWEk3WEc0Z0lDQWdiM0IwYVc5dWN5NWhiR3h2ZDBSdmRITWdQU0IwZVhCbGIyWWdiM0IwYVc5dWN5NWhiR3h2ZDBSdmRITWdQVDA5SUNkaWIyOXNaV0Z1SnlBL0lHOXdkR2x2Ym5NdVlXeHNiM2RFYjNSeklEb2daR1ZtWVhWc2RITXVZV3hzYjNkRWIzUnpPMXh1SUNBZ0lHOXdkR2x2Ym5NdWNHeGhhVzVQWW1wbFkzUnpJRDBnZEhsd1pXOW1JRzl3ZEdsdmJuTXVjR3hoYVc1UFltcGxZM1J6SUQwOVBTQW5ZbTl2YkdWaGJpY2dQeUJ2Y0hScGIyNXpMbkJzWVdsdVQySnFaV04wY3lBNklHUmxabUYxYkhSekxuQnNZV2x1VDJKcVpXTjBjenRjYmlBZ0lDQnZjSFJwYjI1ekxtRnNiRzkzVUhKdmRHOTBlWEJsY3lBOUlIUjVjR1Z2WmlCdmNIUnBiMjV6TG1Gc2JHOTNVSEp2ZEc5MGVYQmxjeUE5UFQwZ0oySnZiMnhsWVc0bklEOGdiM0IwYVc5dWN5NWhiR3h2ZDFCeWIzUnZkSGx3WlhNZ09pQmtaV1poZFd4MGN5NWhiR3h2ZDFCeWIzUnZkSGx3WlhNN1hHNGdJQ0FnYjNCMGFXOXVjeTV3WVhKaGJXVjBaWEpNYVcxcGRDQTlJSFI1Y0dWdlppQnZjSFJwYjI1ekxuQmhjbUZ0WlhSbGNreHBiV2wwSUQwOVBTQW5iblZ0WW1WeUp5QS9JRzl3ZEdsdmJuTXVjR0Z5WVcxbGRHVnlUR2x0YVhRZ09pQmtaV1poZFd4MGN5NXdZWEpoYldWMFpYSk1hVzFwZER0Y2JpQWdJQ0J2Y0hScGIyNXpMbk4wY21samRFNTFiR3hJWVc1a2JHbHVaeUE5SUhSNWNHVnZaaUJ2Y0hScGIyNXpMbk4wY21samRFNTFiR3hJWVc1a2JHbHVaeUE5UFQwZ0oySnZiMnhsWVc0bklEOGdiM0IwYVc5dWN5NXpkSEpwWTNST2RXeHNTR0Z1Wkd4cGJtY2dPaUJrWldaaGRXeDBjeTV6ZEhKcFkzUk9kV3hzU0dGdVpHeHBibWM3WEc1Y2JpQWdJQ0JwWmlBb2MzUnlJRDA5UFNBbkp5QjhmQ0J6ZEhJZ1BUMDlJRzUxYkd3Z2ZId2dkSGx3Wlc5bUlITjBjaUE5UFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzl3ZEdsdmJuTXVjR3hoYVc1UFltcGxZM1J6SUQ4Z1QySnFaV04wTG1OeVpXRjBaU2h1ZFd4c0tTQTZJSHQ5TzF4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCMFpXMXdUMkpxSUQwZ2RIbHdaVzltSUhOMGNpQTlQVDBnSjNOMGNtbHVaeWNnUHlCd1lYSnpaVlpoYkhWbGN5aHpkSElzSUc5d2RHbHZibk1wSURvZ2MzUnlPMXh1SUNBZ0lIWmhjaUJ2WW1vZ1BTQnZjSFJwYjI1ekxuQnNZV2x1VDJKcVpXTjBjeUEvSUU5aWFtVmpkQzVqY21WaGRHVW9iblZzYkNrZ09pQjdmVHRjYmx4dUlDQWdJQzh2SUVsMFpYSmhkR1VnYjNabGNpQjBhR1VnYTJWNWN5QmhibVFnYzJWMGRYQWdkR2hsSUc1bGR5QnZZbXBsWTNSY2JseHVJQ0FnSUhaaGNpQnJaWGx6SUQwZ1QySnFaV04wTG10bGVYTW9kR1Z0Y0U5aWFpazdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnJaWGx6TG14bGJtZDBhRHNnS3l0cEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCclpYa2dQU0JyWlhselcybGRPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2JtVjNUMkpxSUQwZ2NHRnljMlZMWlhsektHdGxlU3dnZEdWdGNFOWlhbHRyWlhsZExDQnZjSFJwYjI1ektUdGNiaUFnSUNBZ0lDQWdiMkpxSUQwZ2RYUnBiSE11YldWeVoyVW9iMkpxTENCdVpYZFBZbW9zSUc5d2RHbHZibk1wTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQjFkR2xzY3k1amIyMXdZV04wS0c5aWFpazdYRzU5TzF4dUlpd2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNTJZWElnZFhScGJITWdQU0J5WlhGMWFYSmxLQ2N1TDNWMGFXeHpKeWs3WEc1MllYSWdabTl5YldGMGN5QTlJSEpsY1hWcGNtVW9KeTR2Wm05eWJXRjBjeWNwTzF4dVhHNTJZWElnWVhKeVlYbFFjbVZtYVhoSFpXNWxjbUYwYjNKeklEMGdlMXh1SUNBZ0lHSnlZV05yWlhSek9pQm1kVzVqZEdsdmJpQmljbUZqYTJWMGN5aHdjbVZtYVhncElIc2dMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRiR2x1WlNCbWRXNWpMVzVoYldVdGJXRjBZMmhwYm1kY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhCeVpXWnBlQ0FySUNkYlhTYzdYRzRnSUNBZ2ZTeGNiaUFnSUNCcGJtUnBZMlZ6T2lCbWRXNWpkR2x2YmlCcGJtUnBZMlZ6S0hCeVpXWnBlQ3dnYTJWNUtTQjdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMV3hwYm1VZ1puVnVZeTF1WVcxbExXMWhkR05vYVc1blhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCd2NtVm1hWGdnS3lBbld5Y2dLeUJyWlhrZ0t5QW5YU2M3WEc0Z0lDQWdmU3hjYmlBZ0lDQnlaWEJsWVhRNklHWjFibU4wYVc5dUlISmxjR1ZoZENod2NtVm1hWGdwSUhzZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJHbHVaU0JtZFc1akxXNWhiV1V0YldGMFkyaHBibWRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEJ5WldacGVEdGNiaUFnSUNCOVhHNTlPMXh1WEc1MllYSWdkRzlKVTA4Z1BTQkVZWFJsTG5CeWIzUnZkSGx3WlM1MGIwbFRUMU4wY21sdVp6dGNibHh1ZG1GeUlHUmxabUYxYkhSeklEMGdlMXh1SUNBZ0lHUmxiR2x0YVhSbGNqb2dKeVluTEZ4dUlDQWdJR1Z1WTI5a1pUb2dkSEoxWlN4Y2JpQWdJQ0JsYm1OdlpHVnlPaUIxZEdsc2N5NWxibU52WkdVc1hHNGdJQ0FnWlc1amIyUmxWbUZzZFdWelQyNXNlVG9nWm1Gc2MyVXNYRzRnSUNBZ2MyVnlhV0ZzYVhwbFJHRjBaVG9nWm5WdVkzUnBiMjRnYzJWeWFXRnNhWHBsUkdGMFpTaGtZWFJsS1NCN0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXeHBibVVnWm5WdVl5MXVZVzFsTFcxaGRHTm9hVzVuWEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYjBsVFR5NWpZV3hzS0dSaGRHVXBPMXh1SUNBZ0lIMHNYRzRnSUNBZ2MydHBjRTUxYkd4ek9pQm1ZV3h6WlN4Y2JpQWdJQ0J6ZEhKcFkzUk9kV3hzU0dGdVpHeHBibWM2SUdaaGJITmxYRzU5TzF4dVhHNTJZWElnYzNSeWFXNW5hV1o1SUQwZ1puVnVZM1JwYjI0Z2MzUnlhVzVuYVdaNUtDQXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXNhVzVsSUdaMWJtTXRibUZ0WlMxdFlYUmphR2x1WjF4dUlDQWdJRzlpYW1WamRDeGNiaUFnSUNCd2NtVm1hWGdzWEc0Z0lDQWdaMlZ1WlhKaGRHVkJjbkpoZVZCeVpXWnBlQ3hjYmlBZ0lDQnpkSEpwWTNST2RXeHNTR0Z1Wkd4cGJtY3NYRzRnSUNBZ2MydHBjRTUxYkd4ekxGeHVJQ0FnSUdWdVkyOWtaWElzWEc0Z0lDQWdabWxzZEdWeUxGeHVJQ0FnSUhOdmNuUXNYRzRnSUNBZ1lXeHNiM2RFYjNSekxGeHVJQ0FnSUhObGNtbGhiR2w2WlVSaGRHVXNYRzRnSUNBZ1ptOXliV0YwZEdWeUxGeHVJQ0FnSUdWdVkyOWtaVlpoYkhWbGMwOXViSGxjYmlrZ2UxeHVJQ0FnSUhaaGNpQnZZbW9nUFNCdlltcGxZM1E3WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJtYVd4MFpYSWdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lDQWdiMkpxSUQwZ1ptbHNkR1Z5S0hCeVpXWnBlQ3dnYjJKcUtUdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHOWlhaUJwYm5OMFlXNWpaVzltSUVSaGRHVXBJSHRjYmlBZ0lDQWdJQ0FnYjJKcUlEMGdjMlZ5YVdGc2FYcGxSR0YwWlNodlltb3BPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9iMkpxSUQwOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h6ZEhKcFkzUk9kV3hzU0dGdVpHeHBibWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmxibU52WkdWeUlDWW1JQ0ZsYm1OdlpHVldZV3gxWlhOUGJteDVJRDhnWlc1amIyUmxjaWh3Y21WbWFYZ3NJR1JsWm1GMWJIUnpMbVZ1WTI5a1pYSXBJRG9nY0hKbFptbDRPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2IySnFJRDBnSnljN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCdlltb2dQVDA5SUNkemRISnBibWNuSUh4OElIUjVjR1Z2WmlCdlltb2dQVDA5SUNkdWRXMWlaWEluSUh4OElIUjVjR1Z2WmlCdlltb2dQVDA5SUNkaWIyOXNaV0Z1SnlCOGZDQjFkR2xzY3k1cGMwSjFabVpsY2lodlltb3BLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaGxibU52WkdWeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdhMlY1Vm1Gc2RXVWdQU0JsYm1OdlpHVldZV3gxWlhOUGJteDVJRDhnY0hKbFptbDRJRG9nWlc1amIyUmxjaWh3Y21WbWFYZ3NJR1JsWm1GMWJIUnpMbVZ1WTI5a1pYSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ0bWIzSnRZWFIwWlhJb2EyVjVWbUZzZFdVcElDc2dKejBuSUNzZ1ptOXliV0YwZEdWeUtHVnVZMjlrWlhJb2IySnFMQ0JrWldaaGRXeDBjeTVsYm1OdlpHVnlLU2xkTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCYlptOXliV0YwZEdWeUtIQnlaV1pwZUNrZ0t5QW5QU2NnS3lCbWIzSnRZWFIwWlhJb1UzUnlhVzVuS0c5aWFpa3BYVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjJZWElnZG1Gc2RXVnpJRDBnVzEwN1hHNWNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHOWlhaUE5UFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFpoYkhWbGN6dGNiaUFnSUNCOVhHNWNiaUFnSUNCMllYSWdiMkpxUzJWNWN6dGNiaUFnSUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNobWFXeDBaWElwS1NCN1hHNGdJQ0FnSUNBZ0lHOWlha3RsZVhNZ1BTQm1hV3gwWlhJN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHdGxlWE1nUFNCUFltcGxZM1F1YTJWNWN5aHZZbW9wTzF4dUlDQWdJQ0FnSUNCdlltcExaWGx6SUQwZ2MyOXlkQ0EvSUd0bGVYTXVjMjl5ZENoemIzSjBLU0E2SUd0bGVYTTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnZZbXBMWlhsekxteGxibWQwYURzZ0t5dHBLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnJaWGtnUFNCdlltcExaWGx6VzJsZE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoemEybHdUblZzYkhNZ0ppWWdiMkpxVzJ0bGVWMGdQVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJwYm5WbE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvYjJKcUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1Z6SUQwZ2RtRnNkV1Z6TG1OdmJtTmhkQ2h6ZEhKcGJtZHBabmtvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjJKcVcydGxlVjBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWjJWdVpYSmhkR1ZCY25KaGVWQnlaV1pwZUNod2NtVm1hWGdzSUd0bGVTa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaMlZ1WlhKaGRHVkJjbkpoZVZCeVpXWnBlQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZEhKcFkzUk9kV3hzU0dGdVpHeHBibWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJ0cGNFNTFiR3h6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWdVkyOWtaWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1sc2RHVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE52Y25Rc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXeHNiM2RFYjNSekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxjbWxoYkdsNlpVUmhkR1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eWJXRjBkR1Z5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWdVkyOWtaVlpoYkhWbGMwOXViSGxjYmlBZ0lDQWdJQ0FnSUNBZ0lDa3BPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1Z6SUQwZ2RtRnNkV1Z6TG1OdmJtTmhkQ2h6ZEhKcGJtZHBabmtvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjJKcVcydGxlVjBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0hKbFptbDRJQ3NnS0dGc2JHOTNSRzkwY3lBL0lDY3VKeUFySUd0bGVTQTZJQ2RiSnlBcklHdGxlU0FySUNkZEp5a3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaMlZ1WlhKaGRHVkJjbkpoZVZCeVpXWnBlQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZEhKcFkzUk9kV3hzU0dGdVpHeHBibWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJ0cGNFNTFiR3h6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWdVkyOWtaWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1sc2RHVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE52Y25Rc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXeHNiM2RFYjNSekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxjbWxoYkdsNlpVUmhkR1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eWJXRjBkR1Z5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWdVkyOWtaVlpoYkhWbGMwOXViSGxjYmlBZ0lDQWdJQ0FnSUNBZ0lDa3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlIWmhiSFZsY3p0Y2JuMDdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnS0c5aWFtVmpkQ3dnYjNCMGN5a2dlMXh1SUNBZ0lIWmhjaUJ2WW1vZ1BTQnZZbXBsWTNRN1hHNGdJQ0FnZG1GeUlHOXdkR2x2Ym5NZ1BTQnZjSFJ6SUQ4Z2RYUnBiSE11WVhOemFXZHVLSHQ5TENCdmNIUnpLU0E2SUh0OU8xeHVYRzRnSUNBZ2FXWWdLRzl3ZEdsdmJuTXVaVzVqYjJSbGNpQWhQVDBnYm5Wc2JDQW1KaUJ2Y0hScGIyNXpMbVZ1WTI5a1pYSWdJVDA5SUhWdVpHVm1hVzVsWkNBbUppQjBlWEJsYjJZZ2IzQjBhVzl1Y3k1bGJtTnZaR1Z5SUNFOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0owVnVZMjlrWlhJZ2FHRnpJSFJ2SUdKbElHRWdablZ1WTNScGIyNHVKeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkbUZ5SUdSbGJHbHRhWFJsY2lBOUlIUjVjR1Z2WmlCdmNIUnBiMjV6TG1SbGJHbHRhWFJsY2lBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NnUHlCa1pXWmhkV3gwY3k1a1pXeHBiV2wwWlhJZ09pQnZjSFJwYjI1ekxtUmxiR2x0YVhSbGNqdGNiaUFnSUNCMllYSWdjM1J5YVdOMFRuVnNiRWhoYm1Sc2FXNW5JRDBnZEhsd1pXOW1JRzl3ZEdsdmJuTXVjM1J5YVdOMFRuVnNiRWhoYm1Sc2FXNW5JRDA5UFNBblltOXZiR1ZoYmljZ1B5QnZjSFJwYjI1ekxuTjBjbWxqZEU1MWJHeElZVzVrYkdsdVp5QTZJR1JsWm1GMWJIUnpMbk4wY21samRFNTFiR3hJWVc1a2JHbHVaenRjYmlBZ0lDQjJZWElnYzJ0cGNFNTFiR3h6SUQwZ2RIbHdaVzltSUc5d2RHbHZibk11YzJ0cGNFNTFiR3h6SUQwOVBTQW5ZbTl2YkdWaGJpY2dQeUJ2Y0hScGIyNXpMbk5yYVhCT2RXeHNjeUE2SUdSbFptRjFiSFJ6TG5OcmFYQk9kV3hzY3p0Y2JpQWdJQ0IyWVhJZ1pXNWpiMlJsSUQwZ2RIbHdaVzltSUc5d2RHbHZibk11Wlc1amIyUmxJRDA5UFNBblltOXZiR1ZoYmljZ1B5QnZjSFJwYjI1ekxtVnVZMjlrWlNBNklHUmxabUYxYkhSekxtVnVZMjlrWlR0Y2JpQWdJQ0IyWVhJZ1pXNWpiMlJsY2lBOUlIUjVjR1Z2WmlCdmNIUnBiMjV6TG1WdVkyOWtaWElnUFQwOUlDZG1kVzVqZEdsdmJpY2dQeUJ2Y0hScGIyNXpMbVZ1WTI5a1pYSWdPaUJrWldaaGRXeDBjeTVsYm1OdlpHVnlPMXh1SUNBZ0lIWmhjaUJ6YjNKMElEMGdkSGx3Wlc5bUlHOXdkR2x2Ym5NdWMyOXlkQ0E5UFQwZ0oyWjFibU4wYVc5dUp5QS9JRzl3ZEdsdmJuTXVjMjl5ZENBNklHNTFiR3c3WEc0Z0lDQWdkbUZ5SUdGc2JHOTNSRzkwY3lBOUlIUjVjR1Z2WmlCdmNIUnBiMjV6TG1Gc2JHOTNSRzkwY3lBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NnUHlCbVlXeHpaU0E2SUc5d2RHbHZibk11WVd4c2IzZEViM1J6TzF4dUlDQWdJSFpoY2lCelpYSnBZV3hwZW1WRVlYUmxJRDBnZEhsd1pXOW1JRzl3ZEdsdmJuTXVjMlZ5YVdGc2FYcGxSR0YwWlNBOVBUMGdKMloxYm1OMGFXOXVKeUEvSUc5d2RHbHZibk11YzJWeWFXRnNhWHBsUkdGMFpTQTZJR1JsWm1GMWJIUnpMbk5sY21saGJHbDZaVVJoZEdVN1hHNGdJQ0FnZG1GeUlHVnVZMjlrWlZaaGJIVmxjMDl1YkhrZ1BTQjBlWEJsYjJZZ2IzQjBhVzl1Y3k1bGJtTnZaR1ZXWVd4MVpYTlBibXg1SUQwOVBTQW5ZbTl2YkdWaGJpY2dQeUJ2Y0hScGIyNXpMbVZ1WTI5a1pWWmhiSFZsYzA5dWJIa2dPaUJrWldaaGRXeDBjeTVsYm1OdlpHVldZV3gxWlhOUGJteDVPMXh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdiM0IwYVc5dWN5NW1iM0p0WVhRZ1BUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnSUNBZ0lHOXdkR2x2Ym5NdVptOXliV0YwSUQwZ1ptOXliV0YwYzFzblpHVm1ZWFZzZENkZE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb0lVOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaG1iM0p0WVhSekxtWnZjbTFoZEhSbGNuTXNJRzl3ZEdsdmJuTXVabTl5YldGMEtTa2dlMXh1SUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkVmJtdHViM2R1SUdadmNtMWhkQ0J2Y0hScGIyNGdjSEp2ZG1sa1pXUXVKeWs3WEc0Z0lDQWdmVnh1SUNBZ0lIWmhjaUJtYjNKdFlYUjBaWElnUFNCbWIzSnRZWFJ6TG1admNtMWhkSFJsY25OYmIzQjBhVzl1Y3k1bWIzSnRZWFJkTzF4dUlDQWdJSFpoY2lCdlltcExaWGx6TzF4dUlDQWdJSFpoY2lCbWFXeDBaWEk3WEc1Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUc5d2RHbHZibk11Wm1sc2RHVnlJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJR1pwYkhSbGNpQTlJRzl3ZEdsdmJuTXVabWxzZEdWeU8xeHVJQ0FnSUNBZ0lDQnZZbW9nUFNCbWFXeDBaWElvSnljc0lHOWlhaWs3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtHOXdkR2x2Ym5NdVptbHNkR1Z5S1NrZ2UxeHVJQ0FnSUNBZ0lDQm1hV3gwWlhJZ1BTQnZjSFJwYjI1ekxtWnBiSFJsY2p0Y2JpQWdJQ0FnSUNBZ2IySnFTMlY1Y3lBOUlHWnBiSFJsY2p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ2EyVjVjeUE5SUZ0ZE8xeHVYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQnZZbW9nSVQwOUlDZHZZbXBsWTNRbklIeDhJRzlpYWlBOVBUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0p5YzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtRnlJR0Z5Y21GNVJtOXliV0YwTzF4dUlDQWdJR2xtSUNodmNIUnBiMjV6TG1GeWNtRjVSbTl5YldGMElHbHVJR0Z5Y21GNVVISmxabWw0UjJWdVpYSmhkRzl5Y3lrZ2UxeHVJQ0FnSUNBZ0lDQmhjbkpoZVVadmNtMWhkQ0E5SUc5d2RHbHZibk11WVhKeVlYbEdiM0p0WVhRN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNnbmFXNWthV05sY3ljZ2FXNGdiM0IwYVc5dWN5a2dlMXh1SUNBZ0lDQWdJQ0JoY25KaGVVWnZjbTFoZENBOUlHOXdkR2x2Ym5NdWFXNWthV05sY3lBL0lDZHBibVJwWTJWekp5QTZJQ2R5WlhCbFlYUW5PMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHRnljbUY1Um05eWJXRjBJRDBnSjJsdVpHbGpaWE1uTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCblpXNWxjbUYwWlVGeWNtRjVVSEpsWm1sNElEMGdZWEp5WVhsUWNtVm1hWGhIWlc1bGNtRjBiM0p6VzJGeWNtRjVSbTl5YldGMFhUdGNibHh1SUNBZ0lHbG1JQ2doYjJKcVMyVjVjeWtnZTF4dUlDQWdJQ0FnSUNCdlltcExaWGx6SUQwZ1QySnFaV04wTG10bGVYTW9iMkpxS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2MyOXlkQ2tnZTF4dUlDQWdJQ0FnSUNCdlltcExaWGx6TG5OdmNuUW9jMjl5ZENrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCdlltcExaWGx6TG14bGJtZDBhRHNnS3l0cEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCclpYa2dQU0J2WW1wTFpYbHpXMmxkTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2h6YTJsd1RuVnNiSE1nSmlZZ2IySnFXMnRsZVYwZ1BUMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZsTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdhMlY1Y3lBOUlHdGxlWE11WTI5dVkyRjBLSE4wY21sdVoybG1lU2hjYmlBZ0lDQWdJQ0FnSUNBZ0lHOWlhbHRyWlhsZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYTJWNUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWjJWdVpYSmhkR1ZCY25KaGVWQnlaV1pwZUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSE4wY21samRFNTFiR3hJWVc1a2JHbHVaeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lITnJhWEJPZFd4c2N5eGNiaUFnSUNBZ0lDQWdJQ0FnSUdWdVkyOWtaU0EvSUdWdVkyOWtaWElnT2lCdWRXeHNMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1ptbHNkR1Z5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjMjl5ZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR0ZzYkc5M1JHOTBjeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxjbWxoYkdsNlpVUmhkR1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0p0WVhSMFpYSXNYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJtTnZaR1ZXWVd4MVpYTlBibXg1WEc0Z0lDQWdJQ0FnSUNrcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhaaGNpQnFiMmx1WldRZ1BTQnJaWGx6TG1wdmFXNG9aR1ZzYVcxcGRHVnlLVHRjYmlBZ0lDQjJZWElnY0hKbFptbDRJRDBnYjNCMGFXOXVjeTVoWkdSUmRXVnllVkJ5WldacGVDQTlQVDBnZEhKMVpTQS9JQ2MvSnlBNklDY25PMXh1WEc0Z0lDQWdjbVYwZFhKdUlHcHZhVzVsWkM1c1pXNW5kR2dnUGlBd0lEOGdjSEpsWm1sNElDc2dhbTlwYm1Wa0lEb2dKeWM3WEc1OU8xeHVJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzUyWVhJZ2FHRnpJRDBnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVUdGNibHh1ZG1GeUlHaGxlRlJoWW14bElEMGdLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0IyWVhJZ1lYSnlZWGtnUFNCYlhUdGNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElESTFOanNnS3l0cEtTQjdYRzRnSUNBZ0lDQWdJR0Z5Y21GNUxuQjFjMmdvSnlVbklDc2dLQ2hwSUR3Z01UWWdQeUFuTUNjZ09pQW5KeWtnS3lCcExuUnZVM1J5YVc1bktERTJLU2t1ZEc5VmNIQmxja05oYzJVb0tTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUdGeWNtRjVPMXh1ZlNncEtUdGNibHh1ZG1GeUlHTnZiWEJoWTNSUmRXVjFaU0E5SUdaMWJtTjBhVzl1SUdOdmJYQmhZM1JSZFdWMVpTaHhkV1YxWlNrZ2UxeHVJQ0FnSUhaaGNpQnZZbW83WEc1Y2JpQWdJQ0IzYUdsc1pTQW9jWFZsZFdVdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJwZEdWdElEMGdjWFZsZFdVdWNHOXdLQ2s3WEc0Z0lDQWdJQ0FnSUc5aWFpQTlJR2wwWlcwdWIySnFXMmwwWlcwdWNISnZjRjA3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLRUZ5Y21GNUxtbHpRWEp5WVhrb2IySnFLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdOdmJYQmhZM1JsWkNBOUlGdGRPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnFJRDBnTURzZ2FpQThJRzlpYWk1c1pXNW5kR2c3SUNzcmFpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnYjJKcVcycGRJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyMXdZV04wWldRdWNIVnphQ2h2WW1wYmFsMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2FYUmxiUzV2WW1wYmFYUmxiUzV3Y205d1hTQTlJR052YlhCaFkzUmxaRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQnZZbW83WEc1OU8xeHVYRzVsZUhCdmNuUnpMbUZ5Y21GNVZHOVBZbXBsWTNRZ1BTQm1kVzVqZEdsdmJpQmhjbkpoZVZSdlQySnFaV04wS0hOdmRYSmpaU3dnYjNCMGFXOXVjeWtnZTF4dUlDQWdJSFpoY2lCdlltb2dQU0J2Y0hScGIyNXpJQ1ltSUc5d2RHbHZibk11Y0d4aGFXNVBZbXBsWTNSeklEOGdUMkpxWldOMExtTnlaV0YwWlNodWRXeHNLU0E2SUh0OU8xeHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2MyOTFjbU5sTG14bGJtZDBhRHNnS3l0cEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnYzI5MWNtTmxXMmxkSUNFOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiMkpxVzJsZElEMGdjMjkxY21ObFcybGRPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlHOWlhanRjYm4wN1hHNWNibVY0Y0c5eWRITXViV1Z5WjJVZ1BTQm1kVzVqZEdsdmJpQnRaWEpuWlNoMFlYSm5aWFFzSUhOdmRYSmpaU3dnYjNCMGFXOXVjeWtnZTF4dUlDQWdJR2xtSUNnaGMyOTFjbU5sS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMFlYSm5aWFE3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJ6YjNWeVkyVWdJVDA5SUNkdlltcGxZM1FuS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtIUmhjbWRsZENrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSaGNtZGxkQzV3ZFhOb0tITnZkWEpqWlNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9kSGx3Wlc5bUlIUmhjbWRsZENBOVBUMGdKMjlpYW1WamRDY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h2Y0hScGIyNXpMbkJzWVdsdVQySnFaV04wY3lCOGZDQnZjSFJwYjI1ekxtRnNiRzkzVUhKdmRHOTBlWEJsY3lCOGZDQWhhR0Z6TG1OaGJHd29UMkpxWldOMExuQnliM1J2ZEhsd1pTd2djMjkxY21ObEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJoY21kbGRGdHpiM1Z5WTJWZElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCYmRHRnlaMlYwTENCemIzVnlZMlZkTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUmhjbWRsZER0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUhSaGNtZGxkQ0FoUFQwZ0oyOWlhbVZqZENjcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGdDBZWEpuWlhSZExtTnZibU5oZENoemIzVnlZMlVwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCdFpYSm5aVlJoY21kbGRDQTlJSFJoY21kbGREdGNiaUFnSUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNoMFlYSm5aWFFwSUNZbUlDRkJjbkpoZVM1cGMwRnljbUY1S0hOdmRYSmpaU2twSUh0Y2JpQWdJQ0FnSUNBZ2JXVnlaMlZVWVhKblpYUWdQU0JsZUhCdmNuUnpMbUZ5Y21GNVZHOVBZbXBsWTNRb2RHRnlaMlYwTENCdmNIUnBiMjV6S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2gwWVhKblpYUXBJQ1ltSUVGeWNtRjVMbWx6UVhKeVlYa29jMjkxY21ObEtTa2dlMXh1SUNBZ0lDQWdJQ0J6YjNWeVkyVXVabTl5UldGamFDaG1kVzVqZEdsdmJpQW9hWFJsYlN3Z2FTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2hoY3k1allXeHNLSFJoY21kbGRDd2dhU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR0Z5WjJWMFcybGRJQ1ltSUhSNWNHVnZaaUIwWVhKblpYUmJhVjBnUFQwOUlDZHZZbXBsWTNRbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSaGNtZGxkRnRwWFNBOUlHVjRjRzl5ZEhNdWJXVnlaMlVvZEdGeVoyVjBXMmxkTENCcGRHVnRMQ0J2Y0hScGIyNXpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFlYSm5aWFF1Y0hWemFDaHBkR1Z0S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJoY21kbGRGdHBYU0E5SUdsMFpXMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR0Z5WjJWME8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJQWW1wbFkzUXVhMlY1Y3loemIzVnlZMlVwTG5KbFpIVmpaU2htZFc1amRHbHZiaUFvWVdOakxDQnJaWGtwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSFpoYkhWbElEMGdjMjkxY21ObFcydGxlVjA3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLR2hoY3k1allXeHNLR0ZqWXl3Z2EyVjVLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZV05qVzJ0bGVWMGdQU0JsZUhCdmNuUnpMbTFsY21kbEtHRmpZMXRyWlhsZExDQjJZV3gxWlN3Z2IzQjBhVzl1Y3lrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoWTJOYmEyVjVYU0E5SUhaaGJIVmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJoWTJNN1hHNGdJQ0FnZlN3Z2JXVnlaMlZVWVhKblpYUXBPMXh1ZlR0Y2JseHVaWGh3YjNKMGN5NWhjM05wWjI0Z1BTQm1kVzVqZEdsdmJpQmhjM05wWjI1VGFXNW5iR1ZUYjNWeVkyVW9kR0Z5WjJWMExDQnpiM1Z5WTJVcElIdGNiaUFnSUNCeVpYUjFjbTRnVDJKcVpXTjBMbXRsZVhNb2MyOTFjbU5sS1M1eVpXUjFZMlVvWm5WdVkzUnBiMjRnS0dGall5d2dhMlY1S1NCN1hHNGdJQ0FnSUNBZ0lHRmpZMXRyWlhsZElEMGdjMjkxY21ObFcydGxlVjA3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJoWTJNN1hHNGdJQ0FnZlN3Z2RHRnlaMlYwS1R0Y2JuMDdYRzVjYm1WNGNHOXlkSE11WkdWamIyUmxJRDBnWm5WdVkzUnBiMjRnS0hOMGNpa2dlMXh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJrWldOdlpHVlZVa2xEYjIxd2IyNWxiblFvYzNSeUxuSmxjR3hoWTJVb0wxeGNLeTluTENBbklDY3BLVHRjYmlBZ0lDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ6ZEhJN1hHNGdJQ0FnZlZ4dWZUdGNibHh1Wlhod2IzSjBjeTVsYm1OdlpHVWdQU0JtZFc1amRHbHZiaUJsYm1OdlpHVW9jM1J5S1NCN1hHNGdJQ0FnTHk4Z1ZHaHBjeUJqYjJSbElIZGhjeUJ2Y21sbmFXNWhiR3g1SUhkeWFYUjBaVzRnWW5rZ1FuSnBZVzRnVjJocGRHVWdLRzF6WTJSbGVDa2dabTl5SUhSb1pTQnBieTVxY3lCamIzSmxJSEYxWlhKNWMzUnlhVzVuSUd4cFluSmhjbmt1WEc0Z0lDQWdMeThnU1hRZ2FHRnpJR0psWlc0Z1lXUmhjSFJsWkNCb1pYSmxJR1p2Y2lCemRISnBZM1JsY2lCaFpHaGxjbVZ1WTJVZ2RHOGdVa1pESURNNU9EWmNiaUFnSUNCcFppQW9jM1J5TG14bGJtZDBhQ0E5UFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1J5TzF4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCemRISnBibWNnUFNCMGVYQmxiMllnYzNSeUlEMDlQU0FuYzNSeWFXNW5KeUEvSUhOMGNpQTZJRk4wY21sdVp5aHpkSElwTzF4dVhHNGdJQ0FnZG1GeUlHOTFkQ0E5SUNjbk8xeHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2MzUnlhVzVuTG14bGJtZDBhRHNnS3l0cEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCaklEMGdjM1J5YVc1bkxtTm9ZWEpEYjJSbFFYUW9hU2s3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1l5QTlQVDBnTUhneVJDQXZMeUF0WEc0Z0lDQWdJQ0FnSUNBZ0lDQjhmQ0JqSUQwOVBTQXdlREpGSUM4dklDNWNiaUFnSUNBZ0lDQWdJQ0FnSUh4OElHTWdQVDA5SURCNE5VWWdMeThnWDF4dUlDQWdJQ0FnSUNBZ0lDQWdmSHdnWXlBOVBUMGdNSGczUlNBdkx5QitYRzRnSUNBZ0lDQWdJQ0FnSUNCOGZDQW9ZeUErUFNBd2VETXdJQ1ltSUdNZ1BEMGdNSGd6T1NrZ0x5OGdNQzA1WEc0Z0lDQWdJQ0FnSUNBZ0lDQjhmQ0FvWXlBK1BTQXdlRFF4SUNZbUlHTWdQRDBnTUhnMVFTa2dMeThnWVMxNlhHNGdJQ0FnSUNBZ0lDQWdJQ0I4ZkNBb1l5QStQU0F3ZURZeElDWW1JR01nUEQwZ01IZzNRU2tnTHk4Z1FTMWFYRzRnSUNBZ0lDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiM1YwSUNzOUlITjBjbWx1Wnk1amFHRnlRWFFvYVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MGFXNTFaVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hqSUR3Z01IZzRNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiM1YwSUQwZ2IzVjBJQ3NnYUdWNFZHRmliR1ZiWTEwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MGFXNTFaVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hqSUR3Z01IZzRNREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzkxZENBOUlHOTFkQ0FySUNob1pYaFVZV0pzWlZzd2VFTXdJSHdnS0dNZ1BqNGdOaWxkSUNzZ2FHVjRWR0ZpYkdWYk1IZzRNQ0I4SUNoaklDWWdNSGd6UmlsZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZsTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdhV1lnS0dNZ1BDQXdlRVE0TURBZ2ZId2dZeUErUFNBd2VFVXdNREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzkxZENBOUlHOTFkQ0FySUNob1pYaFVZV0pzWlZzd2VFVXdJSHdnS0dNZ1BqNGdNVElwWFNBcklHaGxlRlJoWW14bFd6QjRPREFnZkNBb0tHTWdQajRnTmlrZ0ppQXdlRE5HS1YwZ0t5Qm9aWGhVWVdKc1pWc3dlRGd3SUh3Z0tHTWdKaUF3ZUROR0tWMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkR2x1ZFdVN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JwSUNzOUlERTdYRzRnSUNBZ0lDQWdJR01nUFNBd2VERXdNREF3SUNzZ0tDZ29ZeUFtSURCNE0wWkdLU0E4UENBeE1Da2dmQ0FvYzNSeWFXNW5MbU5vWVhKRGIyUmxRWFFvYVNrZ0ppQXdlRE5HUmlrcE8xeHVJQ0FnSUNBZ0lDQnZkWFFnS3owZ2FHVjRWR0ZpYkdWYk1IaEdNQ0I4SUNoaklENCtJREU0S1YxY2JpQWdJQ0FnSUNBZ0lDQWdJQ3NnYUdWNFZHRmliR1ZiTUhnNE1DQjhJQ2dvWXlBK1BpQXhNaWtnSmlBd2VETkdLVjFjYmlBZ0lDQWdJQ0FnSUNBZ0lDc2dhR1Y0VkdGaWJHVmJNSGc0TUNCOElDZ29ZeUErUGlBMktTQW1JREI0TTBZcFhWeHVJQ0FnSUNBZ0lDQWdJQ0FnS3lCb1pYaFVZV0pzWlZzd2VEZ3dJSHdnS0dNZ0ppQXdlRE5HS1YwN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJRzkxZER0Y2JuMDdYRzVjYm1WNGNHOXlkSE11WTI5dGNHRmpkQ0E5SUdaMWJtTjBhVzl1SUdOdmJYQmhZM1FvZG1Gc2RXVXBJSHRjYmlBZ0lDQjJZWElnY1hWbGRXVWdQU0JiZXlCdlltbzZJSHNnYnpvZ2RtRnNkV1VnZlN3Z2NISnZjRG9nSjI4bklIMWRPMXh1SUNBZ0lIWmhjaUJ5WldaeklEMGdXMTA3WEc1Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhGMVpYVmxMbXhsYm1kMGFEc2dLeXRwS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJwZEdWdElEMGdjWFZsZFdWYmFWMDdYRzRnSUNBZ0lDQWdJSFpoY2lCdlltb2dQU0JwZEdWdExtOWlhbHRwZEdWdExuQnliM0JkTzF4dVhHNGdJQ0FnSUNBZ0lIWmhjaUJyWlhseklEMGdUMkpxWldOMExtdGxlWE1vYjJKcUtUdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhaUE5SURBN0lHb2dQQ0JyWlhsekxteGxibWQwYURzZ0t5dHFLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnYTJWNUlEMGdhMlY1YzF0cVhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQjJZV3dnUFNCdlltcGJhMlY1WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnZG1Gc0lEMDlQU0FuYjJKcVpXTjBKeUFtSmlCMllXd2dJVDA5SUc1MWJHd2dKaVlnY21WbWN5NXBibVJsZUU5bUtIWmhiQ2tnUFQwOUlDMHhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY1hWbGRXVXVjSFZ6YUNoN0lHOWlham9nYjJKcUxDQndjbTl3T2lCclpYa2dmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WbWN5NXdkWE5vS0haaGJDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnWTI5dGNHRmpkRkYxWlhWbEtIRjFaWFZsS1R0Y2JuMDdYRzVjYm1WNGNHOXlkSE11YVhOU1pXZEZlSEFnUFNCbWRXNWpkR2x2YmlCcGMxSmxaMFY0Y0Nodlltb3BJSHRjYmlBZ0lDQnlaWFIxY200Z1QySnFaV04wTG5CeWIzUnZkSGx3WlM1MGIxTjBjbWx1Wnk1allXeHNLRzlpYWlrZ1BUMDlJQ2RiYjJKcVpXTjBJRkpsWjBWNGNGMG5PMXh1ZlR0Y2JseHVaWGh3YjNKMGN5NXBjMEoxWm1abGNpQTlJR1oxYm1OMGFXOXVJR2x6UW5WbVptVnlLRzlpYWlrZ2UxeHVJQ0FnSUdsbUlDaHZZbW9nUFQwOUlHNTFiR3dnZkh3Z2RIbHdaVzltSUc5aWFpQTlQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQWhJU2h2WW1vdVkyOXVjM1J5ZFdOMGIzSWdKaVlnYjJKcUxtTnZibk4wY25WamRHOXlMbWx6UW5WbVptVnlJQ1ltSUc5aWFpNWpiMjV6ZEhKMVkzUnZjaTVwYzBKMVptWmxjaWh2WW1vcEtUdGNibjA3WEc0aVhYMD1cbiJdfQ==
